{"version":3,"sources":["types/drawer-sections.ts","types/form.ts","types/enums.ts","app/state/reducerStateValue.ts","app/access-token.ts","app/constants.ts","app/theme.ts","app/config/env.ts","app/state/useStateValue.tsx","components/material-ui/feedback/LinearIndeterminate.tsx","generated/graphql.tsx","components/material-ui/alert-message/AlertMessage.tsx","app/config/apollo.client.ts","components/material-ui/typography/PageTitle.tsx","components/material-ui/other/Copyright.tsx","icons/LogoIcon.svg","pages/section1/SignInPage.tsx","utils/main-util.ts","utils/validation.ts","utils/forms-util.tsx","pages/section1/SignUpPage.tsx","pages/section1/StatePage.tsx","pages/section1/TransactionNonCodeGenPage.tsx","components/force-graph/DynamicGraph/DynamicGraph.tsx","components/snackbar-message/SnackbarMessage.tsx","components/material-ui/custom-dialog/CustomDialog.tsx","components/material-ui/tables/CustomDataTable.tsx","pages/section2/AssetsQueryPage.tsx","components/material-ui/cards/CustomMediaCard.tsx","utils/tsx-util.tsx","pages/section2/CausesQueryPage.tsx","pages/section2/ParticipantsQueryPage.tsx","pages/section2/PersonsQueryPage.tsx","pages/section2/TransactionsQueryPage.tsx","pages/section2/TransactionsSubscriptionPage.tsx","pages/section3/TransactionGoodsForm.tsx","pages/section3/AssetUpsertForm.tsx","pages/section3/CauseUpsertForm.tsx","pages/section3/ParticipantUpsertForm.tsx","pages/section3/PersonUpsertForm.tsx","pages/section3/TransactionUpsertForm.tsx","app/config/routes.tsx","pages/section0/HomePage.tsx","pages/section1/PersonProfilePage.tsx","pages/section1/UseCasesPage.tsx","pages/section1/FeedPage.tsx","pages/section1/DashBoardPage.tsx","pages/section1/TimelinePage.tsx","pages/section1/ResultPage.tsx","pages/section1/CommunityPage.tsx","app/config/form.ts","app/config/form-inputs.tsx","app/config/graph-data.ts","components/material-ui/navigation/ResponsiveDrawer.tsx","Routes.tsx","App.tsx","index.tsx","types/index.ts"],"names":["DrawerSections","FormInputType","ModelType","EntityType","AssetType","TransactionType","ResourceType","CurrencyCode","ActionType","ThemeColors","accessToken","getAccessToken","setAccessToken","token","I18N","undefined","error","register","username","password","reset","create","update","delete","increase","decrease","add","required","invalid","none","close","cancel","donate","quickDonateButtons","subscriptions","waitingForSubscriptions","loginFailed","signIn","signUp","nonAccountSignUp","rememberMe","forgotPassword","snackbarAssetUpsertSuccess","snackbarCauseUpsertSuccess","snackbarParticipantUpsertSuccess","snackbarPersonUpsertSuccess","snackbarTransactionUpsertSuccess","signInWip","transactionUpsertFormWip","transactionGoodsFormWip","signUpUserRegisteredSuccessfully","newModelCreatedSuccessfully","assetTypeOptionPhysicalAsset","assetTypeOptionDigitalAsset","assetTypeOptionPhysicalVoucher","assetTypeOptionDigitalVoucher","entityTypeOptionPerson","entityTypeOptionParticipant","entityTypeOptionCause","transactionTypeOptionTransferFunds","transactionTypeOptionTransferVolunteeringHours","transactionTypeOptionTransferGoods","transactionTypeOptionTransferAsset","resourceTypeOptionFunds","resourceTypeOptionVolunteeringHours","resourceTypeOptionGenericGoods","resourceTypeOptionPhysicalAsset","resourceTypeOptionDigitalAsset","resourceTypeOptionPhysicalVoucher","resourceTypeOptionDigitalVoucher","participantLabel","assetTypeLabel","causeLabel","causePlaceHolder","causeInputStarterLabel","assetIdLabel","assetIdPlaceholder","assetIdHelperText","assetLabel","assetPlaceHolder","ambassadorsLabel","ambassadorsPlaceHolder","ambassadorsHelperText","ownerLabel","ownerPlaceHolder","ownerHelperText","locationLabel","locationPlaceHolder","tagsLabel","tagsPlaceHolder","metaDataLabel","metaDataInternalLabel","metaDataPlaceHolder","emailLabel","emailPlaceHolder","mobilePhoneLabel","mobilePhonePlaceHolder","fiscalNumberLabel","fiscalNumberPlaceHolder","startDateLabel","endDateLabel","datePlaceHolder","inputTypeLabel","inputLabel","inputPlaceHolder","inputHelperText","outputTypeLabel","outputLabel","outputPlaceHolder","outputHelperText","codeLabel","codePlaceHolder","transferTypeLabel","resourceTypeLabel","quantityLabel","quantityPlaceHolder","currencyLabel","goodsLabel","goodsPlaceHolder","currencyCodeEur","currencyCodeUsd","barCodeEan13Label","barCodeEan13PlaceHolder","barCodeEan13HelperText","firstNameLabel","firstNamePlaceHolder","firstNameHelperText","lastNameLabel","lastNamePlaceholder","lastNameHelperText","userNameLabel","userNamePlaceholder","userNameHelperText","passWordLabel","passWordPlaceholder","passWordHelperText","passWordConfirmationLabel","passWordConfirmationPlaceholder","passWordConfirmationHelperText","appConstants","VALUES","defaultCurrency","resultMessageTimeOut","mokeAmbassadors","mokeLocation","mokePassword","mokeTags","title","value","dataGridPageSize","ENTITY_TYPE_OPTIONS","person","participant","cause","ASSET_TYPE_OPTIONS","physicalAsset","digitalAsset","physicalVoucher","digitalVoucher","PARTICIPANT_PERSON_ENTITY_TYPE_OPTIONS","TAGS_OPTIONS","GOODS_OPTIONS","key","code","barCode","name","description","quantity","DEFAULT_LOGIN_CREDENTIALS","COOKIES","jid","DRAWER_WIDTH","GEOLOCATION_OPTIONS","enableHighAccuracy","timeout","maximumAge","REGEXP","fiscalNumber","fiscalNumberArray","email","emailArray","alphaNumeric","date","location","uuid","uuidArray","integer","integerPositiveNonZero","float","floatPositive","mobilePhone","theme","createMuiTheme","palette","primary","main","blue","secondary","red","A400","background","default","envVariables","appTitle","process","appCopyrightName","appCopyrightUri","graphqlServerHttpProtocol","graphqlServerWsProtocol","graphqlServerHttpUri","graphqlServerWsUri","restServerHttpUri","apolloFetchPolicy","apolloRejectUnauthorized","reactAppApolloShowGraphqlErrors","reactAppApolloShowNetworkError","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","useReducer","useStateValue","useContext","useStyles","makeStyles","root","width","margin","spacing","LinearIndeterminate","props","classes","color","className","LinearProgress","AssetNewDocument","gql","CauseNewDocument","ParticipantNewDocument","PersonLoginDocument","PersonLogoutDocument","PersonRegisterDocument","usePersonRegisterMutation","baseOptions","Apollo","TransactionNewDocument","useTransactionNewMutation","AssetsDocument","CausesDocument","useCausesLazyQuery","ParticipantsDocument","PersonProfileDocument","PersonsDocument","usePersonsLazyQuery","ReactForceDataDocument","TransactionsDocument","AssetAddedDocument","useAssetAddedSubscription","CauseAddedDocument","useCauseAddedSubscription","ParticipantAddedDocument","useParticipantAddedSubscription","PersonAddedDocument","usePersonAddedSubscription","TransactionAddedDocument","useTransactionAddedSubscription","AlertSeverityType","refreshLink","TokenRefreshLink","accessTokenField","isTokenValidOrUndefined","exp","jwtDecode","Date","now","fetchAccessToken","fetch","e","method","credentials","handleFetch","handleError","err","console","warn","requestLink","ApolloLink","operation","forward","Observable","observer","handle","Promise","resolve","then","log","setContext","headers","authorization","subscribe","next","bind","complete","catch","unsubscribe","httpLink","HttpLink","uri","fetchOptions","agent","https","Agent","rejectUnauthorized","wsLink","WebSocketLink","options","reconnect","connectionParams","lazy","splitLink","split","query","definition","getMainDefinition","kind","client","ApolloClient","connectToDevTools","cache","InMemoryCache","link","from","onError","graphQLErrors","networkError","PageTitle","Typography","variant","AlertMessage","message","severity","Alert","AlertTitle","Copyright","align","Link","href","copyrightUri","copyrightName","getFullYear","_extends","Object","assign","target","i","arguments","length","source","prototype","hasOwnProperty","call","apply","this","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","FormFieldNames","createElement","id","viewBox","d","points","_ref4","height","transform","xlinkHref","_ref","svgRef","ref","ForwardRef","forwardRef","recordToArray","record","result","push","isValidJsonObject","json","Array","isArray","forEach","JSON","stringify","parse","isValidEnum","enumType","enumKey","values","includes","getEnumKeyFromEnumValue","enumValue","filter","x","Error","currentFormatDate","withTime","yy","getUTCFullYear","toString","mo","getUTCMonth","padStart","dd","getUTCDate","hh","getUTCHours","mm","getUTCMinutes","ss","getUTCSeconds","parseTemplate","stringTemplate","obj","replace","g","validateBarCode","test","checksum","codeList","checkDigit","parseInt","pop","map","index","digit","check","validateFiscalNumber","substring","tot","div","mod","tst","display","flexWrap","spacer","marginBottom","spacerTop","marginTop","redColor","backgroundColor","formButtonsDiv","button","marginRight","buttonGoodsActions","buttonGoodsAdd","commonControlProps","validationMessage","messageType","fieldName","c","validationRuleRegExHelper","regExp","pattern","validationBarCodeExHelper","validate","validateRegExpArray","regExpArray","some","validateRegExpArrayWithValuesArray","failValues","v","getGraphQLApolloError","apolloError","errorMessage","propExists","path","reduce","prop","extensions","exception","responses","generateFormButtonsDiv","loading","handleResetHandler","Button","type","disabled","onClick","generateFormDefinition","formDefinition","control","errors","visible","returnValue","TEXT","PASSWORD","DATE","EMAIL","COLOR","DATETIME","FILE","HIDDEN","IMAGE","MONTH","NUMBER","RANGE","TEL","TIME","URL","WEEK","generateTextField","SELECT","generateSelection","AUTOCOMPLETE","generateAutocomplete","CUSTOM","custom","as","TextField","inputRef","controlProps","label","placeholder","fullWidth","rules","errorFn","errorHandler","helperText","helperTextFn","helperTextHandler","onFocus","onFocusFn","defaultValue","FormControl","InputLabel","Select","labelId","MenuItem","current","focus","FormHelperText","icon","fontSize","checkedIcon","handleKeyDown","event","preventDefault","stopPropagation","getValues","newTitle","capitalCase","newValue","constantCase","find","setValue","shouldValidate","addToAutocomplete","render","onChange","Autocomplete","multiple","multipleOptions","disableCloseOnSelect","filterSelectedOptions","autoComplete","autoHighlight","freeSolo","getOptionLabel","option","getOptionSelected","renderOption","selected","Checkbox","style","checked","renderInput","params","inputProps","onKeyDown","data","paper","flexDirection","alignItems","avatar","form","defaultValues","copyrightProps","firstName","lastName","passwordConfirmation","marginLeft","NodeType","RelationType","LinkColor","NodeValue","NodeColor","lastParticipantIdAdded","lastPersonIdAdded","lastCauseIdAdded","lastAssetIdAdded","lastTransactionIdAdded","SnackbarSeverityType","DynamicGraph","state","fgRef","useRef","useApolloClient","handleClick","useCallback","node","distRatio","Math","hypot","y","z","cameraPosition","fetchPolicy","variables","skip","reactForceDataQuery","dataQuery","addToGraph","nodes","links","readQuery","writeQuery","reactForceData","__typename","participantDataSub","participantLoadingSub","participantErrorSub","personDataSub","personLoadingSub","personErrorSub","causeDataSub","causeLoadingSub","causeErrorSub","assetDataSub","assetLoadingSub","assetErrorSub","transactionDataSub","transactionLoadingSub","transactionErrorSub","participantAdded","nodeVal","PARTICIPANT","group","desc","BLUE","autoColorBy","HAS_BORN","DARK_GREY","personAdded","PERSON","PINK","causeAdded","CAUSE","ORANGE","input","entity","CREATED_CAUSE","assetAdded","ASSET","YELLOW","owner","CREATED_ASSET","transactionAdded","transactionType","TRANSACTION","GREEN","CREATED_TRANSACTION","output","useEffect","ERROR","graphData","nodeLabel","linkLabel","showNavInfo","nodeAutoColorBy","linkAutoColorBy","nodeRelSize","enableNodeDrag","linkThreeObjectExtend","linkDirectionalArrowLength","linkDirectionalArrowRelPos","linkWidth","shellWidth","onNodeClick","CustomDialog","closeButtonLabel","dialogActions","React","useState","open","setOpen","useImperativeHandle","handleClickOpen","handleClose","Dialog","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogActions","autoFocus","queryDataToDataTableRows","columns","rows","row","field","modalPropertyColumns","hide","headerName","objectPropsToDataTableRows","CustomDataTable","attributes","maxWidth","media","CustomMediaCard","content","image","imageTitle","buttonLabel","onClickHandler","Card","CardActionArea","CardMedia","CardContent","gutterBottom","component","CardActions","size","generateMediaCardQuickButton","startPic","titleTemplate","gridContent","Grid","item","xs","md","lg","container","sm","SnackbarMessage","reason","Snackbar","autoHideDuration","inputType","outputType","goodsBag","tags","metaData","metaDataInternal","assetType","ambassadors","startDate","endDate","RouteKey","resourceType","currency","assetId","goods","defaultDrawerListItemIcon","AddBox","routes","HOME","Box","m","paragraph","section","SECTION0","drawerIcon","Home","exact","PROFILE","pageTitle","personProfile","SECTION1","Fingerprint","USE_CASES","GRAPH","DynamicFeed","DASHBOARD","TIMELINE","STATE","dispatch","buttons","ToggleButton","toUpperCase","action","CHANGE_THEME","payload","newTheme","stateOutput","pageContent","ToggleButtonGroup","aria-label","ButtonGroup","DECREMENT","INCREMENT","SIGNED_OUT_USER","RESULT_PAGE","SUCCESS","resultMessage","COMMUNITY","Loyalty","SIGN_IN","history","useForm","formCommonOptions","handleSubmit","showPassword","setShowPassword","personLoginMutation","setTimeout","RESULT_MESSAGE","handleSubmitHandler","a","loginPersonData","store","personLogin","user","response","profile","roles","SIGNED_IN_USER","USERNAME","commonFormFieldUsername","commonFormFieldPassword","Container","noValidate","onSubmit","FormControlLabel","SIGN_UP","mt","watch","personNewMutation","newPersonData","pathname","FIRST_NAME","commonFormFieldFirstName","LAST_NAME","commonFormFieldLastName","PASSWORD_CONFIRMATION","commonFormFieldPasswordConfirmation","FISCAL_NUMBER","commonFormFieldFiscalNumber","MOBILE_PHONE","commonFormFieldMobilePhone","commonFormFieldEmail","PARTICIPANTS","modalRows","setModalRows","take","participantQuery","dataSub","loadingSub","errorSub","childRef","participants","subscriptionsContent","pageSize","onRowClick","SECTION2","PERSONS","personQuery","persons","CAUSES","causeQuery","causes","Explore","ASSETS","assetQuery","assets","TRANSACTIONS","transactionQuery","transactions","PARTICIPANT_UPSERT_FORM","snackbarOpen","setSnackbarOpen","assetNewMutation","newParticipantData","CODE","commonFormFieldCode","NAME","commonFormFieldCauseName","AMBASSADORS","commonFormFieldAmbassadors","join","META_DATA","commonFormFieldMetadata","META_DATA_INTERNAL","commonFormFieldMetadataInternal","SECTION3","Apartment","PERSON_UPSERT_FORM","People","CAUSE_UPSERT_FORM","causeNewMutation","newCauseData","START_DATE","commonFormFieldStartDate","END_DATE","commonFormFieldEndDate","LOCATION","commonFormFieldLocation","INPUT_TYPE","commonFormFieldPersonNdParticipantInputTypeEntity","INPUT","commonFormFieldCauseInputEntity","TAGS","commonFormFieldTags","Assessment","ASSET_UPSERT_FORM","newAssetData","ASSET_TYPE","commonFormFieldAssetType","commonFormFieldAssetName","OWNER","commonFormFieldAssetOwner","LocalPlay","TRANSACTION_UPSERT_FORM","transferFunds","lastTransactionType","setLastTransactionType","trigger","transactionNewMutation","useFieldArray","fields","append","remove","causeOptions","setCauseOptions","causeOptionsLoaded","setCauseOptionsLoaded","causeQueryData","causeQueryLoading","causeQueryError","goodsBagEanInputRef","goodsBagQuantityInputRef","goodsBagEan","commonFormFieldGoodsBagEan","goodsBagQuantity","commonFormFieldGoodsBagQuantity","customGoodsBag","commonFormFieldGoodsBag","GOODS_BAG","goodsBagArg","namePrefix","renderCount","TRANSACTION_TYPE","RESOURCE_TYPE","OUTPUT_TYPE","funds","transferVolunteeringHours","volunteeringHours","transferGoods","genericGoods","transferAsset","newTransactionData","Number","resourceTypeOptions","ASSET_ID","commonFormFieldAssetId","commonFormFieldOutputTypeEntity","commonFormFieldOutputEntity","OUTPUT","QUANTITY","commonFormFieldQuantity","CURRENCY","commonFormFieldCurrency","commonFormFieldGoodsBagInput","AccountTree","TRANSACTION_GOODS_FORM","locked","setLocked","handleIncreaseDecreaseGood","handleBarcodeReaderScan","findIndex","indexEmpty","addToGoodsBag","Switch","timeBeforeScanTest","onScan","LocalMall","drawerCategories","keyEnum","mode","formFieldName","lastNamePlaceHolder","handlePasswordVisibility","InputProps","endAdornment","InputAdornment","position","IconButton","ownerPlaceholder","inputPlaceholder","endPlaceHolder","currentEntityType","outputPlaceholder","eur","usd","maxGoodsItems","GENESIS","WHITE","FUNDS","createStyles","drawer","breakpoints","up","flexShrink","appBar","menuButton","toolbar","mixins","drawerPaper","flexGrow","padding","grow","sectionDesktop","sectionMobile","ResponsiveDrawer","useTheme","logout","mobileOpen","setMobileOpen","anchorEl","setAnchorEl","mobileMoreAnchorEl","setMobileMoreAnchorEl","isMenuOpen","Boolean","isMobileMenuOpen","useDimensions","appBarRef","useLocation","logoutDisabled","setLogoutDisabled","setWidth","SET_SHELL_WIDTH","categories","drawerSections","isNaN","trunc","handleDrawerToggle","handleClickListItem","handleProfileMenuOpen","currentTarget","handleMobileMenuClose","handleMenuSignOut","resetStore","finally","menuId","renderMenu","Menu","anchorOrigin","vertical","horizontal","keepMounted","transformOrigin","to","logged","renderMobileMenu","aria-controls","aria-haspopup","cats","listItems","Divider","currentSection","sectionIndex","category","ListItem","ListItemIcon","ListItemText","AppBar","Toolbar","edge","noWrap","Hidden","smUp","implementation","Drawer","anchor","direction","ModalProps","xsDown","route","Routes","routerChild","App","setLoading","profileQuery","profileCalled","called","profileData","profileLoading","profileLoaded","setProfileLoaded","res","valid","ReactDOM","counter","searchUsersQuery","CHANGE_SEARCH_USERS_QUERY","CssBaseline","document","getElementById"],"mappings":"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","file":"static/js/main.d6a48026.chunk.js","sourcesContent":["export enum DrawerSections {\n  SECTION0 = 'SECTION0',\n  SECTION1 = 'SECTION1',\n  SECTION2 = 'SECTION2',\n  SECTION3 = 'SECTION3',\n  // SECTION4 = 'SECTION4',\n}\n","import React from 'react';\nimport { Control, Validate, ValidationRule, ValidationValueMessage } from 'react-hook-form';\nimport { PropTypes } from '@material-ui/core';\n\n// TODO refactor to FormTextFieldType\n// https://www.w3schools.com/html/html_form_input_types.asp\n// min max etc\nexport enum FormInputType {\n  // used\n  TEXT = 'text',\n  PASSWORD = 'password',\n  DATE = 'date',\n  EMAIL = 'email',\n  // not used yet\n  COLOR = 'color',\n  DATETIME = 'datetime',\n  FILE = 'file',\n  HIDDEN = 'hidden',\n  IMAGE = 'image',\n  MONTH = 'month',\n  NUMBER = 'number',\n  RANGE = 'range',\n  TEL = 'tel',\n  TIME = 'time',\n  URL = 'url',\n  WEEK = 'week',\n  // extend html type\n  SELECT = 'select',\n  AUTOCOMPLETE = 'autocomplete',\n  // can be anything\n  CUSTOM = 'custom',\n};\nexport type FormInputPropsValue = { name: string, label: string, default: string | number | boolean }\nexport type FormInputProps = Record<string, FormInputPropsValue>;\nexport type FormDefaultValues = { [key: string]: string | number | boolean | string[] | any };\nexport type FormPropFields = {\n  // as: JSX.Element\n  inputRef?: any,\n  // used only in textField inputs, other inputs don't use it like autocomplete and selection etc\n  type: FormInputType,\n  name: string,\n  label: string;\n  // TODO: not used, we use forme defaultValues\n  // defaultValue?: string,\n  placeholder?: string,\n  helperText?: string,\n  fullWidth?: boolean,\n  className?: any,\n  // pass arbitrary props\n  controlProps?: {\n    // 'filled' | 'outlined' | 'standard',\n    variant?: any,\n    margin?: PropTypes.Margin,\n    // warn must be capitalized\n    InputProps?: any;\n  };\n  rules?: {\n    required?: string | boolean | ValidationValueMessage<boolean>,\n    min?: ValidationRule<React.ReactText>,\n    max?: ValidationRule<React.ReactText>,\n    maxLength?: ValidationRule<React.ReactText>,\n    minLength?: ValidationRule<React.ReactText>,\n    pattern?: ValidationRule<RegExp>,\n    validate?: Validate | Record<string, Validate>\n  },\n  // autocomplete\n  disabled?: boolean,\n  multipleOptions?: boolean,\n  addToAutocomplete?: boolean,\n  // true to keep open after select, rare used\n  disableCloseOnSelect?: boolean,\n  // functions\n  options?: () => AutocompleteAndSelectOptions[], // | ((control: Control<Record<string, any>>) => AutocompleteOption[]),\n  visible?: boolean | ((control: Control<Record<string, any>>) => boolean),\n  // events\n  // onChange?: () => void,\n  // custom\n  custom?: any,\n  defaultValue?: any,\n  errorFn?: () => boolean,\n  helperTextFn?: () => string,\n  onFocusFn?: () => void,\n}\n// components: used for AutocompleteOption and Selection component\nexport type AutocompleteAndSelectOptions = { key?: number, title: string, value: string | number | any };\n\n// export type ExtraProps<ClassKey extends string = string> = {\n//   formDefinition: Record<string, FormPropFields>;\n//   inputProps: InputProps;\n//   defaultValues: DefaultValues;\n//   useStyles: () => ClassNameMap<ClassKey>;\n// }\n\n// export type Props = ExtraProps & RouteComponentProps;\n","export enum ModelType {\n  asset = 'Asset',\n  cause = 'Cause',\n  person = 'Person',\n  participant = 'Participant',\n  transaction = 'Transaction',\n}\n\nexport enum EntityType {\n  participant = 'com.chain.solidary.model.participant',\n  person = 'com.chain.solidary.model.person',\n  cause = 'com.chain.solidary.model.cause'\n}\n\nexport enum AssetType {\n  physicalAsset = 'PHYSICAL_ASSET',\n  digitalAsset = 'DIGITAL_ASSET',\n  physicalVoucher = 'PHYSICAL_VOUCHER',\n  digitalVoucher = 'DIGITAL_VOUCHER',\n}\n\nexport enum TransactionType {\n  transferFunds = 'TRANSFER_FUNDS',\n  transferVolunteeringHours = 'TRANSFER_VOLUNTEERING_HOURS',\n  transferGoods = 'TRANSFER_GOODS',\n  transferAsset = 'TRANSFER_ASSET',\n}\n\nexport enum ResourceType {\n  funds = 'FUNDS',\n  volunteeringHours = 'VOLUNTEERING_HOURS',\n  genericGoods = 'GENERIC_GOODS',\n  physicalAsset = 'PHYSICAL_ASSET',\n  digitalAsset = 'DIGITAL_ASSET',\n  physicalVoucher = 'PHYSICAL_VOUCHER',\n  digitalVoucher = 'DIGITAL_VOUCHER',\n}\n\nexport enum CurrencyCode {\n  eur = 'EUR',\n  usd = 'USD',\n}\n","// StateProvider\nexport const initialState = {\n  theme: { primary: 'GREEN' },\n  counter: 0,\n  searchUsersQuery: '',\n  user: {\n    logged: false,\n    profile: {},\n  },\n  resultMessage: '',\n};\n\n// this infers State type from initialState object???\nexport type State = typeof initialState;\n\n// reducer actions\nexport enum ActionType {\n  CHANGE_THEME = 'CHANGE_THEME',\n  DECREMENT = 'DECREMENT',\n  INCREMENT = 'INCREMENT',\n  CHANGE_SEARCH_USERS_QUERY = 'CHANGE_SEARCH_USERS_QUERY',\n  SIGNED_IN_USER = 'SIGNED_IN_USER',\n  SIGNED_OUT_USER = 'SIGNED_OUT_USER',\n  RESULT_MESSAGE = 'RESULT_MESSAGE',\n  // material\n  SET_SHELL_WIDTH = 'SET_SHELL_WIDTH',\n}\n\nexport type Action =\n  | { type: ActionType.CHANGE_THEME, payload: { newTheme: string } }\n  | { type: ActionType.DECREMENT, payload: any }\n  | { type: ActionType.INCREMENT, payload: any }\n  | { type: ActionType.CHANGE_SEARCH_USERS_QUERY, payload: { query: string } }\n  | { type: ActionType.SIGNED_IN_USER, payload: { profile: any } }\n  | { type: ActionType.SIGNED_OUT_USER }\n  | { type: ActionType.RESULT_MESSAGE, payload: { message: string } }\n  | { type: ActionType.SET_SHELL_WIDTH, payload: { width: number } }\n  ;\n\n// reducer types\nexport enum ThemeColors {\n  GREEN = 'Green',\n  BLUE = 'Blue',\n  RED = 'Red',\n  BLACK = 'Black',\n  WHITE = 'White',\n  PINK = 'Pink',\n}\n\nexport default (state: State, action: Action) => {\n  switch (action.type) {\n    case ActionType.CHANGE_THEME:\n      return {\n        ...state,\n        theme: {\n          primary: action.payload.newTheme\n        }\n      };\n    case ActionType.INCREMENT:\n      return {\n        ...state,\n        counter: state.counter + 1\n      }\n    case ActionType.DECREMENT:\n      return {\n        ...state,\n        counter: state.counter - 1\n      }\n    case ActionType.CHANGE_SEARCH_USERS_QUERY:\n      return {\n        ...state,\n        searchUsersQuery: action.payload.query\n      }\n    case ActionType.SIGNED_IN_USER:\n      return {\n        ...state,\n        user: {\n          logged: true,\n          profile: action.payload.profile\n        }\n      }\n    case ActionType.SIGNED_OUT_USER:\n      return {\n        ...state,\n        user: {\n          logged: false,\n          profile: {}\n        }\n      }\n    case ActionType.RESULT_MESSAGE:\n      return {\n        ...state,\n        resultMessage: action.payload.message,\n      };\n    case ActionType.SET_SHELL_WIDTH:\n      return {\n        ...state,\n        shellWidth: action.payload.width,\n      };\n\n    default:\n      throw new Error('Unknown Action type!');\n  }\n}\n","// stores inMemory accessToken\nlet accessToken: string = '';\n\nexport const getAccessToken = () => {\n  return accessToken;\n}\nexport const setAccessToken = (token: string) => {\n  accessToken = token;\n}","/* eslint-disable no-template-curly-in-string */\nimport { AssetType, EntityType, GoodsOptions } from \"../types\";\n\nexport const mokeFormData = false;\n\nconst VALUES: { [key: string]: any } = {\n  // used in selection box's, unselected value\n  undefined: '',\n  defaultCurrency: 'EUR',\n  // used in signIn to clear message\n  resultMessageTimeOut: 5000,\n  // admin, johndoe\n  mokeAmbassadors: '4ea88521-031b-4279-9165-9c10e1839000 PT182692124',\n  mokeLocation: '12.1890144,-28.5171909',\n  mokePassword: 'Aa456#45',\n  mokeTags: [\n    { title: 'Nature', value: 'NATURE' },\n    { title: 'Economy', value: 'ECONOMY' },\n  ],\n  dataGridPageSize: 6,\n}\n\nconst I18N: { [key: string]: string } = {\n  // keywords\n  undefined: 'Undefined',\n  error: 'Error',\n  register: 'Register',\n  username: 'Username',\n  password: 'Password',\n  reset: 'Reset',\n  create: 'Create',\n  update: 'Update',\n  delete: 'Delete',\n  increase: 'Increase',\n  decrease: 'Decrease',\n  add: 'Add',\n  required: 'required',\n  invalid: 'invalid',\n  none: 'none',\n  close: 'Close',\n  cancel: 'Cancel',\n  donate: 'Donate',\n  quickDonateButtons: 'Quick Donate Buttons (WIP)',\n  subscriptions: 'Subscriptions',\n  waitingForSubscriptions: 'waiting for subscriptions...',\n  // messages\n  loginFailed: 'login failed please try again...',\n  signIn: 'Sign In',\n  signUp: 'Sign Up',\n  nonAccountSignUp: 'Don\\'t have an account? Sign Up',\n  rememberMe: 'Remember me',\n  forgotPassword: 'Forgot password?',\n  snackbarAssetUpsertSuccess: 'asset upsert successful!',\n  snackbarCauseUpsertSuccess: 'cause upsert successful!',\n  snackbarParticipantUpsertSuccess: 'participant upsert successful!',\n  snackbarPersonUpsertSuccess: 'person upsert successful!',\n  snackbarTransactionUpsertSuccess: 'transaction upsert successful!',\n  // wip: messages\n  signInWip: 'wip: required send email activation code, otp code, finish remember me, and other stuff...',\n  transactionUpsertFormWip: 'wip: filter causes based on ongoing/active causes',\n  transactionGoodsFormWip: 'wip: only show onGoing causes (dateRange), use barCode to get product info from api (graph graphql server), store info in node product, and return it...',\n  // template\n  signUpUserRegisteredSuccessfully: 'User registered successfully! You can login with \\'${username}\\'',\n  newModelCreatedSuccessfully: 'New ${model} id: \\'${id}\\' created successfully!',\n  // select options\n  assetTypeOptionPhysicalAsset: 'Physical asset',\n  assetTypeOptionDigitalAsset: 'Digital asset',\n  assetTypeOptionPhysicalVoucher: 'Physical voucher',\n  assetTypeOptionDigitalVoucher: 'Digital voucher',\n  entityTypeOptionPerson: 'Person',\n  entityTypeOptionParticipant: 'Organization',\n  entityTypeOptionCause: 'Cause',\n  transactionTypeOptionTransferFunds: 'Transfer funds',\n  transactionTypeOptionTransferVolunteeringHours: 'Transfer volunteering hours',\n  transactionTypeOptionTransferGoods: 'Transfer goods',\n  transactionTypeOptionTransferAsset: 'Transfer asset',\n  resourceTypeOptionFunds: 'Funds',\n  resourceTypeOptionVolunteeringHours: 'Volunteering hours',\n  resourceTypeOptionGenericGoods: 'Generic goods',\n  resourceTypeOptionPhysicalAsset: 'Physical asset',\n  resourceTypeOptionDigitalAsset: 'Digital asset',\n  resourceTypeOptionPhysicalVoucher: 'Physical voucher',\n  resourceTypeOptionDigitalVoucher: 'Digital voucher',\n  // inputs\n  participantLabel: 'Participant name',\n  assetTypeLabel: 'Asset type',\n  causeLabel: 'Cause name',\n  causePlaceHolder: 'Save the world today',\n  causeInputStarterLabel: 'Cause input starter',\n  assetIdLabel: 'Asset Id',\n  assetIdPlaceholder: '16834df0-766d-4cc8-8baa-b0c37338ca34',\n  assetIdHelperText: 'valid asset id',\n  assetLabel: 'Description',\n  assetPlaceHolder: 'Wheelchair cum bed (Motorized)',\n  ambassadorsLabel: 'Ambassadors',\n  ambassadorsPlaceHolder: 'PT182692128 +351936208811 a342f19f-9e26-44c1-ae78-6fd8b0955d47',\n  ambassadorsHelperText: 'valid ambassador\\'s array, can be uuid, fiscalNumber or mobilePhone separated by space',\n  ownerLabel: 'Owner',\n  ownerPlaceHolder: 'PT182692128',\n  ownerHelperText: 'valid owner id, can be uuid, fiscalNumber or mobilePhone',\n  locationLabel: 'Location',\n  locationPlaceHolder: '12.1890144,-28.5171909',\n  tagsLabel: 'Tags',\n  tagsPlaceHolder: 'one or more tags',\n  metaDataLabel: 'Metadata',\n  metaDataInternalLabel: 'Metadata internal',\n  metaDataPlaceHolder: 'arbitrary json object ex { \"key\": \"value\" }',\n  emailLabel: 'Email',\n  emailPlaceHolder: 'valid email',\n  mobilePhoneLabel: 'Mobile phone',\n  mobilePhonePlaceHolder: '+351936101188 ',\n  fiscalNumberLabel: 'Fiscal number',\n  fiscalNumberPlaceHolder: 'valid fiscal number',\n  startDateLabel: 'Start date',\n  endDateLabel: 'End date',\n  datePlaceHolder: 'valid date format YYYY/MM/DD ',\n  inputTypeLabel: 'Input type',\n  inputLabel: 'Input',\n  inputPlaceHolder: 'PT182692128',\n  inputHelperText: 'valid input entity id. can be uuid, fiscalNumber or mobilePhone',\n  outputTypeLabel: 'Output type',\n  outputLabel: 'Output',\n  outputPlaceHolder: 'PT182692128',\n  outputHelperText: 'valid output entity id. can be uuid, fiscalNumber or mobilePhone',\n  codeLabel: 'code',\n  codePlaceHolder: 'valid alfa numeric code format',\n  transferTypeLabel: 'Transfer type',\n  resourceTypeLabel: 'Resource type',\n  quantityLabel: 'Quantity',\n  quantityPlaceHolder: '28.82',\n  currencyLabel: 'Currency',\n  goodsLabel: 'Goods',\n  goodsPlaceHolder: 'valid goods array',\n  currencyCodeEur: 'EUR',\n  currencyCodeUsd: 'USD',\n  barCodeEan13Label: 'EAN Barcode',\n  // https://generate.plus/en/number/ean\n  barCodeEan13PlaceHolder: '978020137962',\n  barCodeEan13HelperText: 'valid ean13 barcode',\n  firstNameLabel: 'First name',\n  firstNamePlaceHolder: 'John',\n  firstNameHelperText: 'valid first Name',\n  lastNameLabel: 'Last name',\n  lastNamePlaceholder: 'Doe',\n  lastNameHelperText: 'valid last name',\n  userNameLabel: 'Username',\n  userNamePlaceholder: 'johndoe',\n  userNameHelperText: 'valid username',\n  passWordLabel: 'Password',\n  passWordPlaceholder: 'Ab912#11',\n  passWordHelperText: 'valid password',\n  passWordConfirmationLabel: 'Password confirmation',\n  passWordConfirmationPlaceholder: 'Ab912#11',\n  passWordConfirmationHelperText: 'must match password',\n};\n\nconst ENTITY_TYPE_OPTIONS = [\n  { title: I18N.entityTypeOptionPerson, value: EntityType.person },\n  { title: I18N.entityTypeOptionParticipant, value: EntityType.participant },\n  { title: I18N.entityTypeOptionCause, value: EntityType.cause },\n];\n\nconst ASSET_TYPE_OPTIONS = [\n  { title: I18N.assetTypeOptionPhysicalAsset, value: AssetType.physicalAsset },\n  { title: I18N.assetTypeOptionDigitalAsset, value: AssetType.digitalAsset },\n  { title: I18N.assetTypeOptionPhysicalVoucher, value: AssetType.physicalVoucher },\n  { title: I18N.assetTypeOptionDigitalVoucher, value: AssetType.digitalVoucher },\n];\n\nconst PARTICIPANT_PERSON_ENTITY_TYPE_OPTIONS = [\n  { title: I18N.entityTypeOptionPerson, value: EntityType.person },\n  { title: I18N.entityTypeOptionParticipant, value: EntityType.participant },\n];\n\nconst TAGS_OPTIONS = [\n  { title: 'Nature', value: 'NATURE' },\n  { title: 'Planet', value: 'PLANET' },\n  { title: 'Economy', value: 'ECONOMY' },\n]\n\nconst GOODS_OPTIONS: GoodsOptions[] = [\n  {\n    // require to pass key\n    key: 1,\n    title: 'option1: 10x001 + 20x002',\n    value: [\n      {\n        code: '001',\n        barCode: 'ean001',\n        name: 'name001',\n        description: 'description001',\n        quantity: 10\n      },\n      {\n        code: '002',\n        barCode: 'ean002',\n        name: 'name002',\n        description: 'description002',\n        quantity: 20\n      }\n    ]\n  },\n  {\n    // require to pass key\n    key: 2,\n    title: 'option2: 30x003 + 40x004',\n    value: [\n      {\n        code: '005',\n        barCode: 'ean005',\n        name: 'name005',\n        description: 'description005',\n        quantity: 50\n      },\n      {\n        code: '004',\n        barCode: 'ean004',\n        name: 'name004',\n        description: 'description004',\n        quantity: 40\n      }\n    ]\n  }\n];\n\nconst DEFAULT_LOGIN_CREDENTIALS = {\n  username: 'admin',    // johndoe\n  password: 'Aa123#12', // 12345678\n};\n\nconst COOKIES = {\n  jid: 'jid',\n};\n\nconst DRAWER_WIDTH: number = 240;\n\nconst GEOLOCATION_OPTIONS = {\n  enableHighAccuracy: true,\n  // 1 min (1000 ms * 60 sec * 1 minute = 60 000ms)\n  timeout: 1000 * 60 * 1,\n  // 24 hour\n  maximumAge: 1000 * 3600 * 24,\n};\n\nconst REGEXP: { [key: string]: RegExp; } = {\n  fiscalNumber: /^[A-Z]{2}[0-9]{9}$/i,\n  // split by space `(\\s...`  \n  fiscalNumberArray: /^([A-Z]{2}[0-9]{9})(\\s[A-Z]{2}[0-9]{9})*$/i,\n  // Email\n  // http://emailregex.com/\n  // eslint-disable-next-line \n  email: /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/i,\n  // comma separated array of emails: https://www.thetopsites.net/article/52527605.shtml\n  emailArray: /^([\\w+-.%]+@[\\w.-]+\\.[A-Za-z]{2,4})(,[\\w+-.%]+@[\\w.-]+\\.[A-Za-z]{2,4})*$/i,\n  // username 4 to 16 chars\n  username: /^([a-zA-Z0-9-_]{4,16})$/i,\n  // Minimum 8 characters at least 1 Uppercase Alphabet, 1 Lowercase Alphabet, 1 Number and 1 Special Character:\n  // https://medium.com/@ikhsanudinhakim/most-used-regex-pattern-for-password-validation-314645912cec\n  password: /^(?=.*[A-Za-z])(?=.*\\d)(?=.*[$@$!%*#?&])[A-Za-z\\d$@$!%*#?&]{8,}$/i,\n  // multi lingual, you'd probably be better off validating against characters you don't want to allow\n  // match names with Capitalization after the first character\n  // firstAndLastName: /^([A-Z][a-zA-Z]*)$/,\n  name: /^[ A-Za-z\\u00C0-\\u00ff0-9^±!@£$%^&*_+§¡€#¢§¶•ªº«\\\\/<>?:;|=.,]{2,100}$/i,\n  alphaNumeric: /^[ A-Za-z0-9_@./#&+-:]*$/i,\n  date: /^((?:19|20)\\d\\d)-(0?[1-9]|1[012])-([12][0-9]|3[01]|0?[1-9])$/i,\n  // latitude/longitude coordinates\n  location: /^(-?\\d+(\\.\\d+)?),\\s*(-?\\d+(\\.\\d+)?)$/i,\n  uuid: /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i,\n  // split by space `(\\s...`  \n  uuidArray: /^([0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12})(\\s[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12})*$/i,\n  // positive integer\n  integer: /^\\d+$/,\n  // positive integer excluding 0\n  integerPositiveNonZero: /^[1-9]\\d*$/,\n  // positive and negative\n  float: /^[+-]?((\\d+(\\.\\d*)?)|(\\.\\d+))$/,\n  floatPositive: /^((\\d+(\\.\\d*)?)|(\\.\\d+))$/i,\n  // currency code\n  // currencyCode: /^(?:[A-Z]{3} [0-9]+(?:\\.[0-9]+)?)|(?:[0-9]+(?:\\.[0-9]+)? [A-Z]{3})$/i,\n  // phone number ex +351936282828\n  // mobilePhone: /^(?!\\b(0)\\1+\\b)(\\+?\\d{1,3}[. -]?)?\\(?\\d{3}\\)?([. -]?)\\d{3}\\3\\d{4}$/i,\n  // https://phoneregex.com/\n  mobilePhone: /\\+(9[976]\\d|8[987530]\\d|6[987]\\d|5[90]\\d|42\\d|3[875]\\d|2[98654321]\\d|9[8543210]|8[6421]|6[6543210]|5[87654321]|4[987654310]|3[9643210]|2[70]|7|1)\\d{1,14}$/i,\n}\n\nexport const appConstants = {\n  VALUES,\n  I18N,\n  ENTITY_TYPE_OPTIONS,\n  ASSET_TYPE_OPTIONS,\n  PARTICIPANT_PERSON_ENTITY_TYPE_OPTIONS,\n  TAGS_OPTIONS,\n  GOODS_OPTIONS,\n  DEFAULT_LOGIN_CREDENTIALS,\n  COOKIES,\n  DRAWER_WIDTH,\n  GEOLOCATION_OPTIONS,\n  REGEXP,\n};\n","import { createMuiTheme } from '@material-ui/core/styles';\nimport blue from '@material-ui/core/colors/blue';\nimport red from '@material-ui/core/colors/red';\nimport { Theme } from '@material-ui/core/styles';\n\nexport const theme: Theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: blue[900],\n    },\n    secondary: {\n      main: '#f44336',\n    },\n    error: {\n      main: red.A400,\n    },\n    background: {\n      default: '#fff',\n    },    \n  },\n});\n","export type EnvConfig = {\n  appTitle: string;\n  appCopyrightName: string;\n  appCopyrightUri: string;\n  graphqlServerHttpProtocol: string;\n  graphqlServerWsProtocol: string;\n  graphqlServerHttpUri: string;\n  graphqlServerWsUri: string;\n  restServerHttpUri: string;\n  apolloFetchPolicy: any;\n  apolloRejectUnauthorized: boolean;\n  reactAppApolloShowGraphqlErrors: boolean;\n  reactAppApolloShowNetworkError: boolean;\n}\n\nexport const envVariables: EnvConfig = {\n  // app\n  appTitle: process.env.REACT_APP_TITLE || 'SolidaryChain GraphQL React Starter',\n  appCopyrightName: process.env.REACT_APP_COPYRIGHT_NAME || 'SolidaryChain',\n  appCopyrightUri: process.env.REACT_APP_COPYRIGHT_URI || 'https://solidarychain.com',\n  // graphql\n  graphqlServerHttpProtocol: process.env.REACT_APP_GRAPHQL_SERVER_HTTP_PROTOCOL,\n  graphqlServerWsProtocol: process.env.REACT_APP_GRAPHQL_SERVER_WS_PROTOCOL,\n  graphqlServerHttpUri: `${process.env.REACT_APP_GRAPHQL_SERVER_HTTP_PROTOCOL}://${process.env.REACT_APP_GRAPHQL_SERVER_URI}/graphql`,\n  graphqlServerWsUri: `${process.env.REACT_APP_GRAPHQL_SERVER_WS_PROTOCOL}://${process.env.REACT_APP_GRAPHQL_SERVER_URI}/graphql`,\n  // used to work with refresh-token\n  restServerHttpUri: `${process.env.REACT_APP_GRAPHQL_SERVER_HTTP_PROTOCOL}://${process.env.REACT_APP_GRAPHQL_SERVER_URI}`,\n  // apollo\n  apolloFetchPolicy: process.env.REACT_APP_APOLLO_FETCH_POLICY || 'cache-first',\n  apolloRejectUnauthorized: (process.env.REACT_APP_APOLLO_REJECT_UNAUTHORIZED === 'true') ? true : false || false,\n  reactAppApolloShowGraphqlErrors: (process.env.REACT_APP_APOLLO_SHOW_GRAPHQL_ERRORS === 'true') ? true : false || false,\n  reactAppApolloShowNetworkError: (process.env.REACT_APP_APOLLO_SHOW_NETWORK_ERROR === 'true') ? true : false || false,\n};\n","import React, { createContext, useContext, useReducer } from 'react';\n\n// 1. wrap app with StateProvider\n// <StateProvider initialState={initialState} reducer={reducer}>\n//   App content ...\n// </StateProvider>\n//\n// 2. then use and update the state inside your app, get custom hook useStateValue\n// const [state, dispatch] = useStateValue();\n// const [{ theme }, dispatch] = useStateValue();\n\ntype StateProviderArgumentType = {\n  reducer: any,\n  initialState: any,\n  children: any\n};\n\n// First we createContext and assign it to StateContext object \n// containing Provider and Consumer. We will need just a Provider here.\nexport const StateContext = createContext(null);\n\n// Then we create new React component called StateProvider. \n// This component wraps it’s children with Provider that accepts value prop.\nexport const StateProvider = ({ reducer, initialState, children }: StateProviderArgumentType) => (\n  // pass result of the useReducer hook as a value to our Provider\n  // useReducer accept reducer and initialState which are passed as a props \n  // from outside. So you have full control over them inside your app\n  <StateContext.Provider value={useReducer(reducer, initialState)}>\n    {children}\n  </StateContext.Provider>\n);\n\n// So this useStateValue function on the last line of our code is basically \n// a custom hook and it’s a little trick how to access your state in any \n// component of your application with less amount of code. \n// It returns exactly the same [state, dispatch] array, that is passed as a \n// value to our Provider.\nexport const useStateValue = () => useContext(StateContext);","import LinearProgress from '@material-ui/core/LinearProgress';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React from 'react';\n\ninterface Props { color?: 'primary' | 'secondary'; }\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n    '& > *': {\n      margin: theme.spacing(2, 0, 2),\n    },\n  },\n}));\n\nexport const LinearIndeterminate: React.FC<Props> = (props) => {\n  const classes = useStyles();\n  const color = (props.color) ? props.color : 'primary';\n  return (\n    <div className={classes.root}>\n      <LinearProgress color={color} />\n    </div>\n  );\n};","import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf). */\n  JSONObject: any;\n  /** Date custom scalar type */\n  Date: any;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  causes: Array<Cause>;\n  causeOngoing: Array<Cause>;\n  causeComplexQuery: Array<Cause>;\n  causeById: Cause;\n  participants: Array<Participant>;\n  participantComplexQuery: Array<Participant>;\n  participantById: Participant;\n  participantByCode: Participant;\n  persons: Array<Person>;\n  personByAttribute: Array<Person>;\n  personComplexQuery: Array<Person>;\n  personById: Person;\n  personByUsername: Person;\n  personByFiscalNumber: Person;\n  personProfile: Person;\n  transactions: Array<Transaction>;\n  transactionComplexQuery: Array<Transaction>;\n  transactionById: Transaction;\n  assets: Array<Asset>;\n  assetComplexQuery: Array<Asset>;\n  assetById: Asset;\n  reactForceData: GraphData;\n};\n\n\nexport type QueryCausesArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryCauseOngoingArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n  date: Scalars['Float'];\n};\n\n\nexport type QueryCauseComplexQueryArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n  getByComplexQueryInput: GetByComplexQueryInput;\n};\n\n\nexport type QueryCauseByIdArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryParticipantsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryParticipantComplexQueryArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n  getByComplexQueryInput: GetByComplexQueryInput;\n};\n\n\nexport type QueryParticipantByIdArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryParticipantByCodeArgs = {\n  code: Scalars['String'];\n};\n\n\nexport type QueryPersonsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryPersonByAttributeArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n  getByAttributeInput: GetByAttributeInput;\n};\n\n\nexport type QueryPersonComplexQueryArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n  getByComplexQueryInput: GetByComplexQueryInput;\n};\n\n\nexport type QueryPersonByIdArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryPersonByUsernameArgs = {\n  username: Scalars['String'];\n};\n\n\nexport type QueryPersonByFiscalNumberArgs = {\n  fiscalNumber: Scalars['String'];\n};\n\n\nexport type QueryTransactionsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryTransactionComplexQueryArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n  getByComplexQueryInput: GetByComplexQueryInput;\n};\n\n\nexport type QueryTransactionByIdArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryAssetsArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryAssetComplexQueryArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n  getByComplexQueryInput: GetByComplexQueryInput;\n};\n\n\nexport type QueryAssetByIdArgs = {\n  id: Scalars['String'];\n};\n\n\nexport type QueryReactForceDataArgs = {\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n};\n\nexport type Cause = {\n  __typename?: 'Cause';\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  email?: Maybe<Scalars['String']>;\n  ambassadors?: Maybe<Array<Scalars['String']>>;\n  startDate?: Maybe<Scalars['Float']>;\n  endDate?: Maybe<Scalars['Float']>;\n  location?: Maybe<Scalars['String']>;\n  tags?: Maybe<Array<Scalars['String']>>;\n  metaData?: Maybe<Scalars['JSONObject']>;\n  metaDataInternal?: Maybe<Scalars['JSONObject']>;\n  input: EntityResult;\n  participant: Participant;\n  createdDate: Scalars['Float'];\n  createdByPersonId?: Maybe<Scalars['String']>;\n  fundsBalance: GenericBalance;\n  volunteeringHoursBalance: GenericBalance;\n  goodsStock?: Maybe<Array<Goods>>;\n};\n\n\nexport type EntityResult = {\n  __typename?: 'EntityResult';\n  entity: Entity;\n};\n\nexport type Entity = {\n  __typename?: 'Entity';\n  id: Scalars['ID'];\n  type: Scalars['String'];\n  createdDate: Scalars['Float'];\n};\n\nexport type Participant = {\n  __typename?: 'Participant';\n  id: Scalars['ID'];\n  code: Scalars['String'];\n  name: Scalars['String'];\n  email?: Maybe<Scalars['String']>;\n  fiscalNumber: Scalars['String'];\n  ambassadors?: Maybe<Array<Scalars['String']>>;\n  msp: Scalars['String'];\n  participant?: Maybe<Participant>;\n  metaData?: Maybe<Scalars['JSONObject']>;\n  metaDataInternal?: Maybe<Scalars['JSONObject']>;\n  createdDate: Scalars['Float'];\n  createdByPersonId?: Maybe<Scalars['String']>;\n  fundsBalance: GenericBalance;\n  volunteeringHoursBalance: GenericBalance;\n  goodsStock?: Maybe<Array<Goods>>;\n};\n\nexport type GenericBalance = {\n  __typename?: 'GenericBalance';\n  debit: Scalars['Float'];\n  credit: Scalars['Float'];\n  balance: Scalars['Float'];\n};\n\nexport type Goods = {\n  __typename?: 'Goods';\n  id: Scalars['ID'];\n  code: Scalars['String'];\n  barCode?: Maybe<Scalars['String']>;\n  name: Scalars['String'];\n  description?: Maybe<Scalars['String']>;\n  tags?: Maybe<Array<Scalars['String']>>;\n  balance: GenericBalance;\n  metaData?: Maybe<Scalars['JSONObject']>;\n  metaDataInternal?: Maybe<Scalars['JSONObject']>;\n  createdDate: Scalars['Float'];\n  createdByPersonId: Scalars['String'];\n};\n\nexport type GetByComplexQueryInput = {\n  filter: Scalars['JSONObject'];\n  fields?: Maybe<Array<Scalars['String']>>;\n  sort?: Maybe<Array<Scalars['JSONObject']>>;\n};\n\nexport type Person = {\n  __typename?: 'Person';\n  id: Scalars['ID'];\n  username?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  attributes?: Maybe<Array<Attribute>>;\n  roles?: Maybe<Array<Scalars['String']>>;\n  participant: Participant;\n  createdDate: Scalars['Float'];\n  registrationDate: Scalars['Date'];\n  mobilePhone: Scalars['String'];\n  postal?: Maybe<Scalars['String']>;\n  city?: Maybe<Scalars['String']>;\n  region?: Maybe<Scalars['String']>;\n  geoLocation?: Maybe<Scalars['String']>;\n  timezone?: Maybe<Scalars['String']>;\n  personalInfo?: Maybe<Scalars['String']>;\n  metaData?: Maybe<Scalars['JSONObject']>;\n  metaDataInternal?: Maybe<Scalars['JSONObject']>;\n  profile?: Maybe<Scalars['JSONObject']>;\n  fundsBalance: GenericBalance;\n  volunteeringHoursBalance: GenericBalance;\n  goodsStock?: Maybe<Array<Goods>>;\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  gender?: Maybe<Scalars['String']>;\n  height?: Maybe<Scalars['Float']>;\n  fatherFirstName?: Maybe<Scalars['String']>;\n  fatherLastName?: Maybe<Scalars['String']>;\n  motherFirstName?: Maybe<Scalars['String']>;\n  motherLastName?: Maybe<Scalars['String']>;\n  birthDate?: Maybe<Scalars['Date']>;\n  nationality?: Maybe<Scalars['String']>;\n  country?: Maybe<Scalars['String']>;\n  documentNumber?: Maybe<Scalars['String']>;\n  documentType?: Maybe<Scalars['String']>;\n  cardVersion?: Maybe<Scalars['String']>;\n  emissionDate?: Maybe<Scalars['Date']>;\n  expirationDate?: Maybe<Scalars['Date']>;\n  emittingEntity?: Maybe<Scalars['String']>;\n  identityNumber?: Maybe<Scalars['String']>;\n  fiscalNumber: Scalars['String'];\n  socialSecurityNumber?: Maybe<Scalars['String']>;\n  beneficiaryNumber?: Maybe<Scalars['String']>;\n  pan?: Maybe<Scalars['String']>;\n  requestLocation?: Maybe<Scalars['String']>;\n  otherInformation?: Maybe<Scalars['String']>;\n};\n\nexport type Attribute = {\n  __typename?: 'Attribute';\n  id: Scalars['ID'];\n  content?: Maybe<Scalars['JSONObject']>;\n  issuedDate?: Maybe<Scalars['Float']>;\n  expiresDate?: Maybe<Scalars['Date']>;\n  expired?: Maybe<Scalars['Boolean']>;\n  certifierID?: Maybe<Scalars['String']>;\n};\n\n\nexport type GetByAttributeInput = {\n  id: Scalars['String'];\n  content?: Maybe<Scalars['JSONObject']>;\n};\n\nexport type Transaction = {\n  __typename?: 'Transaction';\n  id: Scalars['ID'];\n  transactionType: Scalars['String'];\n  resourceType: Scalars['String'];\n  input: EntityResult;\n  output: EntityResult;\n  quantity?: Maybe<Scalars['Float']>;\n  currency?: Maybe<Scalars['String']>;\n  location?: Maybe<Scalars['String']>;\n  tags?: Maybe<Array<Scalars['String']>>;\n  metaData?: Maybe<Scalars['JSONObject']>;\n  metaDataInternal?: Maybe<Scalars['JSONObject']>;\n  participant?: Maybe<Participant>;\n  createdDate: Scalars['Float'];\n  createdByPersonId?: Maybe<Scalars['String']>;\n  assetId?: Maybe<Scalars['String']>;\n  goods?: Maybe<Array<Goods>>;\n};\n\nexport type Asset = {\n  __typename?: 'Asset';\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  description?: Maybe<Scalars['String']>;\n  assetType: Scalars['String'];\n  ambassadors?: Maybe<Array<Scalars['String']>>;\n  owner: EntityResult;\n  location?: Maybe<Scalars['String']>;\n  tags?: Maybe<Array<Scalars['String']>>;\n  metaData?: Maybe<Scalars['JSONObject']>;\n  metaDataInternal?: Maybe<Scalars['JSONObject']>;\n  participant: Participant;\n  createdDate: Scalars['Float'];\n  createdByPersonId?: Maybe<Scalars['String']>;\n};\n\nexport type GraphData = {\n  __typename?: 'GraphData';\n  nodes?: Maybe<Array<GraphNode>>;\n  links?: Maybe<Array<GraphLink>>;\n};\n\nexport type GraphNode = {\n  __typename?: 'GraphNode';\n  id: Scalars['ID'];\n  label: Scalars['String'];\n  desc?: Maybe<Scalars['String']>;\n  nodeVal?: Maybe<Scalars['Float']>;\n  color?: Maybe<Scalars['String']>;\n  autoColorBy?: Maybe<Scalars['String']>;\n  group?: Maybe<Scalars['Float']>;\n};\n\nexport type GraphLink = {\n  __typename?: 'GraphLink';\n  source: Scalars['ID'];\n  target: Scalars['ID'];\n  label?: Maybe<Scalars['String']>;\n  desc?: Maybe<Scalars['String']>;\n  color?: Maybe<Scalars['String']>;\n  autoColorBy?: Maybe<Scalars['String']>;\n  linkWidth?: Maybe<Scalars['Float']>;\n  group?: Maybe<Scalars['Float']>;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  personLogin: PersonLoginResponse;\n  personLogout: Scalars['Boolean'];\n  revokeUserRefreshTokens: Scalars['Boolean'];\n  causeNew: Cause;\n  causeUpdate: Cause;\n  participantNew: Participant;\n  participantUpdate: Participant;\n  participantChangeIdentity: Participant;\n  personRegister: Person;\n  personAddAttribute: Person;\n  personUpdate: Person;\n  personUpdatePassword: Person;\n  personUpdateProfile: Person;\n  personUpsertCitizenCard: Person;\n  transactionNew: Transaction;\n  transactionUpdate: Transaction;\n  assetNew: Asset;\n  assetUpdate: Asset;\n};\n\n\nexport type MutationPersonLoginArgs = {\n  loginPersonData: LoginPersonInput;\n};\n\n\nexport type MutationRevokeUserRefreshTokensArgs = {\n  username: Scalars['String'];\n};\n\n\nexport type MutationCauseNewArgs = {\n  newCauseData: NewCauseInput;\n};\n\n\nexport type MutationCauseUpdateArgs = {\n  updateCauseData: UpdateCauseInput;\n};\n\n\nexport type MutationParticipantNewArgs = {\n  newParticipantData: NewParticipantInput;\n};\n\n\nexport type MutationParticipantUpdateArgs = {\n  updateParticipantData: UpdateParticipantInput;\n};\n\n\nexport type MutationParticipantChangeIdentityArgs = {\n  changeParticipantIdentityData: ChangeParticipantIdentityData;\n};\n\n\nexport type MutationPersonRegisterArgs = {\n  newPersonData: NewPersonInput;\n};\n\n\nexport type MutationPersonAddAttributeArgs = {\n  addPersonAttributeData: AddPersonAttributeInput;\n  personId: Scalars['String'];\n};\n\n\nexport type MutationPersonUpdateArgs = {\n  updatePersonData: UpdatePersonInput;\n};\n\n\nexport type MutationPersonUpdatePasswordArgs = {\n  updatePersonPasswordData: UpdatePersonPasswordInput;\n};\n\n\nexport type MutationPersonUpdateProfileArgs = {\n  updatePersonProfileData: UpdatePersonProfileInput;\n};\n\n\nexport type MutationPersonUpsertCitizenCardArgs = {\n  upsertCitizenCardData: UpsertCitizenCardInput;\n};\n\n\nexport type MutationTransactionNewArgs = {\n  newTransactionData: NewTransactionInput;\n};\n\n\nexport type MutationTransactionUpdateArgs = {\n  updateTransactionData: UpdateTransactionInput;\n};\n\n\nexport type MutationAssetNewArgs = {\n  newAssetData: NewAssetInput;\n};\n\n\nexport type MutationAssetUpdateArgs = {\n  updateAssetData: UpdateAssetInput;\n};\n\nexport type LoginPersonInput = {\n  username: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type PersonLoginResponse = {\n  __typename?: 'PersonLoginResponse';\n  user: Person;\n  accessToken: Scalars['String'];\n};\n\nexport type NewCauseInput = {\n  id?: Maybe<Scalars['String']>;\n  name: Scalars['String'];\n  email?: Maybe<Scalars['String']>;\n  ambassadors?: Maybe<Array<Scalars['String']>>;\n  startDate?: Maybe<Scalars['Date']>;\n  endDate?: Maybe<Scalars['Date']>;\n  location?: Maybe<Scalars['String']>;\n  tags?: Maybe<Array<Scalars['String']>>;\n  metaData?: Maybe<Scalars['JSONObject']>;\n  metaDataInternal?: Maybe<Scalars['JSONObject']>;\n  loggedPersonId?: Maybe<Scalars['String']>;\n  input: Scalars['JSONObject'];\n};\n\nexport type UpdateCauseInput = {\n  id: Scalars['String'];\n  email?: Maybe<Scalars['String']>;\n  ambassadors?: Maybe<Array<Scalars['String']>>;\n  tags?: Maybe<Array<Scalars['String']>>;\n  metaData?: Maybe<Scalars['JSONObject']>;\n  metaDataInternal?: Maybe<Scalars['JSONObject']>;\n};\n\nexport type NewParticipantInput = {\n  id?: Maybe<Scalars['String']>;\n  code: Scalars['String'];\n  name: Scalars['String'];\n  email: Scalars['String'];\n  fiscalNumber: Scalars['String'];\n  ambassadors?: Maybe<Array<Scalars['String']>>;\n  metaData?: Maybe<Scalars['JSONObject']>;\n  metaDataInternal?: Maybe<Scalars['JSONObject']>;\n  loggedPersonId?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateParticipantInput = {\n  id: Scalars['String'];\n  email?: Maybe<Scalars['String']>;\n  ambassadors?: Maybe<Array<Scalars['String']>>;\n  metaData?: Maybe<Scalars['JSONObject']>;\n  metaDataInternal?: Maybe<Scalars['JSONObject']>;\n};\n\nexport type ChangeParticipantIdentityData = {\n  id: Scalars['String'];\n  newIdentity: Scalars['String'];\n};\n\nexport type NewPersonInput = {\n  id?: Maybe<Scalars['String']>;\n  username?: Maybe<Scalars['String']>;\n  password?: Maybe<Scalars['String']>;\n  email?: Maybe<Scalars['String']>;\n  mobilePhone: Scalars['String'];\n  postal?: Maybe<Scalars['String']>;\n  city?: Maybe<Scalars['String']>;\n  region?: Maybe<Scalars['String']>;\n  geoLocation?: Maybe<Scalars['String']>;\n  timezone?: Maybe<Scalars['String']>;\n  personalInfo?: Maybe<Scalars['String']>;\n  metaData?: Maybe<Scalars['JSONObject']>;\n  metaDataInternal?: Maybe<Scalars['JSONObject']>;\n  profile?: Maybe<Scalars['JSONObject']>;\n  firstName?: Maybe<Scalars['String']>;\n  lastName?: Maybe<Scalars['String']>;\n  gender?: Maybe<Scalars['String']>;\n  height?: Maybe<Scalars['Float']>;\n  fatherFirstName?: Maybe<Scalars['String']>;\n  fatherLastName?: Maybe<Scalars['String']>;\n  motherFirstName?: Maybe<Scalars['String']>;\n  motherLastName?: Maybe<Scalars['String']>;\n  birthDate?: Maybe<Scalars['Date']>;\n  nationality?: Maybe<Scalars['String']>;\n  country?: Maybe<Scalars['String']>;\n  documentNumber?: Maybe<Scalars['String']>;\n  documentType?: Maybe<Scalars['String']>;\n  cardVersion?: Maybe<Scalars['String']>;\n  emissionDate?: Maybe<Scalars['Date']>;\n  expirationDate?: Maybe<Scalars['Date']>;\n  emittingEntity?: Maybe<Scalars['String']>;\n  identityNumber?: Maybe<Scalars['String']>;\n  fiscalNumber: Scalars['String'];\n  socialSecurityNumber?: Maybe<Scalars['String']>;\n  beneficiaryNumber?: Maybe<Scalars['String']>;\n  pan?: Maybe<Scalars['String']>;\n  requestLocation?: Maybe<Scalars['String']>;\n  otherInformation?: Maybe<Scalars['String']>;\n};\n\nexport type AddPersonAttributeInput = {\n  id: Scalars['ID'];\n  content?: Maybe<Scalars['JSONObject']>;\n  issuedDate?: Maybe<Scalars['Float']>;\n  expiresDate?: Maybe<Scalars['Date']>;\n  expired?: Maybe<Scalars['Boolean']>;\n  certifierID?: Maybe<Scalars['String']>;\n};\n\nexport type UpdatePersonInput = {\n  id: Scalars['String'];\n  roles?: Maybe<Array<Scalars['String']>>;\n  metaDataInternal?: Maybe<Scalars['JSONObject']>;\n};\n\nexport type UpdatePersonPasswordInput = {\n  id: Scalars['String'];\n  password?: Maybe<Scalars['String']>;\n};\n\nexport type UpdatePersonProfileInput = {\n  id: Scalars['String'];\n  email?: Maybe<Scalars['String']>;\n  mobilePhone: Scalars['String'];\n  postal?: Maybe<Scalars['String']>;\n  city?: Maybe<Scalars['String']>;\n  region?: Maybe<Scalars['String']>;\n  geoLocation?: Maybe<Scalars['String']>;\n  timezone?: Maybe<Scalars['String']>;\n  personalInfo?: Maybe<Scalars['String']>;\n  metaData?: Maybe<Scalars['JSONObject']>;\n};\n\nexport type UpsertCitizenCardInput = {\n  id?: Maybe<Scalars['String']>;\n  firstName: Scalars['String'];\n  lastName: Scalars['String'];\n  gender: Scalars['String'];\n  height: Scalars['Float'];\n  fatherFirstName: Scalars['String'];\n  fatherLastName: Scalars['String'];\n  motherFirstName: Scalars['String'];\n  motherLastName: Scalars['String'];\n  birthDate: Scalars['Date'];\n  nationality: Scalars['String'];\n  country: Scalars['String'];\n  documentNumber: Scalars['String'];\n  documentType: Scalars['String'];\n  cardVersion: Scalars['String'];\n  emissionDate: Scalars['Date'];\n  expirationDate: Scalars['Date'];\n  emittingEntity: Scalars['String'];\n  identityNumber: Scalars['String'];\n  fiscalNumber: Scalars['String'];\n  socialSecurityNumber: Scalars['String'];\n  beneficiaryNumber: Scalars['String'];\n  pan: Scalars['String'];\n  requestLocation?: Maybe<Scalars['String']>;\n  otherInformation?: Maybe<Scalars['String']>;\n};\n\nexport type NewTransactionInput = {\n  id?: Maybe<Scalars['String']>;\n  transactionType: Scalars['String'];\n  resourceType: Scalars['String'];\n  input: Scalars['JSONObject'];\n  output: Scalars['JSONObject'];\n  quantity?: Maybe<Scalars['Float']>;\n  currency?: Maybe<Scalars['String']>;\n  location?: Maybe<Scalars['String']>;\n  tags?: Maybe<Array<Scalars['String']>>;\n  metaData?: Maybe<Scalars['JSONObject']>;\n  metaDataInternal?: Maybe<Scalars['JSONObject']>;\n  loggedPersonId?: Maybe<Scalars['String']>;\n  assetId?: Maybe<Scalars['String']>;\n  goods?: Maybe<Array<GoodsInput>>;\n};\n\nexport type GoodsInput = {\n  id?: Maybe<Scalars['ID']>;\n  code: Scalars['String'];\n  barCode?: Maybe<Scalars['String']>;\n  name: Scalars['String'];\n  description?: Maybe<Scalars['String']>;\n  quantity: Scalars['Float'];\n  tags?: Maybe<Array<Scalars['String']>>;\n  metaData?: Maybe<Scalars['JSONObject']>;\n  metaDataInternal?: Maybe<Scalars['JSONObject']>;\n};\n\nexport type UpdateTransactionInput = {\n  id: Scalars['String'];\n  metaDataInternal?: Maybe<Scalars['JSONObject']>;\n};\n\nexport type NewAssetInput = {\n  id?: Maybe<Scalars['String']>;\n  name: Scalars['String'];\n  assetType: Scalars['String'];\n  ambassadors?: Maybe<Array<Scalars['String']>>;\n  owner: Scalars['JSONObject'];\n  location?: Maybe<Scalars['String']>;\n  tags?: Maybe<Array<Scalars['String']>>;\n  metaData?: Maybe<Scalars['JSONObject']>;\n  metaDataInternal?: Maybe<Scalars['JSONObject']>;\n  loggedPersonId?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateAssetInput = {\n  id: Scalars['String'];\n  ambassadors?: Maybe<Array<Scalars['String']>>;\n  tags?: Maybe<Array<Scalars['String']>>;\n  metaData?: Maybe<Scalars['JSONObject']>;\n  metaDataInternal?: Maybe<Scalars['JSONObject']>;\n};\n\nexport type Subscription = {\n  __typename?: 'Subscription';\n  personLogged: Scalars['String'];\n  causeAdded: Cause;\n  causeUpdated: Cause;\n  participantAdded: Participant;\n  participantUpdated: Participant;\n  participantIdentityChanged: Participant;\n  personAdded: Person;\n  personAttributeAdded: Person;\n  personUpdated: Person;\n  personPasswordUpdated: Person;\n  personProfileUpdated: Person;\n  personCitizenCardUpserted: Person;\n  transactionAdded: Transaction;\n  transactionUpdated: Transaction;\n  assetAdded: Asset;\n  assetUpdated: Asset;\n};\n\nexport type AccessToken = {\n  __typename?: 'AccessToken';\n  accessToken: Scalars['String'];\n};\n\nexport type X509Identities = {\n  __typename?: 'x509Identities';\n  id?: Maybe<Scalars['ID']>;\n  status: Scalars['Boolean'];\n  fingerprint: Scalars['String'];\n};\n\nexport type AssetNewMutationVariables = Exact<{\n  newAssetData: NewAssetInput;\n}>;\n\n\nexport type AssetNewMutation = (\n  { __typename?: 'Mutation' }\n  & { assetNew: (\n    { __typename?: 'Asset' }\n    & Pick<Asset, 'id' | 'name' | 'assetType' | 'ambassadors' | 'location' | 'tags' | 'metaData' | 'metaDataInternal' | 'createdDate' | 'createdByPersonId'>\n    & { owner: (\n      { __typename?: 'EntityResult' }\n      & { entity: (\n        { __typename?: 'Entity' }\n        & Pick<Entity, 'id' | 'type'>\n      ) }\n    ), participant: (\n      { __typename?: 'Participant' }\n      & Pick<Participant, 'id' | 'name'>\n    ) }\n  ) }\n);\n\nexport type AssetUpdateMutationVariables = Exact<{\n  updateAssetData: UpdateAssetInput;\n}>;\n\n\nexport type AssetUpdateMutation = (\n  { __typename?: 'Mutation' }\n  & { assetUpdate: (\n    { __typename?: 'Asset' }\n    & Pick<Asset, 'id' | 'name' | 'ambassadors' | 'tags' | 'metaData' | 'metaDataInternal'>\n  ) }\n);\n\nexport type CauseNewMutationVariables = Exact<{\n  newCauseData: NewCauseInput;\n}>;\n\n\nexport type CauseNewMutation = (\n  { __typename?: 'Mutation' }\n  & { causeNew: (\n    { __typename?: 'Cause' }\n    & Pick<Cause, 'id' | 'name' | 'email' | 'ambassadors' | 'startDate' | 'endDate' | 'location' | 'tags' | 'createdDate' | 'createdByPersonId' | 'metaData' | 'metaDataInternal'>\n    & { input: (\n      { __typename?: 'EntityResult' }\n      & { entity: (\n        { __typename?: 'Entity' }\n        & Pick<Entity, 'id' | 'type'>\n      ) }\n    ), participant: (\n      { __typename?: 'Participant' }\n      & Pick<Participant, 'id' | 'code' | 'name'>\n    ) }\n  ) }\n);\n\nexport type CauseUpdateMutationVariables = Exact<{\n  updateCauseData: UpdateCauseInput;\n}>;\n\n\nexport type CauseUpdateMutation = (\n  { __typename?: 'Mutation' }\n  & { causeUpdate: (\n    { __typename?: 'Cause' }\n    & Pick<Cause, 'id' | 'name' | 'email' | 'ambassadors' | 'tags' | 'metaData' | 'metaDataInternal'>\n  ) }\n);\n\nexport type ParticipantNewMutationVariables = Exact<{\n  newParticipantData: NewParticipantInput;\n}>;\n\n\nexport type ParticipantNewMutation = (\n  { __typename?: 'Mutation' }\n  & { participantNew: (\n    { __typename?: 'Participant' }\n    & Pick<Participant, 'id' | 'code' | 'name' | 'email' | 'fiscalNumber' | 'msp'>\n  ) }\n);\n\nexport type ParticipantUpdateMutationVariables = Exact<{\n  updateParticipantData: UpdateParticipantInput;\n}>;\n\n\nexport type ParticipantUpdateMutation = (\n  { __typename?: 'Mutation' }\n  & { participantUpdate: (\n    { __typename?: 'Participant' }\n    & Pick<Participant, 'id' | 'name' | 'ambassadors' | 'metaData' | 'metaDataInternal'>\n  ) }\n);\n\nexport type PersonAddAttributeMutationVariables = Exact<{\n  personId: Scalars['String'];\n  addPersonAttributeData: AddPersonAttributeInput;\n}>;\n\n\nexport type PersonAddAttributeMutation = (\n  { __typename?: 'Mutation' }\n  & { personAddAttribute: (\n    { __typename?: 'Person' }\n    & Pick<Person, 'id' | 'username' | 'email' | 'roles' | 'mobilePhone' | 'postal' | 'city' | 'region' | 'geoLocation' | 'timezone' | 'personalInfo' | 'profile' | 'firstName' | 'lastName' | 'gender' | 'height' | 'fatherFirstName' | 'fatherLastName' | 'motherFirstName' | 'motherLastName' | 'birthDate' | 'nationality' | 'country' | 'documentNumber' | 'documentType' | 'cardVersion' | 'emissionDate' | 'expirationDate' | 'emittingEntity' | 'identityNumber' | 'fiscalNumber' | 'socialSecurityNumber' | 'beneficiaryNumber' | 'pan' | 'requestLocation' | 'otherInformation' | 'registrationDate'>\n    & { attributes?: Maybe<Array<(\n      { __typename?: 'Attribute' }\n      & Pick<Attribute, 'id' | 'content' | 'issuedDate' | 'expiresDate' | 'expired' | 'certifierID'>\n    )>>, participant: (\n      { __typename?: 'Participant' }\n      & Pick<Participant, 'id' | 'name' | 'msp'>\n    ) }\n  ) }\n);\n\nexport type PersonLoginMutationVariables = Exact<{\n  loginPersonData: LoginPersonInput;\n}>;\n\n\nexport type PersonLoginMutation = (\n  { __typename?: 'Mutation' }\n  & { personLogin: (\n    { __typename?: 'PersonLoginResponse' }\n    & Pick<PersonLoginResponse, 'accessToken'>\n    & { user: (\n      { __typename?: 'Person' }\n      & Pick<Person, 'id' | 'username' | 'email' | 'roles' | 'mobilePhone' | 'postal' | 'city' | 'region' | 'geoLocation' | 'timezone' | 'personalInfo' | 'profile' | 'firstName' | 'lastName' | 'gender' | 'height' | 'fatherFirstName' | 'fatherLastName' | 'motherFirstName' | 'motherLastName' | 'birthDate' | 'nationality' | 'country' | 'documentNumber' | 'documentType' | 'cardVersion' | 'emissionDate' | 'expirationDate' | 'emittingEntity' | 'identityNumber' | 'fiscalNumber' | 'socialSecurityNumber' | 'beneficiaryNumber' | 'pan' | 'requestLocation' | 'otherInformation' | 'registrationDate'>\n      & { attributes?: Maybe<Array<(\n        { __typename?: 'Attribute' }\n        & Pick<Attribute, 'id' | 'content' | 'issuedDate' | 'expiresDate' | 'expired' | 'certifierID'>\n      )>>, participant: (\n        { __typename?: 'Participant' }\n        & Pick<Participant, 'id' | 'name' | 'msp'>\n      ) }\n    ) }\n  ) }\n);\n\nexport type PersonLogoutMutationVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type PersonLogoutMutation = (\n  { __typename?: 'Mutation' }\n  & Pick<Mutation, 'personLogout'>\n);\n\nexport type PersonRegisterMutationVariables = Exact<{\n  newPersonData: NewPersonInput;\n}>;\n\n\nexport type PersonRegisterMutation = (\n  { __typename?: 'Mutation' }\n  & { personRegister: (\n    { __typename?: 'Person' }\n    & Pick<Person, 'id' | 'firstName' | 'lastName' | 'username' | 'email' | 'roles'>\n    & { attributes?: Maybe<Array<(\n      { __typename?: 'Attribute' }\n      & Pick<Attribute, 'id' | 'content' | 'issuedDate' | 'expiresDate' | 'expired' | 'certifierID'>\n    )>>, participant: (\n      { __typename?: 'Participant' }\n      & Pick<Participant, 'id' | 'name' | 'msp'>\n    ) }\n  ) }\n);\n\nexport type PersonUpdateMutationVariables = Exact<{\n  updatePersonData: UpdatePersonInput;\n}>;\n\n\nexport type PersonUpdateMutation = (\n  { __typename?: 'Mutation' }\n  & { personUpdate: (\n    { __typename?: 'Person' }\n    & Pick<Person, 'id' | 'roles' | 'metaDataInternal'>\n  ) }\n);\n\nexport type PersonUpdatePasswordMutationVariables = Exact<{\n  updatePersonPasswordData: UpdatePersonPasswordInput;\n}>;\n\n\nexport type PersonUpdatePasswordMutation = (\n  { __typename?: 'Mutation' }\n  & { personUpdatePassword: (\n    { __typename?: 'Person' }\n    & Pick<Person, 'id' | 'roles' | 'metaDataInternal'>\n  ) }\n);\n\nexport type PersonUpdateProfileMutationVariables = Exact<{\n  updatePersonProfileData: UpdatePersonProfileInput;\n}>;\n\n\nexport type PersonUpdateProfileMutation = (\n  { __typename?: 'Mutation' }\n  & { personUpdateProfile: (\n    { __typename?: 'Person' }\n    & Pick<Person, 'id' | 'email' | 'mobilePhone' | 'postal' | 'city' | 'region' | 'geoLocation' | 'timezone' | 'personalInfo' | 'metaData'>\n  ) }\n);\n\nexport type PersonUpsertCitizenCardMutationVariables = Exact<{\n  upsertCitizenCardData: UpsertCitizenCardInput;\n}>;\n\n\nexport type PersonUpsertCitizenCardMutation = (\n  { __typename?: 'Mutation' }\n  & { personUpsertCitizenCard: (\n    { __typename?: 'Person' }\n    & Pick<Person, 'id' | 'documentNumber' | 'identityNumber' | 'fiscalNumber' | 'socialSecurityNumber' | 'beneficiaryNumber' | 'pan' | 'firstName' | 'lastName' | 'gender' | 'height' | 'fatherFirstName' | 'fatherLastName' | 'motherFirstName' | 'motherLastName' | 'birthDate' | 'nationality' | 'country' | 'documentType' | 'cardVersion' | 'emissionDate' | 'expirationDate' | 'emittingEntity' | 'requestLocation' | 'otherInformation'>\n  ) }\n);\n\nexport type TransactionNewMutationVariables = Exact<{\n  newTransactionData: NewTransactionInput;\n}>;\n\n\nexport type TransactionNewMutation = (\n  { __typename?: 'Mutation' }\n  & { transactionNew: (\n    { __typename?: 'Transaction' }\n    & Pick<Transaction, 'id' | 'transactionType' | 'resourceType' | 'assetId' | 'quantity' | 'currency' | 'location' | 'tags' | 'createdDate' | 'createdByPersonId' | 'metaData' | 'metaDataInternal'>\n    & { input: (\n      { __typename?: 'EntityResult' }\n      & { entity: (\n        { __typename?: 'Entity' }\n        & Pick<Entity, 'id' | 'type'>\n      ) }\n    ), output: (\n      { __typename?: 'EntityResult' }\n      & { entity: (\n        { __typename?: 'Entity' }\n        & Pick<Entity, 'id' | 'type'>\n      ) }\n    ), participant?: Maybe<(\n      { __typename?: 'Participant' }\n      & Pick<Participant, 'id' | 'name' | 'msp'>\n    )> }\n  ) }\n);\n\nexport type TransactionUpdateMutationVariables = Exact<{\n  updateTransactionData: UpdateTransactionInput;\n}>;\n\n\nexport type TransactionUpdateMutation = (\n  { __typename?: 'Mutation' }\n  & { transactionUpdate: (\n    { __typename?: 'Transaction' }\n    & Pick<Transaction, 'id' | 'metaDataInternal'>\n  ) }\n);\n\nexport type AssetByIdQueryVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type AssetByIdQuery = (\n  { __typename?: 'Query' }\n  & { assetById: (\n    { __typename?: 'Asset' }\n    & Pick<Asset, 'id' | 'name' | 'description' | 'assetType' | 'ambassadors' | 'location' | 'tags' | 'createdDate' | 'createdByPersonId' | 'metaData' | 'metaDataInternal'>\n    & { owner: (\n      { __typename?: 'EntityResult' }\n      & { entity: (\n        { __typename?: 'Entity' }\n        & Pick<Entity, 'id' | 'type'>\n      ) }\n    ), participant: (\n      { __typename?: 'Participant' }\n      & Pick<Participant, 'id' | 'name'>\n    ) }\n  ) }\n);\n\nexport type AssetComplexQueryQueryVariables = Exact<{\n  getByComplexQueryInput: GetByComplexQueryInput;\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type AssetComplexQueryQuery = (\n  { __typename?: 'Query' }\n  & { assetComplexQuery: Array<(\n    { __typename?: 'Asset' }\n    & Pick<Asset, 'id' | 'name' | 'assetType' | 'ambassadors' | 'location' | 'tags' | 'createdDate' | 'createdByPersonId' | 'metaData' | 'metaDataInternal'>\n    & { owner: (\n      { __typename?: 'EntityResult' }\n      & { entity: (\n        { __typename?: 'Entity' }\n        & Pick<Entity, 'id' | 'type'>\n      ) }\n    ), participant: (\n      { __typename?: 'Participant' }\n      & Pick<Participant, 'id' | 'name'>\n    ) }\n  )> }\n);\n\nexport type AssetsQueryVariables = Exact<{\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type AssetsQuery = (\n  { __typename?: 'Query' }\n  & { assets: Array<(\n    { __typename?: 'Asset' }\n    & Pick<Asset, 'id' | 'name' | 'assetType' | 'ambassadors' | 'location' | 'tags' | 'createdDate' | 'createdByPersonId' | 'metaData' | 'metaDataInternal'>\n    & { owner: (\n      { __typename?: 'EntityResult' }\n      & { entity: (\n        { __typename?: 'Entity' }\n        & Pick<Entity, 'id' | 'type'>\n      ) }\n    ), participant: (\n      { __typename?: 'Participant' }\n      & Pick<Participant, 'id' | 'name'>\n    ) }\n  )> }\n);\n\nexport type CauseByIdQueryVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type CauseByIdQuery = (\n  { __typename?: 'Query' }\n  & { causeById: (\n    { __typename?: 'Cause' }\n    & Pick<Cause, 'id' | 'name' | 'email' | 'ambassadors' | 'startDate' | 'endDate' | 'location' | 'tags' | 'metaData' | 'createdDate' | 'createdByPersonId' | 'metaDataInternal'>\n    & { input: (\n      { __typename?: 'EntityResult' }\n      & { entity: (\n        { __typename?: 'Entity' }\n        & Pick<Entity, 'id' | 'type' | 'createdDate'>\n      ) }\n    ), participant: (\n      { __typename?: 'Participant' }\n      & Pick<Participant, 'id' | 'name' | 'msp'>\n    ), fundsBalance: (\n      { __typename?: 'GenericBalance' }\n      & Pick<GenericBalance, 'debit' | 'credit' | 'balance'>\n    ), volunteeringHoursBalance: (\n      { __typename?: 'GenericBalance' }\n      & Pick<GenericBalance, 'debit' | 'credit' | 'balance'>\n    ), goodsStock?: Maybe<Array<(\n      { __typename?: 'Goods' }\n      & Pick<Goods, 'id' | 'code' | 'barCode' | 'name' | 'description' | 'tags' | 'metaData' | 'metaDataInternal' | 'createdDate' | 'createdByPersonId'>\n      & { balance: (\n        { __typename?: 'GenericBalance' }\n        & Pick<GenericBalance, 'debit' | 'credit' | 'balance'>\n      ) }\n    )>> }\n  ) }\n);\n\nexport type CauseComplexQueryQueryVariables = Exact<{\n  getByComplexQueryInput: GetByComplexQueryInput;\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type CauseComplexQueryQuery = (\n  { __typename?: 'Query' }\n  & { causeComplexQuery: Array<(\n    { __typename?: 'Cause' }\n    & Pick<Cause, 'id' | 'name' | 'ambassadors' | 'startDate' | 'endDate' | 'location' | 'tags' | 'metaData' | 'createdDate' | 'createdByPersonId' | 'metaDataInternal'>\n    & { input: (\n      { __typename?: 'EntityResult' }\n      & { entity: (\n        { __typename?: 'Entity' }\n        & Pick<Entity, 'id' | 'type' | 'createdDate'>\n      ) }\n    ), participant: (\n      { __typename?: 'Participant' }\n      & Pick<Participant, 'id' | 'name' | 'msp'>\n    ) }\n  )> }\n);\n\nexport type CauseOngoingQueryVariables = Exact<{\n  date: Scalars['Float'];\n}>;\n\n\nexport type CauseOngoingQuery = (\n  { __typename?: 'Query' }\n  & { causeOngoing: Array<(\n    { __typename?: 'Cause' }\n    & Pick<Cause, 'id' | 'name' | 'ambassadors' | 'startDate' | 'endDate' | 'location' | 'tags' | 'metaData' | 'createdDate' | 'createdByPersonId' | 'metaDataInternal'>\n    & { input: (\n      { __typename?: 'EntityResult' }\n      & { entity: (\n        { __typename?: 'Entity' }\n        & Pick<Entity, 'id' | 'type' | 'createdDate'>\n      ) }\n    ), participant: (\n      { __typename?: 'Participant' }\n      & Pick<Participant, 'id' | 'name' | 'msp'>\n    ) }\n  )> }\n);\n\nexport type CausesQueryVariables = Exact<{\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type CausesQuery = (\n  { __typename?: 'Query' }\n  & { causes: Array<(\n    { __typename?: 'Cause' }\n    & Pick<Cause, 'id' | 'name' | 'email' | 'ambassadors' | 'startDate' | 'endDate' | 'location' | 'tags' | 'metaData' | 'createdDate' | 'createdByPersonId' | 'metaDataInternal'>\n    & { input: (\n      { __typename?: 'EntityResult' }\n      & { entity: (\n        { __typename?: 'Entity' }\n        & Pick<Entity, 'id' | 'type' | 'createdDate'>\n      ) }\n    ), participant: (\n      { __typename?: 'Participant' }\n      & Pick<Participant, 'id' | 'name' | 'msp'>\n    ), fundsBalance: (\n      { __typename?: 'GenericBalance' }\n      & Pick<GenericBalance, 'debit' | 'credit' | 'balance'>\n    ), volunteeringHoursBalance: (\n      { __typename?: 'GenericBalance' }\n      & Pick<GenericBalance, 'debit' | 'credit' | 'balance'>\n    ), goodsStock?: Maybe<Array<(\n      { __typename?: 'Goods' }\n      & Pick<Goods, 'id' | 'code' | 'barCode' | 'name' | 'description' | 'tags'>\n      & { balance: (\n        { __typename?: 'GenericBalance' }\n        & Pick<GenericBalance, 'debit' | 'credit' | 'balance'>\n      ) }\n    )>> }\n  )> }\n);\n\nexport type ParticipantByCodeQueryVariables = Exact<{\n  code: Scalars['String'];\n}>;\n\n\nexport type ParticipantByCodeQuery = (\n  { __typename?: 'Query' }\n  & { participantByCode: (\n    { __typename?: 'Participant' }\n    & Pick<Participant, 'id' | 'code' | 'name' | 'ambassadors' | 'msp' | 'createdDate' | 'createdByPersonId' | 'metaData' | 'metaDataInternal'>\n    & { participant?: Maybe<(\n      { __typename?: 'Participant' }\n      & Pick<Participant, 'id' | 'name' | 'msp'>\n    )> }\n  ) }\n);\n\nexport type ParticipantByIdQueryVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type ParticipantByIdQuery = (\n  { __typename?: 'Query' }\n  & { participantById: (\n    { __typename?: 'Participant' }\n    & Pick<Participant, 'id' | 'name' | 'msp' | 'createdDate'>\n    & { participant?: Maybe<(\n      { __typename?: 'Participant' }\n      & Pick<Participant, 'id' | 'name' | 'msp'>\n    )> }\n  ) }\n);\n\nexport type ParticipantsQueryVariables = Exact<{\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type ParticipantsQuery = (\n  { __typename?: 'Query' }\n  & { participants: Array<(\n    { __typename?: 'Participant' }\n    & Pick<Participant, 'id' | 'name' | 'email' | 'fiscalNumber' | 'ambassadors' | 'msp' | 'createdDate'>\n    & { participant?: Maybe<(\n      { __typename?: 'Participant' }\n      & Pick<Participant, 'id' | 'name' | 'msp'>\n    )> }\n  )> }\n);\n\nexport type ParticipantComplexQueryQueryVariables = Exact<{\n  getByComplexQueryInput: GetByComplexQueryInput;\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type ParticipantComplexQueryQuery = (\n  { __typename?: 'Query' }\n  & { participantComplexQuery: Array<(\n    { __typename?: 'Participant' }\n    & Pick<Participant, 'id' | 'name' | 'ambassadors' | 'msp' | 'createdDate' | 'createdByPersonId' | 'metaData' | 'metaDataInternal'>\n    & { participant?: Maybe<(\n      { __typename?: 'Participant' }\n      & Pick<Participant, 'id' | 'name' | 'msp'>\n    )> }\n  )> }\n);\n\nexport type PersonByAttributeQueryVariables = Exact<{\n  getByAttributeInput: GetByAttributeInput;\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type PersonByAttributeQuery = (\n  { __typename?: 'Query' }\n  & { personByAttribute: Array<(\n    { __typename?: 'Person' }\n    & Pick<Person, 'id' | 'username' | 'email' | 'roles' | 'mobilePhone' | 'postal' | 'city' | 'region' | 'geoLocation' | 'timezone' | 'personalInfo' | 'profile' | 'firstName' | 'lastName' | 'gender' | 'height' | 'fatherFirstName' | 'fatherLastName' | 'motherFirstName' | 'motherLastName' | 'birthDate' | 'nationality' | 'country' | 'documentNumber' | 'documentType' | 'cardVersion' | 'emissionDate' | 'expirationDate' | 'emittingEntity' | 'identityNumber' | 'fiscalNumber' | 'socialSecurityNumber' | 'beneficiaryNumber' | 'pan' | 'requestLocation' | 'otherInformation' | 'registrationDate' | 'createdDate'>\n    & { attributes?: Maybe<Array<(\n      { __typename?: 'Attribute' }\n      & Pick<Attribute, 'id' | 'content' | 'issuedDate' | 'expiresDate' | 'expired' | 'certifierID'>\n    )>>, participant: (\n      { __typename?: 'Participant' }\n      & Pick<Participant, 'id' | 'name' | 'msp'>\n    ) }\n  )> }\n);\n\nexport type PersonByFiscalNumberQueryVariables = Exact<{\n  fiscalNumber: Scalars['String'];\n}>;\n\n\nexport type PersonByFiscalNumberQuery = (\n  { __typename?: 'Query' }\n  & { personByFiscalNumber: (\n    { __typename?: 'Person' }\n    & Pick<Person, 'id' | 'firstName' | 'lastName' | 'username' | 'fiscalNumber' | 'email' | 'documentNumber' | 'roles'>\n    & { attributes?: Maybe<Array<(\n      { __typename?: 'Attribute' }\n      & Pick<Attribute, 'id' | 'content' | 'issuedDate' | 'expiresDate' | 'expired' | 'certifierID'>\n    )>> }\n  ) }\n);\n\nexport type PersonByIdQueryVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type PersonByIdQuery = (\n  { __typename?: 'Query' }\n  & { personById: (\n    { __typename?: 'Person' }\n    & Pick<Person, 'id' | 'username' | 'email' | 'roles' | 'mobilePhone' | 'postal' | 'city' | 'region' | 'geoLocation' | 'timezone' | 'personalInfo' | 'profile' | 'firstName' | 'lastName' | 'gender' | 'height' | 'fatherFirstName' | 'fatherLastName' | 'motherFirstName' | 'motherLastName' | 'birthDate' | 'nationality' | 'country' | 'documentNumber' | 'documentType' | 'cardVersion' | 'emissionDate' | 'expirationDate' | 'emittingEntity' | 'identityNumber' | 'fiscalNumber' | 'socialSecurityNumber' | 'beneficiaryNumber' | 'pan' | 'requestLocation' | 'otherInformation' | 'registrationDate' | 'createdDate'>\n    & { attributes?: Maybe<Array<(\n      { __typename?: 'Attribute' }\n      & Pick<Attribute, 'id' | 'content' | 'issuedDate' | 'expiresDate' | 'expired' | 'certifierID'>\n    )>>, participant: (\n      { __typename?: 'Participant' }\n      & Pick<Participant, 'id' | 'name' | 'msp'>\n    ) }\n  ) }\n);\n\nexport type PersonByUsernameQueryVariables = Exact<{\n  username: Scalars['String'];\n}>;\n\n\nexport type PersonByUsernameQuery = (\n  { __typename?: 'Query' }\n  & { personByUsername: (\n    { __typename?: 'Person' }\n    & Pick<Person, 'id' | 'firstName' | 'lastName' | 'username' | 'email' | 'roles' | 'createdDate'>\n    & { attributes?: Maybe<Array<(\n      { __typename?: 'Attribute' }\n      & Pick<Attribute, 'id' | 'content' | 'issuedDate' | 'expiresDate' | 'expired' | 'certifierID'>\n    )>>, participant: (\n      { __typename?: 'Participant' }\n      & Pick<Participant, 'id' | 'name' | 'msp'>\n    ) }\n  ) }\n);\n\nexport type PersonComplexQueryQueryVariables = Exact<{\n  getByComplexQueryInput: GetByComplexQueryInput;\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type PersonComplexQueryQuery = (\n  { __typename?: 'Query' }\n  & { personComplexQuery: Array<(\n    { __typename?: 'Person' }\n    & Pick<Person, 'id' | 'firstName' | 'lastName' | 'username' | 'fiscalNumber' | 'email' | 'roles' | 'createdDate' | 'metaData' | 'metaDataInternal'>\n    & { attributes?: Maybe<Array<(\n      { __typename?: 'Attribute' }\n      & Pick<Attribute, 'id' | 'content' | 'issuedDate' | 'expiresDate' | 'expired' | 'certifierID'>\n    )>> }\n  )> }\n);\n\nexport type PersonProfileQueryVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type PersonProfileQuery = (\n  { __typename?: 'Query' }\n  & { personProfile: (\n    { __typename?: 'Person' }\n    & Pick<Person, 'id' | 'username' | 'email' | 'roles' | 'mobilePhone' | 'postal' | 'city' | 'region' | 'geoLocation' | 'timezone' | 'personalInfo' | 'profile' | 'firstName' | 'lastName' | 'gender' | 'height' | 'fatherFirstName' | 'fatherLastName' | 'motherFirstName' | 'motherLastName' | 'birthDate' | 'nationality' | 'country' | 'documentNumber' | 'documentType' | 'cardVersion' | 'emissionDate' | 'expirationDate' | 'emittingEntity' | 'identityNumber' | 'fiscalNumber' | 'socialSecurityNumber' | 'beneficiaryNumber' | 'pan' | 'requestLocation' | 'otherInformation' | 'registrationDate' | 'createdDate'>\n    & { attributes?: Maybe<Array<(\n      { __typename?: 'Attribute' }\n      & Pick<Attribute, 'id' | 'content' | 'issuedDate' | 'expiresDate' | 'expired' | 'certifierID'>\n    )>>, participant: (\n      { __typename?: 'Participant' }\n      & Pick<Participant, 'id' | 'name' | 'msp'>\n    ) }\n  ) }\n);\n\nexport type PersonsQueryVariables = Exact<{\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type PersonsQuery = (\n  { __typename?: 'Query' }\n  & { persons: Array<(\n    { __typename?: 'Person' }\n    & Pick<Person, 'id' | 'username' | 'email' | 'roles' | 'mobilePhone' | 'postal' | 'city' | 'region' | 'geoLocation' | 'timezone' | 'personalInfo' | 'profile' | 'firstName' | 'lastName' | 'gender' | 'height' | 'fatherFirstName' | 'fatherLastName' | 'motherFirstName' | 'motherLastName' | 'birthDate' | 'nationality' | 'country' | 'documentNumber' | 'documentType' | 'cardVersion' | 'emissionDate' | 'expirationDate' | 'emittingEntity' | 'identityNumber' | 'fiscalNumber' | 'socialSecurityNumber' | 'beneficiaryNumber' | 'pan' | 'requestLocation' | 'otherInformation' | 'registrationDate' | 'createdDate'>\n    & { attributes?: Maybe<Array<(\n      { __typename?: 'Attribute' }\n      & Pick<Attribute, 'id' | 'content' | 'issuedDate' | 'expiresDate' | 'expired' | 'certifierID'>\n    )>>, participant: (\n      { __typename?: 'Participant' }\n      & Pick<Participant, 'id' | 'code' | 'name' | 'email' | 'fiscalNumber' | 'ambassadors' | 'msp' | 'createdDate'>\n      & { fundsBalance: (\n        { __typename?: 'GenericBalance' }\n        & Pick<GenericBalance, 'debit' | 'credit' | 'balance'>\n      ), volunteeringHoursBalance: (\n        { __typename?: 'GenericBalance' }\n        & Pick<GenericBalance, 'debit' | 'credit' | 'balance'>\n      ) }\n    ), fundsBalance: (\n      { __typename?: 'GenericBalance' }\n      & Pick<GenericBalance, 'debit' | 'credit' | 'balance'>\n    ), volunteeringHoursBalance: (\n      { __typename?: 'GenericBalance' }\n      & Pick<GenericBalance, 'debit' | 'credit' | 'balance'>\n    ), goodsStock?: Maybe<Array<(\n      { __typename?: 'Goods' }\n      & Pick<Goods, 'id' | 'code' | 'barCode' | 'name' | 'description' | 'tags' | 'metaData' | 'metaDataInternal' | 'createdDate' | 'createdByPersonId'>\n      & { balance: (\n        { __typename?: 'GenericBalance' }\n        & Pick<GenericBalance, 'debit' | 'credit' | 'balance'>\n      ) }\n    )>> }\n  )> }\n);\n\nexport type ReactForceDataQueryVariables = Exact<{\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type ReactForceDataQuery = (\n  { __typename?: 'Query' }\n  & { reactForceData: (\n    { __typename?: 'GraphData' }\n    & { nodes?: Maybe<Array<(\n      { __typename?: 'GraphNode' }\n      & Pick<GraphNode, 'id' | 'label' | 'desc' | 'nodeVal' | 'color' | 'autoColorBy' | 'group'>\n    )>>, links?: Maybe<Array<(\n      { __typename?: 'GraphLink' }\n      & Pick<GraphLink, 'source' | 'target' | 'label' | 'desc' | 'color' | 'autoColorBy' | 'group'>\n    )>> }\n  ) }\n);\n\nexport type TransactionsByIdQueryVariables = Exact<{\n  id: Scalars['String'];\n}>;\n\n\nexport type TransactionsByIdQuery = (\n  { __typename?: 'Query' }\n  & { transactionById: (\n    { __typename?: 'Transaction' }\n    & Pick<Transaction, 'id' | 'transactionType' | 'resourceType' | 'assetId' | 'quantity' | 'currency' | 'location' | 'tags' | 'createdDate' | 'createdByPersonId' | 'metaData' | 'metaDataInternal'>\n    & { input: (\n      { __typename?: 'EntityResult' }\n      & { entity: (\n        { __typename?: 'Entity' }\n        & Pick<Entity, 'id' | 'type'>\n      ) }\n    ), output: (\n      { __typename?: 'EntityResult' }\n      & { entity: (\n        { __typename?: 'Entity' }\n        & Pick<Entity, 'id' | 'type'>\n      ) }\n    ), goods?: Maybe<Array<(\n      { __typename?: 'Goods' }\n      & Pick<Goods, 'id' | 'code' | 'barCode' | 'name' | 'description' | 'tags' | 'metaData' | 'metaDataInternal' | 'createdDate' | 'createdByPersonId'>\n      & { balance: (\n        { __typename?: 'GenericBalance' }\n        & Pick<GenericBalance, 'debit' | 'credit' | 'balance'>\n      ) }\n    )>>, participant?: Maybe<(\n      { __typename?: 'Participant' }\n      & Pick<Participant, 'id' | 'name' | 'msp'>\n    )> }\n  ) }\n);\n\nexport type TransactionComplexQueryQueryVariables = Exact<{\n  getByComplexQueryInput: GetByComplexQueryInput;\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type TransactionComplexQueryQuery = (\n  { __typename?: 'Query' }\n  & { transactionComplexQuery: Array<(\n    { __typename?: 'Transaction' }\n    & Pick<Transaction, 'id' | 'transactionType' | 'resourceType' | 'assetId' | 'quantity' | 'currency' | 'location' | 'tags' | 'createdDate' | 'createdByPersonId' | 'metaData' | 'metaDataInternal'>\n    & { input: (\n      { __typename?: 'EntityResult' }\n      & { entity: (\n        { __typename?: 'Entity' }\n        & Pick<Entity, 'id' | 'type'>\n      ) }\n    ), output: (\n      { __typename?: 'EntityResult' }\n      & { entity: (\n        { __typename?: 'Entity' }\n        & Pick<Entity, 'id' | 'type'>\n      ) }\n    ), participant?: Maybe<(\n      { __typename?: 'Participant' }\n      & Pick<Participant, 'id' | 'name' | 'msp'>\n    )> }\n  )> }\n);\n\nexport type TransactionsQueryVariables = Exact<{\n  skip?: Maybe<Scalars['Int']>;\n  take?: Maybe<Scalars['Int']>;\n}>;\n\n\nexport type TransactionsQuery = (\n  { __typename?: 'Query' }\n  & { transactions: Array<(\n    { __typename?: 'Transaction' }\n    & Pick<Transaction, 'id' | 'transactionType' | 'resourceType' | 'assetId' | 'quantity' | 'currency' | 'location' | 'tags' | 'createdDate' | 'createdByPersonId' | 'metaData' | 'metaDataInternal'>\n    & { input: (\n      { __typename?: 'EntityResult' }\n      & { entity: (\n        { __typename?: 'Entity' }\n        & Pick<Entity, 'id' | 'type'>\n      ) }\n    ), output: (\n      { __typename?: 'EntityResult' }\n      & { entity: (\n        { __typename?: 'Entity' }\n        & Pick<Entity, 'id' | 'type'>\n      ) }\n    ), participant?: Maybe<(\n      { __typename?: 'Participant' }\n      & Pick<Participant, 'id' | 'name' | 'msp'>\n    )> }\n  )> }\n);\n\nexport type AssetAddedSubscriptionVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type AssetAddedSubscription = (\n  { __typename?: 'Subscription' }\n  & { assetAdded: (\n    { __typename?: 'Asset' }\n    & Pick<Asset, 'id' | 'name' | 'description' | 'assetType' | 'ambassadors' | 'location' | 'tags' | 'metaData'>\n    & { owner: (\n      { __typename?: 'EntityResult' }\n      & { entity: (\n        { __typename?: 'Entity' }\n        & Pick<Entity, 'id' | 'type'>\n      ) }\n    ) }\n  ) }\n);\n\nexport type CauseAddedSubscriptionVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type CauseAddedSubscription = (\n  { __typename?: 'Subscription' }\n  & { causeAdded: (\n    { __typename?: 'Cause' }\n    & Pick<Cause, 'id' | 'name' | 'ambassadors' | 'startDate' | 'endDate' | 'location' | 'tags' | 'metaData' | 'createdDate'>\n    & { input: (\n      { __typename?: 'EntityResult' }\n      & { entity: (\n        { __typename?: 'Entity' }\n        & Pick<Entity, 'id'>\n      ) }\n    ) }\n  ) }\n);\n\nexport type ParticipantAddedSubscriptionVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type ParticipantAddedSubscription = (\n  { __typename?: 'Subscription' }\n  & { participantAdded: (\n    { __typename?: 'Participant' }\n    & Pick<Participant, 'id' | 'name' | 'msp'>\n  ) }\n);\n\nexport type PersonAddedSubscriptionVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type PersonAddedSubscription = (\n  { __typename?: 'Subscription' }\n  & { personAdded: (\n    { __typename?: 'Person' }\n    & Pick<Person, 'id' | 'firstName' | 'lastName' | 'username' | 'email' | 'roles'>\n    & { attributes?: Maybe<Array<(\n      { __typename?: 'Attribute' }\n      & Pick<Attribute, 'id' | 'content' | 'issuedDate' | 'expiresDate' | 'expired' | 'certifierID'>\n    )>>, participant: (\n      { __typename?: 'Participant' }\n      & Pick<Participant, 'id' | 'name' | 'msp'>\n    ) }\n  ) }\n);\n\nexport type PersonLoggedSubscriptionVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type PersonLoggedSubscription = (\n  { __typename?: 'Subscription' }\n  & Pick<Subscription, 'personLogged'>\n);\n\nexport type TransactionAddedSubscriptionVariables = Exact<{ [key: string]: never; }>;\n\n\nexport type TransactionAddedSubscription = (\n  { __typename?: 'Subscription' }\n  & { transactionAdded: (\n    { __typename?: 'Transaction' }\n    & Pick<Transaction, 'id' | 'transactionType' | 'resourceType' | 'quantity' | 'currency' | 'location' | 'tags' | 'metaData' | 'metaDataInternal' | 'createdDate'>\n    & { input: (\n      { __typename?: 'EntityResult' }\n      & { entity: (\n        { __typename?: 'Entity' }\n        & Pick<Entity, 'id' | 'type' | 'createdDate'>\n      ) }\n    ), output: (\n      { __typename?: 'EntityResult' }\n      & { entity: (\n        { __typename?: 'Entity' }\n        & Pick<Entity, 'id' | 'type' | 'createdDate'>\n      ) }\n    ), participant?: Maybe<(\n      { __typename?: 'Participant' }\n      & Pick<Participant, 'id' | 'name' | 'msp'>\n    )> }\n  ) }\n);\n\n\nexport const AssetNewDocument = gql`\n    mutation assetNew($newAssetData: NewAssetInput!) {\n  assetNew(newAssetData: $newAssetData) {\n    id\n    name\n    assetType\n    owner {\n      entity {\n        id\n        type\n      }\n    }\n    ambassadors\n    location\n    tags\n    metaData\n    metaDataInternal\n    participant {\n      id\n      name\n    }\n    createdDate\n    createdByPersonId\n    metaData\n    metaDataInternal\n  }\n}\n    `;\nexport type AssetNewMutationFn = Apollo.MutationFunction<AssetNewMutation, AssetNewMutationVariables>;\n\n/**\n * __useAssetNewMutation__\n *\n * To run a mutation, you first call `useAssetNewMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAssetNewMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [assetNewMutation, { data, loading, error }] = useAssetNewMutation({\n *   variables: {\n *      newAssetData: // value for 'newAssetData'\n *   },\n * });\n */\nexport function useAssetNewMutation(baseOptions?: Apollo.MutationHookOptions<AssetNewMutation, AssetNewMutationVariables>) {\n        return Apollo.useMutation<AssetNewMutation, AssetNewMutationVariables>(AssetNewDocument, baseOptions);\n      }\nexport type AssetNewMutationHookResult = ReturnType<typeof useAssetNewMutation>;\nexport type AssetNewMutationResult = Apollo.MutationResult<AssetNewMutation>;\nexport type AssetNewMutationOptions = Apollo.BaseMutationOptions<AssetNewMutation, AssetNewMutationVariables>;\nexport const AssetUpdateDocument = gql`\n    mutation assetUpdate($updateAssetData: UpdateAssetInput!) {\n  assetUpdate(updateAssetData: $updateAssetData) {\n    id\n    name\n    ambassadors\n    tags\n    metaData\n    metaDataInternal\n  }\n}\n    `;\nexport type AssetUpdateMutationFn = Apollo.MutationFunction<AssetUpdateMutation, AssetUpdateMutationVariables>;\n\n/**\n * __useAssetUpdateMutation__\n *\n * To run a mutation, you first call `useAssetUpdateMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAssetUpdateMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [assetUpdateMutation, { data, loading, error }] = useAssetUpdateMutation({\n *   variables: {\n *      updateAssetData: // value for 'updateAssetData'\n *   },\n * });\n */\nexport function useAssetUpdateMutation(baseOptions?: Apollo.MutationHookOptions<AssetUpdateMutation, AssetUpdateMutationVariables>) {\n        return Apollo.useMutation<AssetUpdateMutation, AssetUpdateMutationVariables>(AssetUpdateDocument, baseOptions);\n      }\nexport type AssetUpdateMutationHookResult = ReturnType<typeof useAssetUpdateMutation>;\nexport type AssetUpdateMutationResult = Apollo.MutationResult<AssetUpdateMutation>;\nexport type AssetUpdateMutationOptions = Apollo.BaseMutationOptions<AssetUpdateMutation, AssetUpdateMutationVariables>;\nexport const CauseNewDocument = gql`\n    mutation causeNew($newCauseData: NewCauseInput!) {\n  causeNew(newCauseData: $newCauseData) {\n    id\n    name\n    email\n    ambassadors\n    startDate\n    endDate\n    input {\n      entity {\n        id\n        type\n      }\n    }\n    location\n    tags\n    participant {\n      id\n      code\n      name\n    }\n    createdDate\n    createdByPersonId\n    metaData\n    metaDataInternal\n  }\n}\n    `;\nexport type CauseNewMutationFn = Apollo.MutationFunction<CauseNewMutation, CauseNewMutationVariables>;\n\n/**\n * __useCauseNewMutation__\n *\n * To run a mutation, you first call `useCauseNewMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCauseNewMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [causeNewMutation, { data, loading, error }] = useCauseNewMutation({\n *   variables: {\n *      newCauseData: // value for 'newCauseData'\n *   },\n * });\n */\nexport function useCauseNewMutation(baseOptions?: Apollo.MutationHookOptions<CauseNewMutation, CauseNewMutationVariables>) {\n        return Apollo.useMutation<CauseNewMutation, CauseNewMutationVariables>(CauseNewDocument, baseOptions);\n      }\nexport type CauseNewMutationHookResult = ReturnType<typeof useCauseNewMutation>;\nexport type CauseNewMutationResult = Apollo.MutationResult<CauseNewMutation>;\nexport type CauseNewMutationOptions = Apollo.BaseMutationOptions<CauseNewMutation, CauseNewMutationVariables>;\nexport const CauseUpdateDocument = gql`\n    mutation causeUpdate($updateCauseData: UpdateCauseInput!) {\n  causeUpdate(updateCauseData: $updateCauseData) {\n    id\n    name\n    email\n    ambassadors\n    tags\n    metaData\n    metaDataInternal\n  }\n}\n    `;\nexport type CauseUpdateMutationFn = Apollo.MutationFunction<CauseUpdateMutation, CauseUpdateMutationVariables>;\n\n/**\n * __useCauseUpdateMutation__\n *\n * To run a mutation, you first call `useCauseUpdateMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCauseUpdateMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [causeUpdateMutation, { data, loading, error }] = useCauseUpdateMutation({\n *   variables: {\n *      updateCauseData: // value for 'updateCauseData'\n *   },\n * });\n */\nexport function useCauseUpdateMutation(baseOptions?: Apollo.MutationHookOptions<CauseUpdateMutation, CauseUpdateMutationVariables>) {\n        return Apollo.useMutation<CauseUpdateMutation, CauseUpdateMutationVariables>(CauseUpdateDocument, baseOptions);\n      }\nexport type CauseUpdateMutationHookResult = ReturnType<typeof useCauseUpdateMutation>;\nexport type CauseUpdateMutationResult = Apollo.MutationResult<CauseUpdateMutation>;\nexport type CauseUpdateMutationOptions = Apollo.BaseMutationOptions<CauseUpdateMutation, CauseUpdateMutationVariables>;\nexport const ParticipantNewDocument = gql`\n    mutation participantNew($newParticipantData: NewParticipantInput!) {\n  participantNew(newParticipantData: $newParticipantData) {\n    id\n    code\n    name\n    email\n    fiscalNumber\n    msp\n  }\n}\n    `;\nexport type ParticipantNewMutationFn = Apollo.MutationFunction<ParticipantNewMutation, ParticipantNewMutationVariables>;\n\n/**\n * __useParticipantNewMutation__\n *\n * To run a mutation, you first call `useParticipantNewMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useParticipantNewMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [participantNewMutation, { data, loading, error }] = useParticipantNewMutation({\n *   variables: {\n *      newParticipantData: // value for 'newParticipantData'\n *   },\n * });\n */\nexport function useParticipantNewMutation(baseOptions?: Apollo.MutationHookOptions<ParticipantNewMutation, ParticipantNewMutationVariables>) {\n        return Apollo.useMutation<ParticipantNewMutation, ParticipantNewMutationVariables>(ParticipantNewDocument, baseOptions);\n      }\nexport type ParticipantNewMutationHookResult = ReturnType<typeof useParticipantNewMutation>;\nexport type ParticipantNewMutationResult = Apollo.MutationResult<ParticipantNewMutation>;\nexport type ParticipantNewMutationOptions = Apollo.BaseMutationOptions<ParticipantNewMutation, ParticipantNewMutationVariables>;\nexport const ParticipantUpdateDocument = gql`\n    mutation participantUpdate($updateParticipantData: UpdateParticipantInput!) {\n  participantUpdate(updateParticipantData: $updateParticipantData) {\n    id\n    name\n    ambassadors\n    metaData\n    metaDataInternal\n  }\n}\n    `;\nexport type ParticipantUpdateMutationFn = Apollo.MutationFunction<ParticipantUpdateMutation, ParticipantUpdateMutationVariables>;\n\n/**\n * __useParticipantUpdateMutation__\n *\n * To run a mutation, you first call `useParticipantUpdateMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useParticipantUpdateMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [participantUpdateMutation, { data, loading, error }] = useParticipantUpdateMutation({\n *   variables: {\n *      updateParticipantData: // value for 'updateParticipantData'\n *   },\n * });\n */\nexport function useParticipantUpdateMutation(baseOptions?: Apollo.MutationHookOptions<ParticipantUpdateMutation, ParticipantUpdateMutationVariables>) {\n        return Apollo.useMutation<ParticipantUpdateMutation, ParticipantUpdateMutationVariables>(ParticipantUpdateDocument, baseOptions);\n      }\nexport type ParticipantUpdateMutationHookResult = ReturnType<typeof useParticipantUpdateMutation>;\nexport type ParticipantUpdateMutationResult = Apollo.MutationResult<ParticipantUpdateMutation>;\nexport type ParticipantUpdateMutationOptions = Apollo.BaseMutationOptions<ParticipantUpdateMutation, ParticipantUpdateMutationVariables>;\nexport const PersonAddAttributeDocument = gql`\n    mutation personAddAttribute($personId: String!, $addPersonAttributeData: AddPersonAttributeInput!) {\n  personAddAttribute(personId: $personId, addPersonAttributeData: $addPersonAttributeData) {\n    id\n    username\n    email\n    attributes {\n      id\n      content\n      issuedDate\n      expiresDate\n      expired\n      certifierID\n    }\n    roles\n    participant {\n      id\n      name\n      msp\n    }\n    mobilePhone\n    postal\n    city\n    region\n    geoLocation\n    timezone\n    personalInfo\n    profile\n    firstName\n    lastName\n    gender\n    height\n    fatherFirstName\n    fatherLastName\n    motherFirstName\n    motherLastName\n    birthDate\n    nationality\n    country\n    documentNumber\n    documentType\n    cardVersion\n    emissionDate\n    expirationDate\n    emittingEntity\n    identityNumber\n    fiscalNumber\n    socialSecurityNumber\n    beneficiaryNumber\n    pan\n    requestLocation\n    otherInformation\n    registrationDate\n  }\n}\n    `;\nexport type PersonAddAttributeMutationFn = Apollo.MutationFunction<PersonAddAttributeMutation, PersonAddAttributeMutationVariables>;\n\n/**\n * __usePersonAddAttributeMutation__\n *\n * To run a mutation, you first call `usePersonAddAttributeMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `usePersonAddAttributeMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [personAddAttributeMutation, { data, loading, error }] = usePersonAddAttributeMutation({\n *   variables: {\n *      personId: // value for 'personId'\n *      addPersonAttributeData: // value for 'addPersonAttributeData'\n *   },\n * });\n */\nexport function usePersonAddAttributeMutation(baseOptions?: Apollo.MutationHookOptions<PersonAddAttributeMutation, PersonAddAttributeMutationVariables>) {\n        return Apollo.useMutation<PersonAddAttributeMutation, PersonAddAttributeMutationVariables>(PersonAddAttributeDocument, baseOptions);\n      }\nexport type PersonAddAttributeMutationHookResult = ReturnType<typeof usePersonAddAttributeMutation>;\nexport type PersonAddAttributeMutationResult = Apollo.MutationResult<PersonAddAttributeMutation>;\nexport type PersonAddAttributeMutationOptions = Apollo.BaseMutationOptions<PersonAddAttributeMutation, PersonAddAttributeMutationVariables>;\nexport const PersonLoginDocument = gql`\n    mutation personLogin($loginPersonData: LoginPersonInput!) {\n  personLogin(loginPersonData: $loginPersonData) {\n    accessToken\n    user {\n      id\n      username\n      email\n      attributes {\n        id\n        content\n        issuedDate\n        expiresDate\n        expired\n        certifierID\n      }\n      roles\n      participant {\n        id\n        name\n        msp\n      }\n      mobilePhone\n      postal\n      city\n      region\n      geoLocation\n      timezone\n      personalInfo\n      profile\n      firstName\n      lastName\n      gender\n      height\n      fatherFirstName\n      fatherLastName\n      motherFirstName\n      motherLastName\n      birthDate\n      nationality\n      country\n      documentNumber\n      documentType\n      cardVersion\n      emissionDate\n      expirationDate\n      emittingEntity\n      identityNumber\n      fiscalNumber\n      socialSecurityNumber\n      beneficiaryNumber\n      pan\n      requestLocation\n      otherInformation\n      registrationDate\n    }\n  }\n}\n    `;\nexport type PersonLoginMutationFn = Apollo.MutationFunction<PersonLoginMutation, PersonLoginMutationVariables>;\n\n/**\n * __usePersonLoginMutation__\n *\n * To run a mutation, you first call `usePersonLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `usePersonLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [personLoginMutation, { data, loading, error }] = usePersonLoginMutation({\n *   variables: {\n *      loginPersonData: // value for 'loginPersonData'\n *   },\n * });\n */\nexport function usePersonLoginMutation(baseOptions?: Apollo.MutationHookOptions<PersonLoginMutation, PersonLoginMutationVariables>) {\n        return Apollo.useMutation<PersonLoginMutation, PersonLoginMutationVariables>(PersonLoginDocument, baseOptions);\n      }\nexport type PersonLoginMutationHookResult = ReturnType<typeof usePersonLoginMutation>;\nexport type PersonLoginMutationResult = Apollo.MutationResult<PersonLoginMutation>;\nexport type PersonLoginMutationOptions = Apollo.BaseMutationOptions<PersonLoginMutation, PersonLoginMutationVariables>;\nexport const PersonLogoutDocument = gql`\n    mutation personLogout {\n  personLogout\n}\n    `;\nexport type PersonLogoutMutationFn = Apollo.MutationFunction<PersonLogoutMutation, PersonLogoutMutationVariables>;\n\n/**\n * __usePersonLogoutMutation__\n *\n * To run a mutation, you first call `usePersonLogoutMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `usePersonLogoutMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [personLogoutMutation, { data, loading, error }] = usePersonLogoutMutation({\n *   variables: {\n *   },\n * });\n */\nexport function usePersonLogoutMutation(baseOptions?: Apollo.MutationHookOptions<PersonLogoutMutation, PersonLogoutMutationVariables>) {\n        return Apollo.useMutation<PersonLogoutMutation, PersonLogoutMutationVariables>(PersonLogoutDocument, baseOptions);\n      }\nexport type PersonLogoutMutationHookResult = ReturnType<typeof usePersonLogoutMutation>;\nexport type PersonLogoutMutationResult = Apollo.MutationResult<PersonLogoutMutation>;\nexport type PersonLogoutMutationOptions = Apollo.BaseMutationOptions<PersonLogoutMutation, PersonLogoutMutationVariables>;\nexport const PersonRegisterDocument = gql`\n    mutation personRegister($newPersonData: NewPersonInput!) {\n  personRegister(newPersonData: $newPersonData) {\n    id\n    firstName\n    lastName\n    username\n    email\n    attributes {\n      id\n      content\n      issuedDate\n      expiresDate\n      expired\n      certifierID\n    }\n    roles\n    participant {\n      id\n      name\n      msp\n    }\n  }\n}\n    `;\nexport type PersonRegisterMutationFn = Apollo.MutationFunction<PersonRegisterMutation, PersonRegisterMutationVariables>;\n\n/**\n * __usePersonRegisterMutation__\n *\n * To run a mutation, you first call `usePersonRegisterMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `usePersonRegisterMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [personRegisterMutation, { data, loading, error }] = usePersonRegisterMutation({\n *   variables: {\n *      newPersonData: // value for 'newPersonData'\n *   },\n * });\n */\nexport function usePersonRegisterMutation(baseOptions?: Apollo.MutationHookOptions<PersonRegisterMutation, PersonRegisterMutationVariables>) {\n        return Apollo.useMutation<PersonRegisterMutation, PersonRegisterMutationVariables>(PersonRegisterDocument, baseOptions);\n      }\nexport type PersonRegisterMutationHookResult = ReturnType<typeof usePersonRegisterMutation>;\nexport type PersonRegisterMutationResult = Apollo.MutationResult<PersonRegisterMutation>;\nexport type PersonRegisterMutationOptions = Apollo.BaseMutationOptions<PersonRegisterMutation, PersonRegisterMutationVariables>;\nexport const PersonUpdateDocument = gql`\n    mutation personUpdate($updatePersonData: UpdatePersonInput!) {\n  personUpdate(updatePersonData: $updatePersonData) {\n    id\n    roles\n    metaDataInternal\n  }\n}\n    `;\nexport type PersonUpdateMutationFn = Apollo.MutationFunction<PersonUpdateMutation, PersonUpdateMutationVariables>;\n\n/**\n * __usePersonUpdateMutation__\n *\n * To run a mutation, you first call `usePersonUpdateMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `usePersonUpdateMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [personUpdateMutation, { data, loading, error }] = usePersonUpdateMutation({\n *   variables: {\n *      updatePersonData: // value for 'updatePersonData'\n *   },\n * });\n */\nexport function usePersonUpdateMutation(baseOptions?: Apollo.MutationHookOptions<PersonUpdateMutation, PersonUpdateMutationVariables>) {\n        return Apollo.useMutation<PersonUpdateMutation, PersonUpdateMutationVariables>(PersonUpdateDocument, baseOptions);\n      }\nexport type PersonUpdateMutationHookResult = ReturnType<typeof usePersonUpdateMutation>;\nexport type PersonUpdateMutationResult = Apollo.MutationResult<PersonUpdateMutation>;\nexport type PersonUpdateMutationOptions = Apollo.BaseMutationOptions<PersonUpdateMutation, PersonUpdateMutationVariables>;\nexport const PersonUpdatePasswordDocument = gql`\n    mutation personUpdatePassword($updatePersonPasswordData: UpdatePersonPasswordInput!) {\n  personUpdatePassword(updatePersonPasswordData: $updatePersonPasswordData) {\n    id\n    roles\n    metaDataInternal\n  }\n}\n    `;\nexport type PersonUpdatePasswordMutationFn = Apollo.MutationFunction<PersonUpdatePasswordMutation, PersonUpdatePasswordMutationVariables>;\n\n/**\n * __usePersonUpdatePasswordMutation__\n *\n * To run a mutation, you first call `usePersonUpdatePasswordMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `usePersonUpdatePasswordMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [personUpdatePasswordMutation, { data, loading, error }] = usePersonUpdatePasswordMutation({\n *   variables: {\n *      updatePersonPasswordData: // value for 'updatePersonPasswordData'\n *   },\n * });\n */\nexport function usePersonUpdatePasswordMutation(baseOptions?: Apollo.MutationHookOptions<PersonUpdatePasswordMutation, PersonUpdatePasswordMutationVariables>) {\n        return Apollo.useMutation<PersonUpdatePasswordMutation, PersonUpdatePasswordMutationVariables>(PersonUpdatePasswordDocument, baseOptions);\n      }\nexport type PersonUpdatePasswordMutationHookResult = ReturnType<typeof usePersonUpdatePasswordMutation>;\nexport type PersonUpdatePasswordMutationResult = Apollo.MutationResult<PersonUpdatePasswordMutation>;\nexport type PersonUpdatePasswordMutationOptions = Apollo.BaseMutationOptions<PersonUpdatePasswordMutation, PersonUpdatePasswordMutationVariables>;\nexport const PersonUpdateProfileDocument = gql`\n    mutation personUpdateProfile($updatePersonProfileData: UpdatePersonProfileInput!) {\n  personUpdateProfile(updatePersonProfileData: $updatePersonProfileData) {\n    id\n    email\n    mobilePhone\n    postal\n    city\n    region\n    geoLocation\n    timezone\n    personalInfo\n    metaData\n  }\n}\n    `;\nexport type PersonUpdateProfileMutationFn = Apollo.MutationFunction<PersonUpdateProfileMutation, PersonUpdateProfileMutationVariables>;\n\n/**\n * __usePersonUpdateProfileMutation__\n *\n * To run a mutation, you first call `usePersonUpdateProfileMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `usePersonUpdateProfileMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [personUpdateProfileMutation, { data, loading, error }] = usePersonUpdateProfileMutation({\n *   variables: {\n *      updatePersonProfileData: // value for 'updatePersonProfileData'\n *   },\n * });\n */\nexport function usePersonUpdateProfileMutation(baseOptions?: Apollo.MutationHookOptions<PersonUpdateProfileMutation, PersonUpdateProfileMutationVariables>) {\n        return Apollo.useMutation<PersonUpdateProfileMutation, PersonUpdateProfileMutationVariables>(PersonUpdateProfileDocument, baseOptions);\n      }\nexport type PersonUpdateProfileMutationHookResult = ReturnType<typeof usePersonUpdateProfileMutation>;\nexport type PersonUpdateProfileMutationResult = Apollo.MutationResult<PersonUpdateProfileMutation>;\nexport type PersonUpdateProfileMutationOptions = Apollo.BaseMutationOptions<PersonUpdateProfileMutation, PersonUpdateProfileMutationVariables>;\nexport const PersonUpsertCitizenCardDocument = gql`\n    mutation personUpsertCitizenCard($upsertCitizenCardData: UpsertCitizenCardInput!) {\n  personUpsertCitizenCard(upsertCitizenCardData: $upsertCitizenCardData) {\n    id\n    documentNumber\n    identityNumber\n    fiscalNumber\n    socialSecurityNumber\n    beneficiaryNumber\n    pan\n    firstName\n    lastName\n    gender\n    height\n    fatherFirstName\n    fatherLastName\n    motherFirstName\n    motherLastName\n    birthDate\n    nationality\n    country\n    documentType\n    cardVersion\n    emissionDate\n    expirationDate\n    emittingEntity\n    requestLocation\n    otherInformation\n  }\n}\n    `;\nexport type PersonUpsertCitizenCardMutationFn = Apollo.MutationFunction<PersonUpsertCitizenCardMutation, PersonUpsertCitizenCardMutationVariables>;\n\n/**\n * __usePersonUpsertCitizenCardMutation__\n *\n * To run a mutation, you first call `usePersonUpsertCitizenCardMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `usePersonUpsertCitizenCardMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [personUpsertCitizenCardMutation, { data, loading, error }] = usePersonUpsertCitizenCardMutation({\n *   variables: {\n *      upsertCitizenCardData: // value for 'upsertCitizenCardData'\n *   },\n * });\n */\nexport function usePersonUpsertCitizenCardMutation(baseOptions?: Apollo.MutationHookOptions<PersonUpsertCitizenCardMutation, PersonUpsertCitizenCardMutationVariables>) {\n        return Apollo.useMutation<PersonUpsertCitizenCardMutation, PersonUpsertCitizenCardMutationVariables>(PersonUpsertCitizenCardDocument, baseOptions);\n      }\nexport type PersonUpsertCitizenCardMutationHookResult = ReturnType<typeof usePersonUpsertCitizenCardMutation>;\nexport type PersonUpsertCitizenCardMutationResult = Apollo.MutationResult<PersonUpsertCitizenCardMutation>;\nexport type PersonUpsertCitizenCardMutationOptions = Apollo.BaseMutationOptions<PersonUpsertCitizenCardMutation, PersonUpsertCitizenCardMutationVariables>;\nexport const TransactionNewDocument = gql`\n    mutation transactionNew($newTransactionData: NewTransactionInput!) {\n  transactionNew(newTransactionData: $newTransactionData) {\n    id\n    transactionType\n    resourceType\n    assetId\n    input {\n      entity {\n        id\n        type\n      }\n    }\n    output {\n      entity {\n        id\n        type\n      }\n    }\n    quantity\n    currency\n    location\n    tags\n    participant {\n      id\n      name\n      msp\n    }\n    createdDate\n    createdByPersonId\n    metaData\n    metaDataInternal\n  }\n}\n    `;\nexport type TransactionNewMutationFn = Apollo.MutationFunction<TransactionNewMutation, TransactionNewMutationVariables>;\n\n/**\n * __useTransactionNewMutation__\n *\n * To run a mutation, you first call `useTransactionNewMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useTransactionNewMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [transactionNewMutation, { data, loading, error }] = useTransactionNewMutation({\n *   variables: {\n *      newTransactionData: // value for 'newTransactionData'\n *   },\n * });\n */\nexport function useTransactionNewMutation(baseOptions?: Apollo.MutationHookOptions<TransactionNewMutation, TransactionNewMutationVariables>) {\n        return Apollo.useMutation<TransactionNewMutation, TransactionNewMutationVariables>(TransactionNewDocument, baseOptions);\n      }\nexport type TransactionNewMutationHookResult = ReturnType<typeof useTransactionNewMutation>;\nexport type TransactionNewMutationResult = Apollo.MutationResult<TransactionNewMutation>;\nexport type TransactionNewMutationOptions = Apollo.BaseMutationOptions<TransactionNewMutation, TransactionNewMutationVariables>;\nexport const TransactionUpdateDocument = gql`\n    mutation transactionUpdate($updateTransactionData: UpdateTransactionInput!) {\n  transactionUpdate(updateTransactionData: $updateTransactionData) {\n    id\n    metaDataInternal\n  }\n}\n    `;\nexport type TransactionUpdateMutationFn = Apollo.MutationFunction<TransactionUpdateMutation, TransactionUpdateMutationVariables>;\n\n/**\n * __useTransactionUpdateMutation__\n *\n * To run a mutation, you first call `useTransactionUpdateMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useTransactionUpdateMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [transactionUpdateMutation, { data, loading, error }] = useTransactionUpdateMutation({\n *   variables: {\n *      updateTransactionData: // value for 'updateTransactionData'\n *   },\n * });\n */\nexport function useTransactionUpdateMutation(baseOptions?: Apollo.MutationHookOptions<TransactionUpdateMutation, TransactionUpdateMutationVariables>) {\n        return Apollo.useMutation<TransactionUpdateMutation, TransactionUpdateMutationVariables>(TransactionUpdateDocument, baseOptions);\n      }\nexport type TransactionUpdateMutationHookResult = ReturnType<typeof useTransactionUpdateMutation>;\nexport type TransactionUpdateMutationResult = Apollo.MutationResult<TransactionUpdateMutation>;\nexport type TransactionUpdateMutationOptions = Apollo.BaseMutationOptions<TransactionUpdateMutation, TransactionUpdateMutationVariables>;\nexport const AssetByIdDocument = gql`\n    query assetById($id: String!) {\n  assetById(id: $id) {\n    id\n    name\n    description\n    assetType\n    owner {\n      entity {\n        id\n        type\n      }\n    }\n    ambassadors\n    location\n    tags\n    assetType\n    owner {\n      entity {\n        id\n        type\n      }\n    }\n    participant {\n      id\n      name\n    }\n    createdDate\n    createdByPersonId\n    metaData\n    metaDataInternal\n  }\n}\n    `;\n\n/**\n * __useAssetByIdQuery__\n *\n * To run a query within a React component, call `useAssetByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useAssetByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAssetByIdQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useAssetByIdQuery(baseOptions?: Apollo.QueryHookOptions<AssetByIdQuery, AssetByIdQueryVariables>) {\n        return Apollo.useQuery<AssetByIdQuery, AssetByIdQueryVariables>(AssetByIdDocument, baseOptions);\n      }\nexport function useAssetByIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AssetByIdQuery, AssetByIdQueryVariables>) {\n          return Apollo.useLazyQuery<AssetByIdQuery, AssetByIdQueryVariables>(AssetByIdDocument, baseOptions);\n        }\nexport type AssetByIdQueryHookResult = ReturnType<typeof useAssetByIdQuery>;\nexport type AssetByIdLazyQueryHookResult = ReturnType<typeof useAssetByIdLazyQuery>;\nexport type AssetByIdQueryResult = Apollo.QueryResult<AssetByIdQuery, AssetByIdQueryVariables>;\nexport const AssetComplexQueryDocument = gql`\n    query assetComplexQuery($getByComplexQueryInput: GetByComplexQueryInput!, $skip: Int, $take: Int) {\n  assetComplexQuery(getByComplexQueryInput: $getByComplexQueryInput, skip: $skip, take: $take) {\n    id\n    name\n    assetType\n    owner {\n      entity {\n        id\n        type\n      }\n    }\n    ambassadors\n    location\n    tags\n    assetType\n    owner {\n      entity {\n        id\n        type\n      }\n    }\n    participant {\n      id\n      name\n    }\n    createdDate\n    createdByPersonId\n    metaData\n    metaDataInternal\n  }\n}\n    `;\n\n/**\n * __useAssetComplexQueryQuery__\n *\n * To run a query within a React component, call `useAssetComplexQueryQuery` and pass it any options that fit your needs.\n * When your component renders, `useAssetComplexQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAssetComplexQueryQuery({\n *   variables: {\n *      getByComplexQueryInput: // value for 'getByComplexQueryInput'\n *      skip: // value for 'skip'\n *      take: // value for 'take'\n *   },\n * });\n */\nexport function useAssetComplexQueryQuery(baseOptions?: Apollo.QueryHookOptions<AssetComplexQueryQuery, AssetComplexQueryQueryVariables>) {\n        return Apollo.useQuery<AssetComplexQueryQuery, AssetComplexQueryQueryVariables>(AssetComplexQueryDocument, baseOptions);\n      }\nexport function useAssetComplexQueryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AssetComplexQueryQuery, AssetComplexQueryQueryVariables>) {\n          return Apollo.useLazyQuery<AssetComplexQueryQuery, AssetComplexQueryQueryVariables>(AssetComplexQueryDocument, baseOptions);\n        }\nexport type AssetComplexQueryQueryHookResult = ReturnType<typeof useAssetComplexQueryQuery>;\nexport type AssetComplexQueryLazyQueryHookResult = ReturnType<typeof useAssetComplexQueryLazyQuery>;\nexport type AssetComplexQueryQueryResult = Apollo.QueryResult<AssetComplexQueryQuery, AssetComplexQueryQueryVariables>;\nexport const AssetsDocument = gql`\n    query assets($skip: Int, $take: Int) {\n  assets(skip: $skip, take: $take) {\n    id\n    name\n    assetType\n    owner {\n      entity {\n        id\n        type\n      }\n    }\n    ambassadors\n    location\n    tags\n    assetType\n    owner {\n      entity {\n        id\n        type\n      }\n    }\n    participant {\n      id\n      name\n    }\n    createdDate\n    createdByPersonId\n    metaData\n    metaDataInternal\n  }\n}\n    `;\n\n/**\n * __useAssetsQuery__\n *\n * To run a query within a React component, call `useAssetsQuery` and pass it any options that fit your needs.\n * When your component renders, `useAssetsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAssetsQuery({\n *   variables: {\n *      skip: // value for 'skip'\n *      take: // value for 'take'\n *   },\n * });\n */\nexport function useAssetsQuery(baseOptions?: Apollo.QueryHookOptions<AssetsQuery, AssetsQueryVariables>) {\n        return Apollo.useQuery<AssetsQuery, AssetsQueryVariables>(AssetsDocument, baseOptions);\n      }\nexport function useAssetsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AssetsQuery, AssetsQueryVariables>) {\n          return Apollo.useLazyQuery<AssetsQuery, AssetsQueryVariables>(AssetsDocument, baseOptions);\n        }\nexport type AssetsQueryHookResult = ReturnType<typeof useAssetsQuery>;\nexport type AssetsLazyQueryHookResult = ReturnType<typeof useAssetsLazyQuery>;\nexport type AssetsQueryResult = Apollo.QueryResult<AssetsQuery, AssetsQueryVariables>;\nexport const CauseByIdDocument = gql`\n    query causeById($id: String!) {\n  causeById(id: $id) {\n    id\n    name\n    email\n    ambassadors\n    startDate\n    endDate\n    location\n    tags\n    metaData\n    input {\n      entity {\n        id\n        type\n        createdDate\n      }\n    }\n    participant {\n      id\n      name\n      msp\n    }\n    fundsBalance {\n      debit\n      credit\n      balance\n    }\n    volunteeringHoursBalance {\n      debit\n      debit\n      credit\n      balance\n    }\n    goodsStock {\n      id\n      code\n      barCode\n      name\n      description\n      tags\n      balance {\n        debit\n        credit\n        balance\n      }\n      metaData\n      metaDataInternal\n      createdDate\n      createdByPersonId\n    }\n    createdDate\n    createdByPersonId\n    metaData\n    metaDataInternal\n  }\n}\n    `;\n\n/**\n * __useCauseByIdQuery__\n *\n * To run a query within a React component, call `useCauseByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useCauseByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCauseByIdQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useCauseByIdQuery(baseOptions?: Apollo.QueryHookOptions<CauseByIdQuery, CauseByIdQueryVariables>) {\n        return Apollo.useQuery<CauseByIdQuery, CauseByIdQueryVariables>(CauseByIdDocument, baseOptions);\n      }\nexport function useCauseByIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CauseByIdQuery, CauseByIdQueryVariables>) {\n          return Apollo.useLazyQuery<CauseByIdQuery, CauseByIdQueryVariables>(CauseByIdDocument, baseOptions);\n        }\nexport type CauseByIdQueryHookResult = ReturnType<typeof useCauseByIdQuery>;\nexport type CauseByIdLazyQueryHookResult = ReturnType<typeof useCauseByIdLazyQuery>;\nexport type CauseByIdQueryResult = Apollo.QueryResult<CauseByIdQuery, CauseByIdQueryVariables>;\nexport const CauseComplexQueryDocument = gql`\n    query causeComplexQuery($getByComplexQueryInput: GetByComplexQueryInput!, $skip: Int, $take: Int) {\n  causeComplexQuery(getByComplexQueryInput: $getByComplexQueryInput, skip: $skip, take: $take) {\n    id\n    name\n    ambassadors\n    startDate\n    endDate\n    location\n    tags\n    metaData\n    input {\n      entity {\n        id\n        type\n        createdDate\n      }\n    }\n    participant {\n      id\n      name\n      msp\n    }\n    createdDate\n    createdByPersonId\n    metaData\n    metaDataInternal\n  }\n}\n    `;\n\n/**\n * __useCauseComplexQueryQuery__\n *\n * To run a query within a React component, call `useCauseComplexQueryQuery` and pass it any options that fit your needs.\n * When your component renders, `useCauseComplexQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCauseComplexQueryQuery({\n *   variables: {\n *      getByComplexQueryInput: // value for 'getByComplexQueryInput'\n *      skip: // value for 'skip'\n *      take: // value for 'take'\n *   },\n * });\n */\nexport function useCauseComplexQueryQuery(baseOptions?: Apollo.QueryHookOptions<CauseComplexQueryQuery, CauseComplexQueryQueryVariables>) {\n        return Apollo.useQuery<CauseComplexQueryQuery, CauseComplexQueryQueryVariables>(CauseComplexQueryDocument, baseOptions);\n      }\nexport function useCauseComplexQueryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CauseComplexQueryQuery, CauseComplexQueryQueryVariables>) {\n          return Apollo.useLazyQuery<CauseComplexQueryQuery, CauseComplexQueryQueryVariables>(CauseComplexQueryDocument, baseOptions);\n        }\nexport type CauseComplexQueryQueryHookResult = ReturnType<typeof useCauseComplexQueryQuery>;\nexport type CauseComplexQueryLazyQueryHookResult = ReturnType<typeof useCauseComplexQueryLazyQuery>;\nexport type CauseComplexQueryQueryResult = Apollo.QueryResult<CauseComplexQueryQuery, CauseComplexQueryQueryVariables>;\nexport const CauseOngoingDocument = gql`\n    query causeOngoing($date: Float!) {\n  causeOngoing(date: $date) {\n    id\n    name\n    ambassadors\n    startDate\n    endDate\n    location\n    tags\n    metaData\n    input {\n      entity {\n        id\n        type\n        createdDate\n      }\n    }\n    participant {\n      id\n      name\n      msp\n    }\n    createdDate\n    createdByPersonId\n    metaData\n    metaDataInternal\n  }\n}\n    `;\n\n/**\n * __useCauseOngoingQuery__\n *\n * To run a query within a React component, call `useCauseOngoingQuery` and pass it any options that fit your needs.\n * When your component renders, `useCauseOngoingQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCauseOngoingQuery({\n *   variables: {\n *      date: // value for 'date'\n *   },\n * });\n */\nexport function useCauseOngoingQuery(baseOptions?: Apollo.QueryHookOptions<CauseOngoingQuery, CauseOngoingQueryVariables>) {\n        return Apollo.useQuery<CauseOngoingQuery, CauseOngoingQueryVariables>(CauseOngoingDocument, baseOptions);\n      }\nexport function useCauseOngoingLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CauseOngoingQuery, CauseOngoingQueryVariables>) {\n          return Apollo.useLazyQuery<CauseOngoingQuery, CauseOngoingQueryVariables>(CauseOngoingDocument, baseOptions);\n        }\nexport type CauseOngoingQueryHookResult = ReturnType<typeof useCauseOngoingQuery>;\nexport type CauseOngoingLazyQueryHookResult = ReturnType<typeof useCauseOngoingLazyQuery>;\nexport type CauseOngoingQueryResult = Apollo.QueryResult<CauseOngoingQuery, CauseOngoingQueryVariables>;\nexport const CausesDocument = gql`\n    query causes($skip: Int, $take: Int) {\n  causes(skip: $skip, take: $take) {\n    id\n    name\n    email\n    ambassadors\n    startDate\n    endDate\n    location\n    tags\n    metaData\n    input {\n      entity {\n        id\n        type\n        createdDate\n      }\n    }\n    participant {\n      id\n      name\n      msp\n    }\n    fundsBalance {\n      debit\n      credit\n      balance\n    }\n    volunteeringHoursBalance {\n      debit\n      credit\n      balance\n    }\n    goodsStock {\n      id\n      code\n      barCode\n      name\n      description\n      tags\n      balance {\n        debit\n        credit\n        balance\n      }\n    }\n    createdDate\n    createdByPersonId\n    metaData\n    metaDataInternal\n  }\n}\n    `;\n\n/**\n * __useCausesQuery__\n *\n * To run a query within a React component, call `useCausesQuery` and pass it any options that fit your needs.\n * When your component renders, `useCausesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCausesQuery({\n *   variables: {\n *      skip: // value for 'skip'\n *      take: // value for 'take'\n *   },\n * });\n */\nexport function useCausesQuery(baseOptions?: Apollo.QueryHookOptions<CausesQuery, CausesQueryVariables>) {\n        return Apollo.useQuery<CausesQuery, CausesQueryVariables>(CausesDocument, baseOptions);\n      }\nexport function useCausesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CausesQuery, CausesQueryVariables>) {\n          return Apollo.useLazyQuery<CausesQuery, CausesQueryVariables>(CausesDocument, baseOptions);\n        }\nexport type CausesQueryHookResult = ReturnType<typeof useCausesQuery>;\nexport type CausesLazyQueryHookResult = ReturnType<typeof useCausesLazyQuery>;\nexport type CausesQueryResult = Apollo.QueryResult<CausesQuery, CausesQueryVariables>;\nexport const ParticipantByCodeDocument = gql`\n    query participantByCode($code: String!) {\n  participantByCode(code: $code) {\n    id\n    code\n    name\n    ambassadors\n    msp\n    participant {\n      id\n      name\n      msp\n    }\n    createdDate\n    createdByPersonId\n    metaData\n    metaDataInternal\n  }\n}\n    `;\n\n/**\n * __useParticipantByCodeQuery__\n *\n * To run a query within a React component, call `useParticipantByCodeQuery` and pass it any options that fit your needs.\n * When your component renders, `useParticipantByCodeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useParticipantByCodeQuery({\n *   variables: {\n *      code: // value for 'code'\n *   },\n * });\n */\nexport function useParticipantByCodeQuery(baseOptions?: Apollo.QueryHookOptions<ParticipantByCodeQuery, ParticipantByCodeQueryVariables>) {\n        return Apollo.useQuery<ParticipantByCodeQuery, ParticipantByCodeQueryVariables>(ParticipantByCodeDocument, baseOptions);\n      }\nexport function useParticipantByCodeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ParticipantByCodeQuery, ParticipantByCodeQueryVariables>) {\n          return Apollo.useLazyQuery<ParticipantByCodeQuery, ParticipantByCodeQueryVariables>(ParticipantByCodeDocument, baseOptions);\n        }\nexport type ParticipantByCodeQueryHookResult = ReturnType<typeof useParticipantByCodeQuery>;\nexport type ParticipantByCodeLazyQueryHookResult = ReturnType<typeof useParticipantByCodeLazyQuery>;\nexport type ParticipantByCodeQueryResult = Apollo.QueryResult<ParticipantByCodeQuery, ParticipantByCodeQueryVariables>;\nexport const ParticipantByIdDocument = gql`\n    query participantById($id: String!) {\n  participantById(id: $id) {\n    id\n    name\n    msp\n    participant {\n      id\n      name\n      msp\n    }\n    createdDate\n  }\n}\n    `;\n\n/**\n * __useParticipantByIdQuery__\n *\n * To run a query within a React component, call `useParticipantByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useParticipantByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useParticipantByIdQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useParticipantByIdQuery(baseOptions?: Apollo.QueryHookOptions<ParticipantByIdQuery, ParticipantByIdQueryVariables>) {\n        return Apollo.useQuery<ParticipantByIdQuery, ParticipantByIdQueryVariables>(ParticipantByIdDocument, baseOptions);\n      }\nexport function useParticipantByIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ParticipantByIdQuery, ParticipantByIdQueryVariables>) {\n          return Apollo.useLazyQuery<ParticipantByIdQuery, ParticipantByIdQueryVariables>(ParticipantByIdDocument, baseOptions);\n        }\nexport type ParticipantByIdQueryHookResult = ReturnType<typeof useParticipantByIdQuery>;\nexport type ParticipantByIdLazyQueryHookResult = ReturnType<typeof useParticipantByIdLazyQuery>;\nexport type ParticipantByIdQueryResult = Apollo.QueryResult<ParticipantByIdQuery, ParticipantByIdQueryVariables>;\nexport const ParticipantsDocument = gql`\n    query participants($skip: Int, $take: Int) {\n  participants(skip: $skip, take: $take) {\n    id\n    name\n    email\n    fiscalNumber\n    ambassadors\n    msp\n    participant {\n      id\n      name\n      msp\n    }\n    createdDate\n  }\n}\n    `;\n\n/**\n * __useParticipantsQuery__\n *\n * To run a query within a React component, call `useParticipantsQuery` and pass it any options that fit your needs.\n * When your component renders, `useParticipantsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useParticipantsQuery({\n *   variables: {\n *      skip: // value for 'skip'\n *      take: // value for 'take'\n *   },\n * });\n */\nexport function useParticipantsQuery(baseOptions?: Apollo.QueryHookOptions<ParticipantsQuery, ParticipantsQueryVariables>) {\n        return Apollo.useQuery<ParticipantsQuery, ParticipantsQueryVariables>(ParticipantsDocument, baseOptions);\n      }\nexport function useParticipantsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ParticipantsQuery, ParticipantsQueryVariables>) {\n          return Apollo.useLazyQuery<ParticipantsQuery, ParticipantsQueryVariables>(ParticipantsDocument, baseOptions);\n        }\nexport type ParticipantsQueryHookResult = ReturnType<typeof useParticipantsQuery>;\nexport type ParticipantsLazyQueryHookResult = ReturnType<typeof useParticipantsLazyQuery>;\nexport type ParticipantsQueryResult = Apollo.QueryResult<ParticipantsQuery, ParticipantsQueryVariables>;\nexport const ParticipantComplexQueryDocument = gql`\n    query participantComplexQuery($getByComplexQueryInput: GetByComplexQueryInput!, $skip: Int, $take: Int) {\n  participantComplexQuery(getByComplexQueryInput: $getByComplexQueryInput, skip: $skip, take: $take) {\n    id\n    name\n    ambassadors\n    msp\n    participant {\n      id\n      name\n      msp\n    }\n    createdDate\n    createdByPersonId\n    metaData\n    metaDataInternal\n  }\n}\n    `;\n\n/**\n * __useParticipantComplexQueryQuery__\n *\n * To run a query within a React component, call `useParticipantComplexQueryQuery` and pass it any options that fit your needs.\n * When your component renders, `useParticipantComplexQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useParticipantComplexQueryQuery({\n *   variables: {\n *      getByComplexQueryInput: // value for 'getByComplexQueryInput'\n *      skip: // value for 'skip'\n *      take: // value for 'take'\n *   },\n * });\n */\nexport function useParticipantComplexQueryQuery(baseOptions?: Apollo.QueryHookOptions<ParticipantComplexQueryQuery, ParticipantComplexQueryQueryVariables>) {\n        return Apollo.useQuery<ParticipantComplexQueryQuery, ParticipantComplexQueryQueryVariables>(ParticipantComplexQueryDocument, baseOptions);\n      }\nexport function useParticipantComplexQueryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ParticipantComplexQueryQuery, ParticipantComplexQueryQueryVariables>) {\n          return Apollo.useLazyQuery<ParticipantComplexQueryQuery, ParticipantComplexQueryQueryVariables>(ParticipantComplexQueryDocument, baseOptions);\n        }\nexport type ParticipantComplexQueryQueryHookResult = ReturnType<typeof useParticipantComplexQueryQuery>;\nexport type ParticipantComplexQueryLazyQueryHookResult = ReturnType<typeof useParticipantComplexQueryLazyQuery>;\nexport type ParticipantComplexQueryQueryResult = Apollo.QueryResult<ParticipantComplexQueryQuery, ParticipantComplexQueryQueryVariables>;\nexport const PersonByAttributeDocument = gql`\n    query personByAttribute($getByAttributeInput: GetByAttributeInput!, $skip: Int, $take: Int) {\n  personByAttribute(getByAttributeInput: $getByAttributeInput, skip: $skip, take: $take) {\n    id\n    username\n    email\n    attributes {\n      id\n      content\n      issuedDate\n      expiresDate\n      expired\n      certifierID\n    }\n    roles\n    participant {\n      id\n      name\n      msp\n    }\n    mobilePhone\n    postal\n    city\n    region\n    geoLocation\n    timezone\n    personalInfo\n    profile\n    firstName\n    lastName\n    gender\n    height\n    fatherFirstName\n    fatherLastName\n    motherFirstName\n    motherLastName\n    birthDate\n    nationality\n    country\n    documentNumber\n    documentType\n    cardVersion\n    emissionDate\n    expirationDate\n    emittingEntity\n    identityNumber\n    fiscalNumber\n    socialSecurityNumber\n    beneficiaryNumber\n    pan\n    requestLocation\n    otherInformation\n    registrationDate\n    createdDate\n  }\n}\n    `;\n\n/**\n * __usePersonByAttributeQuery__\n *\n * To run a query within a React component, call `usePersonByAttributeQuery` and pass it any options that fit your needs.\n * When your component renders, `usePersonByAttributeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePersonByAttributeQuery({\n *   variables: {\n *      getByAttributeInput: // value for 'getByAttributeInput'\n *      skip: // value for 'skip'\n *      take: // value for 'take'\n *   },\n * });\n */\nexport function usePersonByAttributeQuery(baseOptions?: Apollo.QueryHookOptions<PersonByAttributeQuery, PersonByAttributeQueryVariables>) {\n        return Apollo.useQuery<PersonByAttributeQuery, PersonByAttributeQueryVariables>(PersonByAttributeDocument, baseOptions);\n      }\nexport function usePersonByAttributeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PersonByAttributeQuery, PersonByAttributeQueryVariables>) {\n          return Apollo.useLazyQuery<PersonByAttributeQuery, PersonByAttributeQueryVariables>(PersonByAttributeDocument, baseOptions);\n        }\nexport type PersonByAttributeQueryHookResult = ReturnType<typeof usePersonByAttributeQuery>;\nexport type PersonByAttributeLazyQueryHookResult = ReturnType<typeof usePersonByAttributeLazyQuery>;\nexport type PersonByAttributeQueryResult = Apollo.QueryResult<PersonByAttributeQuery, PersonByAttributeQueryVariables>;\nexport const PersonByFiscalNumberDocument = gql`\n    query personByFiscalNumber($fiscalNumber: String!) {\n  personByFiscalNumber(fiscalNumber: $fiscalNumber) {\n    id\n    firstName\n    lastName\n    username\n    fiscalNumber\n    email\n    documentNumber\n    attributes {\n      id\n      content\n      issuedDate\n      expiresDate\n      expired\n      certifierID\n    }\n    roles\n  }\n}\n    `;\n\n/**\n * __usePersonByFiscalNumberQuery__\n *\n * To run a query within a React component, call `usePersonByFiscalNumberQuery` and pass it any options that fit your needs.\n * When your component renders, `usePersonByFiscalNumberQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePersonByFiscalNumberQuery({\n *   variables: {\n *      fiscalNumber: // value for 'fiscalNumber'\n *   },\n * });\n */\nexport function usePersonByFiscalNumberQuery(baseOptions?: Apollo.QueryHookOptions<PersonByFiscalNumberQuery, PersonByFiscalNumberQueryVariables>) {\n        return Apollo.useQuery<PersonByFiscalNumberQuery, PersonByFiscalNumberQueryVariables>(PersonByFiscalNumberDocument, baseOptions);\n      }\nexport function usePersonByFiscalNumberLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PersonByFiscalNumberQuery, PersonByFiscalNumberQueryVariables>) {\n          return Apollo.useLazyQuery<PersonByFiscalNumberQuery, PersonByFiscalNumberQueryVariables>(PersonByFiscalNumberDocument, baseOptions);\n        }\nexport type PersonByFiscalNumberQueryHookResult = ReturnType<typeof usePersonByFiscalNumberQuery>;\nexport type PersonByFiscalNumberLazyQueryHookResult = ReturnType<typeof usePersonByFiscalNumberLazyQuery>;\nexport type PersonByFiscalNumberQueryResult = Apollo.QueryResult<PersonByFiscalNumberQuery, PersonByFiscalNumberQueryVariables>;\nexport const PersonByIdDocument = gql`\n    query personById($id: String!) {\n  personById(id: $id) {\n    id\n    username\n    email\n    attributes {\n      id\n      content\n      issuedDate\n      expiresDate\n      expired\n      certifierID\n    }\n    roles\n    participant {\n      id\n      name\n      msp\n    }\n    mobilePhone\n    postal\n    city\n    region\n    geoLocation\n    timezone\n    personalInfo\n    profile\n    firstName\n    lastName\n    gender\n    height\n    fatherFirstName\n    fatherLastName\n    motherFirstName\n    motherLastName\n    birthDate\n    nationality\n    country\n    documentNumber\n    documentType\n    cardVersion\n    emissionDate\n    expirationDate\n    emittingEntity\n    identityNumber\n    fiscalNumber\n    socialSecurityNumber\n    beneficiaryNumber\n    pan\n    requestLocation\n    otherInformation\n    registrationDate\n    createdDate\n  }\n}\n    `;\n\n/**\n * __usePersonByIdQuery__\n *\n * To run a query within a React component, call `usePersonByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `usePersonByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePersonByIdQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function usePersonByIdQuery(baseOptions?: Apollo.QueryHookOptions<PersonByIdQuery, PersonByIdQueryVariables>) {\n        return Apollo.useQuery<PersonByIdQuery, PersonByIdQueryVariables>(PersonByIdDocument, baseOptions);\n      }\nexport function usePersonByIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PersonByIdQuery, PersonByIdQueryVariables>) {\n          return Apollo.useLazyQuery<PersonByIdQuery, PersonByIdQueryVariables>(PersonByIdDocument, baseOptions);\n        }\nexport type PersonByIdQueryHookResult = ReturnType<typeof usePersonByIdQuery>;\nexport type PersonByIdLazyQueryHookResult = ReturnType<typeof usePersonByIdLazyQuery>;\nexport type PersonByIdQueryResult = Apollo.QueryResult<PersonByIdQuery, PersonByIdQueryVariables>;\nexport const PersonByUsernameDocument = gql`\n    query personByUsername($username: String!) {\n  personByUsername(username: $username) {\n    id\n    firstName\n    lastName\n    username\n    email\n    attributes {\n      id\n      content\n      issuedDate\n      expiresDate\n      expired\n      certifierID\n    }\n    roles\n    participant {\n      id\n      name\n      msp\n    }\n    createdDate\n  }\n}\n    `;\n\n/**\n * __usePersonByUsernameQuery__\n *\n * To run a query within a React component, call `usePersonByUsernameQuery` and pass it any options that fit your needs.\n * When your component renders, `usePersonByUsernameQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePersonByUsernameQuery({\n *   variables: {\n *      username: // value for 'username'\n *   },\n * });\n */\nexport function usePersonByUsernameQuery(baseOptions?: Apollo.QueryHookOptions<PersonByUsernameQuery, PersonByUsernameQueryVariables>) {\n        return Apollo.useQuery<PersonByUsernameQuery, PersonByUsernameQueryVariables>(PersonByUsernameDocument, baseOptions);\n      }\nexport function usePersonByUsernameLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PersonByUsernameQuery, PersonByUsernameQueryVariables>) {\n          return Apollo.useLazyQuery<PersonByUsernameQuery, PersonByUsernameQueryVariables>(PersonByUsernameDocument, baseOptions);\n        }\nexport type PersonByUsernameQueryHookResult = ReturnType<typeof usePersonByUsernameQuery>;\nexport type PersonByUsernameLazyQueryHookResult = ReturnType<typeof usePersonByUsernameLazyQuery>;\nexport type PersonByUsernameQueryResult = Apollo.QueryResult<PersonByUsernameQuery, PersonByUsernameQueryVariables>;\nexport const PersonComplexQueryDocument = gql`\n    query personComplexQuery($getByComplexQueryInput: GetByComplexQueryInput!, $skip: Int, $take: Int) {\n  personComplexQuery(getByComplexQueryInput: $getByComplexQueryInput, skip: $skip, take: $take) {\n    id\n    firstName\n    lastName\n    username\n    fiscalNumber\n    email\n    attributes {\n      id\n      content\n      issuedDate\n      expiresDate\n      expired\n      certifierID\n    }\n    roles\n    createdDate\n    metaData\n    metaDataInternal\n  }\n}\n    `;\n\n/**\n * __usePersonComplexQueryQuery__\n *\n * To run a query within a React component, call `usePersonComplexQueryQuery` and pass it any options that fit your needs.\n * When your component renders, `usePersonComplexQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePersonComplexQueryQuery({\n *   variables: {\n *      getByComplexQueryInput: // value for 'getByComplexQueryInput'\n *      skip: // value for 'skip'\n *      take: // value for 'take'\n *   },\n * });\n */\nexport function usePersonComplexQueryQuery(baseOptions?: Apollo.QueryHookOptions<PersonComplexQueryQuery, PersonComplexQueryQueryVariables>) {\n        return Apollo.useQuery<PersonComplexQueryQuery, PersonComplexQueryQueryVariables>(PersonComplexQueryDocument, baseOptions);\n      }\nexport function usePersonComplexQueryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PersonComplexQueryQuery, PersonComplexQueryQueryVariables>) {\n          return Apollo.useLazyQuery<PersonComplexQueryQuery, PersonComplexQueryQueryVariables>(PersonComplexQueryDocument, baseOptions);\n        }\nexport type PersonComplexQueryQueryHookResult = ReturnType<typeof usePersonComplexQueryQuery>;\nexport type PersonComplexQueryLazyQueryHookResult = ReturnType<typeof usePersonComplexQueryLazyQuery>;\nexport type PersonComplexQueryQueryResult = Apollo.QueryResult<PersonComplexQueryQuery, PersonComplexQueryQueryVariables>;\nexport const PersonProfileDocument = gql`\n    query personProfile {\n  personProfile {\n    id\n    username\n    email\n    attributes {\n      id\n      content\n      issuedDate\n      expiresDate\n      expired\n      certifierID\n    }\n    roles\n    participant {\n      id\n      name\n      msp\n    }\n    mobilePhone\n    postal\n    city\n    region\n    geoLocation\n    timezone\n    personalInfo\n    profile\n    firstName\n    lastName\n    gender\n    height\n    fatherFirstName\n    fatherLastName\n    motherFirstName\n    motherLastName\n    birthDate\n    nationality\n    country\n    documentNumber\n    documentType\n    cardVersion\n    emissionDate\n    expirationDate\n    emittingEntity\n    identityNumber\n    fiscalNumber\n    socialSecurityNumber\n    beneficiaryNumber\n    pan\n    requestLocation\n    otherInformation\n    registrationDate\n    createdDate\n  }\n}\n    `;\n\n/**\n * __usePersonProfileQuery__\n *\n * To run a query within a React component, call `usePersonProfileQuery` and pass it any options that fit your needs.\n * When your component renders, `usePersonProfileQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePersonProfileQuery({\n *   variables: {\n *   },\n * });\n */\nexport function usePersonProfileQuery(baseOptions?: Apollo.QueryHookOptions<PersonProfileQuery, PersonProfileQueryVariables>) {\n        return Apollo.useQuery<PersonProfileQuery, PersonProfileQueryVariables>(PersonProfileDocument, baseOptions);\n      }\nexport function usePersonProfileLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PersonProfileQuery, PersonProfileQueryVariables>) {\n          return Apollo.useLazyQuery<PersonProfileQuery, PersonProfileQueryVariables>(PersonProfileDocument, baseOptions);\n        }\nexport type PersonProfileQueryHookResult = ReturnType<typeof usePersonProfileQuery>;\nexport type PersonProfileLazyQueryHookResult = ReturnType<typeof usePersonProfileLazyQuery>;\nexport type PersonProfileQueryResult = Apollo.QueryResult<PersonProfileQuery, PersonProfileQueryVariables>;\nexport const PersonsDocument = gql`\n    query persons($skip: Int, $take: Int) {\n  persons(skip: $skip, take: $take) {\n    id\n    username\n    email\n    attributes {\n      id\n      content\n      issuedDate\n      expiresDate\n      expired\n      certifierID\n    }\n    roles\n    participant {\n      id\n      code\n      name\n      email\n      fiscalNumber\n      ambassadors\n      fundsBalance {\n        debit\n        credit\n        balance\n      }\n      volunteeringHoursBalance {\n        debit\n        credit\n        balance\n      }\n      name\n      msp\n      createdDate\n    }\n    mobilePhone\n    postal\n    city\n    region\n    geoLocation\n    timezone\n    personalInfo\n    profile\n    fundsBalance {\n      debit\n      credit\n      balance\n    }\n    volunteeringHoursBalance {\n      debit\n      credit\n      balance\n    }\n    goodsStock {\n      id\n      code\n      barCode\n      name\n      description\n      tags\n      balance {\n        debit\n        credit\n        balance\n      }\n      metaData\n      metaDataInternal\n      createdDate\n      createdByPersonId\n    }\n    firstName\n    lastName\n    gender\n    height\n    fatherFirstName\n    fatherLastName\n    motherFirstName\n    motherLastName\n    birthDate\n    nationality\n    country\n    documentNumber\n    documentType\n    cardVersion\n    emissionDate\n    expirationDate\n    emittingEntity\n    identityNumber\n    fiscalNumber\n    socialSecurityNumber\n    beneficiaryNumber\n    pan\n    requestLocation\n    otherInformation\n    registrationDate\n    createdDate\n  }\n}\n    `;\n\n/**\n * __usePersonsQuery__\n *\n * To run a query within a React component, call `usePersonsQuery` and pass it any options that fit your needs.\n * When your component renders, `usePersonsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePersonsQuery({\n *   variables: {\n *      skip: // value for 'skip'\n *      take: // value for 'take'\n *   },\n * });\n */\nexport function usePersonsQuery(baseOptions?: Apollo.QueryHookOptions<PersonsQuery, PersonsQueryVariables>) {\n        return Apollo.useQuery<PersonsQuery, PersonsQueryVariables>(PersonsDocument, baseOptions);\n      }\nexport function usePersonsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PersonsQuery, PersonsQueryVariables>) {\n          return Apollo.useLazyQuery<PersonsQuery, PersonsQueryVariables>(PersonsDocument, baseOptions);\n        }\nexport type PersonsQueryHookResult = ReturnType<typeof usePersonsQuery>;\nexport type PersonsLazyQueryHookResult = ReturnType<typeof usePersonsLazyQuery>;\nexport type PersonsQueryResult = Apollo.QueryResult<PersonsQuery, PersonsQueryVariables>;\nexport const ReactForceDataDocument = gql`\n    query reactForceData($skip: Int, $take: Int) {\n  reactForceData(skip: $skip, take: $take) {\n    nodes {\n      id\n      label\n      desc\n      nodeVal\n      color\n      autoColorBy\n      group\n    }\n    links {\n      source\n      target\n      label\n      desc\n      color\n      autoColorBy\n      group\n    }\n  }\n}\n    `;\n\n/**\n * __useReactForceDataQuery__\n *\n * To run a query within a React component, call `useReactForceDataQuery` and pass it any options that fit your needs.\n * When your component renders, `useReactForceDataQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useReactForceDataQuery({\n *   variables: {\n *      skip: // value for 'skip'\n *      take: // value for 'take'\n *   },\n * });\n */\nexport function useReactForceDataQuery(baseOptions?: Apollo.QueryHookOptions<ReactForceDataQuery, ReactForceDataQueryVariables>) {\n        return Apollo.useQuery<ReactForceDataQuery, ReactForceDataQueryVariables>(ReactForceDataDocument, baseOptions);\n      }\nexport function useReactForceDataLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ReactForceDataQuery, ReactForceDataQueryVariables>) {\n          return Apollo.useLazyQuery<ReactForceDataQuery, ReactForceDataQueryVariables>(ReactForceDataDocument, baseOptions);\n        }\nexport type ReactForceDataQueryHookResult = ReturnType<typeof useReactForceDataQuery>;\nexport type ReactForceDataLazyQueryHookResult = ReturnType<typeof useReactForceDataLazyQuery>;\nexport type ReactForceDataQueryResult = Apollo.QueryResult<ReactForceDataQuery, ReactForceDataQueryVariables>;\nexport const TransactionsByIdDocument = gql`\n    query transactionsById($id: String!) {\n  transactionById(id: $id) {\n    id\n    transactionType\n    resourceType\n    assetId\n    input {\n      entity {\n        id\n        type\n      }\n    }\n    output {\n      entity {\n        id\n        type\n      }\n    }\n    quantity\n    currency\n    goods {\n      id\n      code\n      barCode\n      name\n      description\n      tags\n      balance {\n        debit\n        credit\n        balance\n      }\n      metaData\n      metaDataInternal\n      createdDate\n      createdByPersonId\n    }\n    location\n    tags\n    participant {\n      id\n      name\n      msp\n    }\n    createdDate\n    createdByPersonId\n    metaData\n    metaDataInternal\n  }\n}\n    `;\n\n/**\n * __useTransactionsByIdQuery__\n *\n * To run a query within a React component, call `useTransactionsByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useTransactionsByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTransactionsByIdQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useTransactionsByIdQuery(baseOptions?: Apollo.QueryHookOptions<TransactionsByIdQuery, TransactionsByIdQueryVariables>) {\n        return Apollo.useQuery<TransactionsByIdQuery, TransactionsByIdQueryVariables>(TransactionsByIdDocument, baseOptions);\n      }\nexport function useTransactionsByIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TransactionsByIdQuery, TransactionsByIdQueryVariables>) {\n          return Apollo.useLazyQuery<TransactionsByIdQuery, TransactionsByIdQueryVariables>(TransactionsByIdDocument, baseOptions);\n        }\nexport type TransactionsByIdQueryHookResult = ReturnType<typeof useTransactionsByIdQuery>;\nexport type TransactionsByIdLazyQueryHookResult = ReturnType<typeof useTransactionsByIdLazyQuery>;\nexport type TransactionsByIdQueryResult = Apollo.QueryResult<TransactionsByIdQuery, TransactionsByIdQueryVariables>;\nexport const TransactionComplexQueryDocument = gql`\n    query transactionComplexQuery($getByComplexQueryInput: GetByComplexQueryInput!, $skip: Int, $take: Int) {\n  transactionComplexQuery(getByComplexQueryInput: $getByComplexQueryInput, skip: $skip, take: $take) {\n    id\n    transactionType\n    resourceType\n    assetId\n    input {\n      entity {\n        id\n        type\n      }\n    }\n    output {\n      entity {\n        id\n        type\n      }\n    }\n    quantity\n    currency\n    location\n    tags\n    participant {\n      id\n      name\n      msp\n    }\n    createdDate\n    createdByPersonId\n    metaData\n    metaDataInternal\n  }\n}\n    `;\n\n/**\n * __useTransactionComplexQueryQuery__\n *\n * To run a query within a React component, call `useTransactionComplexQueryQuery` and pass it any options that fit your needs.\n * When your component renders, `useTransactionComplexQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTransactionComplexQueryQuery({\n *   variables: {\n *      getByComplexQueryInput: // value for 'getByComplexQueryInput'\n *      skip: // value for 'skip'\n *      take: // value for 'take'\n *   },\n * });\n */\nexport function useTransactionComplexQueryQuery(baseOptions?: Apollo.QueryHookOptions<TransactionComplexQueryQuery, TransactionComplexQueryQueryVariables>) {\n        return Apollo.useQuery<TransactionComplexQueryQuery, TransactionComplexQueryQueryVariables>(TransactionComplexQueryDocument, baseOptions);\n      }\nexport function useTransactionComplexQueryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TransactionComplexQueryQuery, TransactionComplexQueryQueryVariables>) {\n          return Apollo.useLazyQuery<TransactionComplexQueryQuery, TransactionComplexQueryQueryVariables>(TransactionComplexQueryDocument, baseOptions);\n        }\nexport type TransactionComplexQueryQueryHookResult = ReturnType<typeof useTransactionComplexQueryQuery>;\nexport type TransactionComplexQueryLazyQueryHookResult = ReturnType<typeof useTransactionComplexQueryLazyQuery>;\nexport type TransactionComplexQueryQueryResult = Apollo.QueryResult<TransactionComplexQueryQuery, TransactionComplexQueryQueryVariables>;\nexport const TransactionsDocument = gql`\n    query transactions($skip: Int, $take: Int) {\n  transactions(skip: $skip, take: $take) {\n    id\n    transactionType\n    resourceType\n    assetId\n    input {\n      entity {\n        id\n        type\n      }\n    }\n    output {\n      entity {\n        id\n        type\n      }\n    }\n    quantity\n    currency\n    location\n    tags\n    participant {\n      id\n      name\n      msp\n    }\n    createdDate\n    createdByPersonId\n    metaData\n    metaDataInternal\n  }\n}\n    `;\n\n/**\n * __useTransactionsQuery__\n *\n * To run a query within a React component, call `useTransactionsQuery` and pass it any options that fit your needs.\n * When your component renders, `useTransactionsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTransactionsQuery({\n *   variables: {\n *      skip: // value for 'skip'\n *      take: // value for 'take'\n *   },\n * });\n */\nexport function useTransactionsQuery(baseOptions?: Apollo.QueryHookOptions<TransactionsQuery, TransactionsQueryVariables>) {\n        return Apollo.useQuery<TransactionsQuery, TransactionsQueryVariables>(TransactionsDocument, baseOptions);\n      }\nexport function useTransactionsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TransactionsQuery, TransactionsQueryVariables>) {\n          return Apollo.useLazyQuery<TransactionsQuery, TransactionsQueryVariables>(TransactionsDocument, baseOptions);\n        }\nexport type TransactionsQueryHookResult = ReturnType<typeof useTransactionsQuery>;\nexport type TransactionsLazyQueryHookResult = ReturnType<typeof useTransactionsLazyQuery>;\nexport type TransactionsQueryResult = Apollo.QueryResult<TransactionsQuery, TransactionsQueryVariables>;\nexport const AssetAddedDocument = gql`\n    subscription assetAdded {\n  assetAdded {\n    id\n    name\n    description\n    assetType\n    ambassadors\n    owner {\n      entity {\n        id\n        type\n      }\n    }\n    location\n    tags\n    metaData\n  }\n}\n    `;\n\n/**\n * __useAssetAddedSubscription__\n *\n * To run a query within a React component, call `useAssetAddedSubscription` and pass it any options that fit your needs.\n * When your component renders, `useAssetAddedSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAssetAddedSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useAssetAddedSubscription(baseOptions?: Apollo.SubscriptionHookOptions<AssetAddedSubscription, AssetAddedSubscriptionVariables>) {\n        return Apollo.useSubscription<AssetAddedSubscription, AssetAddedSubscriptionVariables>(AssetAddedDocument, baseOptions);\n      }\nexport type AssetAddedSubscriptionHookResult = ReturnType<typeof useAssetAddedSubscription>;\nexport type AssetAddedSubscriptionResult = Apollo.SubscriptionResult<AssetAddedSubscription>;\nexport const CauseAddedDocument = gql`\n    subscription causeAdded {\n  causeAdded {\n    id\n    name\n    ambassadors\n    startDate\n    endDate\n    location\n    tags\n    metaData\n    input {\n      entity {\n        id\n      }\n    }\n    createdDate\n  }\n}\n    `;\n\n/**\n * __useCauseAddedSubscription__\n *\n * To run a query within a React component, call `useCauseAddedSubscription` and pass it any options that fit your needs.\n * When your component renders, `useCauseAddedSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCauseAddedSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useCauseAddedSubscription(baseOptions?: Apollo.SubscriptionHookOptions<CauseAddedSubscription, CauseAddedSubscriptionVariables>) {\n        return Apollo.useSubscription<CauseAddedSubscription, CauseAddedSubscriptionVariables>(CauseAddedDocument, baseOptions);\n      }\nexport type CauseAddedSubscriptionHookResult = ReturnType<typeof useCauseAddedSubscription>;\nexport type CauseAddedSubscriptionResult = Apollo.SubscriptionResult<CauseAddedSubscription>;\nexport const ParticipantAddedDocument = gql`\n    subscription participantAdded {\n  participantAdded {\n    id\n    name\n    msp\n  }\n}\n    `;\n\n/**\n * __useParticipantAddedSubscription__\n *\n * To run a query within a React component, call `useParticipantAddedSubscription` and pass it any options that fit your needs.\n * When your component renders, `useParticipantAddedSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useParticipantAddedSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useParticipantAddedSubscription(baseOptions?: Apollo.SubscriptionHookOptions<ParticipantAddedSubscription, ParticipantAddedSubscriptionVariables>) {\n        return Apollo.useSubscription<ParticipantAddedSubscription, ParticipantAddedSubscriptionVariables>(ParticipantAddedDocument, baseOptions);\n      }\nexport type ParticipantAddedSubscriptionHookResult = ReturnType<typeof useParticipantAddedSubscription>;\nexport type ParticipantAddedSubscriptionResult = Apollo.SubscriptionResult<ParticipantAddedSubscription>;\nexport const PersonAddedDocument = gql`\n    subscription personAdded {\n  personAdded {\n    id\n    firstName\n    lastName\n    username\n    email\n    attributes {\n      id\n      content\n      issuedDate\n      expiresDate\n      expired\n      certifierID\n    }\n    roles\n    participant {\n      id\n      name\n      msp\n    }\n  }\n}\n    `;\n\n/**\n * __usePersonAddedSubscription__\n *\n * To run a query within a React component, call `usePersonAddedSubscription` and pass it any options that fit your needs.\n * When your component renders, `usePersonAddedSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePersonAddedSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function usePersonAddedSubscription(baseOptions?: Apollo.SubscriptionHookOptions<PersonAddedSubscription, PersonAddedSubscriptionVariables>) {\n        return Apollo.useSubscription<PersonAddedSubscription, PersonAddedSubscriptionVariables>(PersonAddedDocument, baseOptions);\n      }\nexport type PersonAddedSubscriptionHookResult = ReturnType<typeof usePersonAddedSubscription>;\nexport type PersonAddedSubscriptionResult = Apollo.SubscriptionResult<PersonAddedSubscription>;\nexport const PersonLoggedDocument = gql`\n    subscription personLogged {\n  personLogged\n}\n    `;\n\n/**\n * __usePersonLoggedSubscription__\n *\n * To run a query within a React component, call `usePersonLoggedSubscription` and pass it any options that fit your needs.\n * When your component renders, `usePersonLoggedSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePersonLoggedSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function usePersonLoggedSubscription(baseOptions?: Apollo.SubscriptionHookOptions<PersonLoggedSubscription, PersonLoggedSubscriptionVariables>) {\n        return Apollo.useSubscription<PersonLoggedSubscription, PersonLoggedSubscriptionVariables>(PersonLoggedDocument, baseOptions);\n      }\nexport type PersonLoggedSubscriptionHookResult = ReturnType<typeof usePersonLoggedSubscription>;\nexport type PersonLoggedSubscriptionResult = Apollo.SubscriptionResult<PersonLoggedSubscription>;\nexport const TransactionAddedDocument = gql`\n    subscription transactionAdded {\n  transactionAdded {\n    id\n    transactionType\n    resourceType\n    input {\n      entity {\n        id\n        type\n        createdDate\n      }\n    }\n    output {\n      entity {\n        id\n        type\n        createdDate\n      }\n    }\n    quantity\n    currency\n    location\n    tags\n    metaData\n    metaDataInternal\n    participant {\n      id\n      name\n      msp\n    }\n    createdDate\n  }\n}\n    `;\n\n/**\n * __useTransactionAddedSubscription__\n *\n * To run a query within a React component, call `useTransactionAddedSubscription` and pass it any options that fit your needs.\n * When your component renders, `useTransactionAddedSubscription` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the subscription, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTransactionAddedSubscription({\n *   variables: {\n *   },\n * });\n */\nexport function useTransactionAddedSubscription(baseOptions?: Apollo.SubscriptionHookOptions<TransactionAddedSubscription, TransactionAddedSubscriptionVariables>) {\n        return Apollo.useSubscription<TransactionAddedSubscription, TransactionAddedSubscriptionVariables>(TransactionAddedDocument, baseOptions);\n      }\nexport type TransactionAddedSubscriptionHookResult = ReturnType<typeof useTransactionAddedSubscription>;\nexport type TransactionAddedSubscriptionResult = Apollo.SubscriptionResult<TransactionAddedSubscription>;","import React from 'react';\nimport Alert from '@material-ui/lab/Alert';\nimport AlertTitle from '@material-ui/lab/AlertTitle';\n\nexport enum AlertSeverityType {\n  ERROR = 'error',\n  WARNING = 'warning',\n  INFO = 'info',\n  SUCCESS = 'success',\n}\n\ninterface Props {\n  title?: string;\n  message: string;\n  severity: AlertSeverityType;\n  className?: string;\n}\n\nexport const AlertMessage: React.FC<Props> = ({title, message, severity, className}) => {\n  return (\n    <Alert severity={severity} className={className}>\n      {title && <AlertTitle>{title}</AlertTitle>}\n      {message}\n    </Alert>\n  )\n}\n","import { ApolloClient, ApolloLink, HttpLink, InMemoryCache, Observable, split } from '@apollo/client';\nimport { WebSocketLink } from '@apollo/client/link/ws';\nimport { getMainDefinition } from '@apollo/client/utilities';\nimport { getAccessToken, setAccessToken } from '../access-token';\nimport { envVariables as e } from './env';\nimport jwtDecode from 'jwt-decode';\nimport { TokenRefreshLink } from 'apollo-link-token-refresh';\nimport https from 'https';\nimport { onError } from '@apollo/link-error';\n\n// Apollo client 3: client config\n// https://www.apollographql.com/docs/react/data/subscriptions/\n\n// apolloLinkTokenRefresh\nconst refreshLink = new TokenRefreshLink({\n  // define accessToken field\n  accessTokenField: 'accessToken',\n  // check if current accessToken is valid\n  isTokenValidOrUndefined: () => {\n    const accessToken = getAccessToken();\n    // invalid Token\n    if (!accessToken) {\n      return true;\n    }\n    // check if valid Token is not Expired\n    try {\n      const { exp } = jwtDecode(accessToken);\n      // if current time is greater than exp\n      return (Date.now() >= exp * 1000) ? false : true;\n    } catch (error) {\n      return false;\n    }\n  },\n  // if not valid, request a new accessToken with refreshToken\n  fetchAccessToken: () => {\n    return fetch(`${e.restServerHttpUri}/refresh-token`, {\n      method: 'POST',\n      credentials: 'include',\n    });\n  },\n  // handle fetch accessToken\n  handleFetch: accessToken => {\n    // set inMemory accessToken\n    setAccessToken(accessToken);\n  },\n  // handle Response\n  // handleResponse: (operation, accessTokenField) => response => {\n  //   // here you can parse response, handle errors, prepare returned token to\n  //   // further operations\n  //   // returned object should be like this:\n  //   // {\n  //   //    access_token: 'token string here'\n  //   // }\n  // },\n  handleError: err => {\n    // full control over handling token fetch Error\n    // TODO refresh jwt token here\n    debugger;\n    console.warn('Your refresh token is invalid. Try to re-login');\n    console.error(err);\n    // your custom action here\n    // user.logout();\n  }\n});\n\nconst requestLink = new ApolloLink((operation, forward) =>\n  new Observable(observer => {\n    let handle: any;\n    // add breakpoint here to debug graphql operations\n    Promise.resolve(operation)\n      .then(operation => {\n        // get inMemory accessToken from global variable\n        const accessToken = getAccessToken();\n        console.log(`requestLink with accessToken ${accessToken}`);\n        // if have accessToken, add authorization headers\n        if (accessToken) {\n          operation.setContext({\n            headers: {\n              authorization: `Bearer ${accessToken}`\n            }\n          })\n        }\n      })\n      .then(() => {\n        handle = forward(operation).subscribe({\n          next: observer.next.bind(observer),\n          error: observer.error.bind(observer),\n          complete: observer.complete.bind(observer),\n        });\n      })\n      .catch(observer.error.bind(observer));\n    return () => {\n      if (handle) handle.unsubscribe();\n    };\n  })\n);\n\nconst httpLink = new HttpLink({\n  uri: e.graphqlServerHttpUri,\n  fetchOptions: {\n    // How to avoid \"self signed certificate\" error?\n    agent: new https.Agent({ rejectUnauthorized: e.apolloRejectUnauthorized }),\n  },\n  // required, else we can't receive jid cookie\n  credentials: 'include',\n});\n\nconst wsLink = new WebSocketLink({\n  uri: e.graphqlServerWsUri,\n  options: {\n    reconnect: true,\n    // here we can send arbitrary data to be passed to server\n    // ex server catch with `const authToken: string = ('authorization' in connectionParamsLowerKeys)`\n    connectionParams: () => ({\n      authorization: `Bearer ${getAccessToken()}`,\n    }),\n    lazy: true,\n  },\n});\n\n// The split function takes three parameters:\n// * A function that's called for each operation to execute\n// * The Link to use for an operation if the function returns a \"truthy\" value\n// * The Link to use for an operation if the function returns a \"falsy\" value\nconst splitLink = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query);\n    return (\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'subscription'\n    );\n  },\n  // detected wsLink\n  wsLink,\n  // detected httpLink\n  httpLink,\n);\n\nconst client = new ApolloClient({\n  connectToDevTools: true,\n  cache: new InMemoryCache(),\n  // require to use Additive composition to compose splitLink, requestLink\n  link: ApolloLink.from([\n    // apolloLinkTokenRefresh\n    refreshLink,\n    // normal apolloLink stuff\n    onError(({ graphQLErrors, networkError }) => {\n      if (graphQLErrors && e.reactAppApolloShowGraphqlErrors) {\n        console.error(graphQLErrors);\n      }\n      if (networkError && e.reactAppApolloShowNetworkError) {\n        console.error(networkError);\n      }\n    }),\n    // requestLink\n    requestLink,\n    // splitLink\n    splitLink,\n  ]),\n});\n\nexport default client;","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\n\ninterface Props {  }\n\nexport const PageTitle: React.FC<Props> = (props) => {\n  return (\n    <Typography variant='h4'>{props.children}</Typography>\n  );\n};","import React from 'react';\nimport Link from '@material-ui/core/Link';\nimport Typography from '@material-ui/core/Typography';\n\nexport interface Props {\n  copyrightName: string;\n  copyrightUri: string;\n}\n\nexport const Copyright: React.FC<Props> = (props) => {\n  return (\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n      {'Copyright © '}\n      <Link color=\"inherit\" href={props.copyrightUri}>\n        {props.copyrightName}\n      </Link>{' '}\n      {new Date().getFullYear()}\n    </Typography>\n  );\n};","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"defs\", null, /*#__PURE__*/React.createElement(\"style\", null, \".cls-1{fill:#fff;}.cls-2{fill:#f6a316;}.cls-3{fill:#e52421;}.cls-4{fill:#078136;}.cls-5{fill:#462778;}.cls-6{fill:#2a4b9b;}.cls-7{fill:#f3e600;}.cls-8{fill:#c688bb;}.cls-9{opacity:0.5;}\"), /*#__PURE__*/React.createElement(\"symbol\", {\n  id: \"MainLogo\",\n  \"data-name\": \"MainLogo\",\n  viewBox: \"0 0 284.45 256.36\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  className: \"cls-1\",\n  d: \"M174.92,54.58a43.57,43.57,0,0,0-32.76,14.8,43.67,43.67,0,1,0-59.83,63.15l59.88,59.83L202,132.5a43.67,43.67,0,0,0-27.1-77.92ZM163.5,120.85l-21.29,21.3-21.3-21.29A15.54,15.54,0,1,1,142.2,98.39a15.54,15.54,0,1,1,21.3,22.46Z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  className: \"cls-2\",\n  d: \"M193.32,58.68l50.81-32.4a74.52,74.52,0,0,0-92.41.47l3.47,32.69a43.68,43.68,0,0,1,38.13-.76Z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  className: \"cls-3\",\n  d: \"M129.27,59.44l3.46-32.69a74.52,74.52,0,0,0-92.41-.47l50.81,32.4a43.7,43.7,0,0,1,38.14.76Z\"\n}), /*#__PURE__*/React.createElement(\"polyline\", {\n  className: \"cls-4\",\n  points: \"244.52 143.61 244 144.13 196.44 138.44 177.65 157.25 191.68 196.49\"\n}), /*#__PURE__*/React.createElement(\"polygon\", {\n  className: \"cls-5\",\n  points: \"92.8 196.43 106.81 157.22 88.03 138.44 40.46 144.13 39.99 143.66 92.86 196.49 92.86 196.49 92.8 196.43\"\n}), /*#__PURE__*/React.createElement(\"polygon\", {\n  className: \"cls-6\",\n  points: \"179.47 208.71 159.11 175.8 142.27 192.65 125.37 175.76 105.02 208.64 104.81 208.44 104.81 208.44 142.31 245.9 179.47 208.71\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  className: \"cls-7\",\n  d: \"M250.84,32.18,210.15,72.33A43.73,43.73,0,0,1,214,118.24l41.78,14.31a74.57,74.57,0,0,0-4.95-100.37Z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  className: \"cls-8\",\n  d: \"M74.31,72.33,33.61,32.18a74.57,74.57,0,0,0-4.95,100.37l41.78-14.31a43.71,43.71,0,0,1,3.87-45.91Z\"\n}), /*#__PURE__*/React.createElement(\"polygon\", {\n  className: \"cls-6\",\n  points: \"125.37 175.76 142.27 192.65 159.11 175.8 142.23 148.53 125.37 175.76\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  className: \"cls-2\",\n  d: \"M193.32,58.68a43.68,43.68,0,0,0-38.13.76l2.33,22.08Z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  className: \"cls-7\",\n  d: \"M210.15,72.33l-33.56,33.1L214,118.24a43.73,43.73,0,0,0-3.86-45.91Z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  className: \"cls-3\",\n  d: \"M129.27,59.44a43.7,43.7,0,0,0-38.14-.76l35.8,22.84Z\"\n}), /*#__PURE__*/React.createElement(\"polygon\", {\n  className: \"cls-4\",\n  points: \"177.65 157.25 196.44 138.44 169.79 135.26 177.65 157.25\"\n}), /*#__PURE__*/React.createElement(\"polygon\", {\n  className: \"cls-5\",\n  points: \"114.66 135.26 88.03 138.44 106.81 157.22 114.66 135.26\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  className: \"cls-8\",\n  d: \"M74.31,72.33a43.71,43.71,0,0,0-3.87,45.91l37.42-12.81Z\"\n}), /*#__PURE__*/React.createElement(\"g\", {\n  className: \"cls-9\"\n}, /*#__PURE__*/React.createElement(\"polygon\", {\n  className: \"cls-1\",\n  points: \"125.37 175.76 142.27 192.65 159.11 175.8 142.23 148.53 125.37 175.76\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  className: \"cls-1\",\n  d: \"M193.32,58.68a43.68,43.68,0,0,0-38.13.76l2.33,22.08Z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  className: \"cls-1\",\n  d: \"M210.15,72.33l-33.56,33.1L214,118.24a43.73,43.73,0,0,0-3.86-45.91Z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  className: \"cls-1\",\n  d: \"M129.27,59.44a43.7,43.7,0,0,0-38.14-.76l35.8,22.84Z\"\n}), /*#__PURE__*/React.createElement(\"polygon\", {\n  className: \"cls-1\",\n  points: \"177.65 157.25 196.44 138.44 169.79 135.26 177.65 157.25\"\n}), /*#__PURE__*/React.createElement(\"polygon\", {\n  className: \"cls-1\",\n  points: \"114.66 135.26 88.03 138.44 106.81 157.22 114.66 135.26\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  className: \"cls-1\",\n  d: \"M74.31,72.33a43.71,43.71,0,0,0-3.87,45.91l37.42-12.81Z\"\n}))));\n\nvar _ref3 = /*#__PURE__*/React.createElement(\"title\", null, \"Asset 3\");\n\nvar _ref4 = /*#__PURE__*/React.createElement(\"g\", {\n  id: \"Layer_2\",\n  \"data-name\": \"Layer 2\"\n}, /*#__PURE__*/React.createElement(\"g\", {\n  id: \"Layer_1-2\",\n  \"data-name\": \"Layer 1\"\n}, /*#__PURE__*/React.createElement(\"g\", {\n  id: \"V4\"\n}, /*#__PURE__*/React.createElement(\"g\", {\n  id: \"Front\"\n}, /*#__PURE__*/React.createElement(\"use\", {\n  width: 284.45,\n  height: 256.36,\n  transform: \"scale(1.21)\",\n  xlinkHref: \"#MainLogo\"\n})))));\n\nvar SvgLogoIcon = function SvgLogoIcon(_ref) {\n  var svgRef = _ref.svgRef,\n      title = _ref.title,\n      props = _objectWithoutProperties(_ref, [\"svgRef\", \"title\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    viewBox: \"0 0 344 310.03\",\n    ref: svgRef\n  }, props), _ref2, title === undefined ? _ref3 : title ? /*#__PURE__*/React.createElement(\"title\", null, title) : null, _ref4);\n};\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  return /*#__PURE__*/React.createElement(SvgLogoIcon, _extends({\n    svgRef: ref\n  }, props));\n});\nexport default __webpack_public_path__ + \"static/media/LogoIcon.b82a644a.svg\";\nexport { ForwardRef as ReactComponent };","import { Grid, Link } from '@material-ui/core';\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport Container from '@material-ui/core/Container';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport { makeStyles, Theme } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport React, { useEffect, useRef, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { RouteComponentProps } from 'react-router';\nimport { appConstants as c, mokeFormData, setAccessToken } from '../../app';\nimport { commonFormFieldPassword, commonFormFieldUsername, envVariables as e, formCommonOptions, RouteKey, routes } from '../../app/config';\nimport { ActionType, useStateValue } from '../../app/state';\nimport { AlertMessage, AlertSeverityType } from '../../components/material-ui/alert-message/AlertMessage';\nimport { LinearIndeterminate } from '../../components/material-ui/feedback';\nimport { Copyright, Props as CopyrightProps } from '../../components/material-ui/other/Copyright';\nimport { LoginPersonInput, PersonProfileDocument, usePersonLoginMutation } from '../../generated/graphql';\nimport { ReactComponent as LogoIcon } from '../../icons/LogoIcon.svg';\nimport { FormDefaultValues, FormPropFields } from '../../types';\nimport { generateFormDefinition } from '../../utils';\n\nexport const useStyles = makeStyles((theme: Theme) => ({\n\tpaper: {\n\t\tmarginTop: theme.spacing(8),\n\t\tdisplay: 'flex',\n\t\tflexDirection: 'column',\n\t\talignItems: 'center',\n\t},\n\tavatar: {\n\t\tmargin: theme.spacing(1),\n\t\tbackgroundColor: theme.palette.secondary.main,\n\t},\n\tform: {\n\t\t// Fix IE 11 issue.\n\t\twidth: '100%',\n\t\tmarginTop: theme.spacing(1),\n\t},\n\tspacerTop: {\n\t\tmarginTop: theme.spacing(2),\n\t},\n}));\n\ntype FormInputs = {\n\tusername: string;\n\tpassword: string;\n};\nenum FormFieldNames {\n\tUSERNAME = 'username',\n\tPASSWORD = 'password',\n};\nconst defaultValues: FormDefaultValues = {\n\tusername: mokeFormData ? c.DEFAULT_LOGIN_CREDENTIALS.username : '',\n\tpassword: mokeFormData ? c.DEFAULT_LOGIN_CREDENTIALS.password : '',\n};\n\nexport const copyrightProps: CopyrightProps = {\n\tcopyrightName: e.appCopyrightName,\n\tcopyrightUri: e.appCopyrightUri,\n}\n\n// use RouteComponentProps to get history props from Route\nexport const SignInPage: React.FC<RouteComponentProps> = ({ history, location }) => {\n\t// styles\n\tconst classes = useStyles();\n\t// get hooks\n\tconst [state, dispatch] = useStateValue();\n\t// hooks react form\n\tconst { handleSubmit, errors, control } = useForm<FormInputs>({ defaultValues, ...formCommonOptions });\n\tconst [showPassword, setShowPassword] = useState(false);\n\t// hooks: apollo\n\tconst [personLoginMutation, { loading, error: apolloError }] = usePersonLoginMutation();\n\n\t// require to clean up message after render\n\tuseEffect(() => {\n\t\tsetTimeout(() => {\n\t\t\tdispatch({ type: ActionType.RESULT_MESSAGE, payload: {} });\n\t\t}, c.VALUES.resultMessageTimeOut)\n\t\treturn () => { }\n\t}, [dispatch]);\n\n\tconst handlePasswordVisibility = () => setShowPassword(!showPassword);\n\tconst handleSubmitHandler = async (data: FormInputs) => {\n\t\ttry {\n\t\t\t// alert(JSON.stringify(data, undefined, 2));\n\t\t\tsetShowPassword(false);\n\t\t\tconst loginPersonData: LoginPersonInput = {\n\t\t\t\tusername: data.username,\n\t\t\t\tpassword: data.password,\n\t\t\t};\n\t\t\tconst response = await personLoginMutation({\n\t\t\t\tvariables: { loginPersonData },\n\t\t\t\t// access data\n\t\t\t\tupdate: (store, { data }) => {\n\t\t\t\t\tif (!data) {\n\t\t\t\t\t\treturn null\n\t\t\t\t\t}\n\t\t\t\t\t// TODO: used cache here\n\t\t\t\t\t// this will update message `You are logged in as: ${username}` that is using apollo cache\n\t\t\t\t\t// update apollo cache with new data, this will update usePersonProfileQuery cache\n\t\t\t\t\t// warning: for this to work data return fields from personLoginMutation must match usePersonProfileQuery\n\t\t\t\t\t// check console warnings for messages like `Missing field personProfile in`\n\t\t\t\t\t// console.log('store.writeQuery', JSON.stringify(data.personLogin.user, undefined, 2));\n\t\t\t\t\tstore.writeQuery({\n\t\t\t\t\t\t// must use postfix Document type gql``\n\t\t\t\t\t\tquery: PersonProfileDocument,\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t// must match personProfile with personLogin.user return objects\n\t\t\t\t\t\t\tpersonProfile: data.personLogin.user\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}).catch(error => {\n\t\t\t\tthrow error;\n\t\t\t})\n\n\t\t\tif (response && response.data.personLogin) {\n\t\t\t\t// set inMemory global accessToken variable\n\t\t\t\tsetAccessToken(response.data.personLogin.accessToken);\n\t\t\t\t// dispatch state\n\t\t\t\tconst { user } = response.data.personLogin;\n\t\t\t\tconst payload = {\n\t\t\t\t\tprofile: {\n\t\t\t\t\t\tid: user.id,\n\t\t\t\t\t\tfirstName: user.username,\n\t\t\t\t\t\tlastName: user.lastName,\n\t\t\t\t\t\tusername: user.username,\n\t\t\t\t\t\temail: user.email,\n\t\t\t\t\t\tfiscalNumber: user.fiscalNumber,\n\t\t\t\t\t\tmobilePhone: user.mobilePhone,\n\t\t\t\t\t\troles: user.roles\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tdispatch({ type: ActionType.SIGNED_IN_USER, payload });\n\t\t\t\t// use history to send user to homepage, after awaiting for response object, \n\t\t\t\thistory.push('/');\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tsetShowPassword(false);\n\t\t\t// if (error.graphQLErrors[0]) {\n\t\t\t// \tconst {status, error: errorMessage, message} = error.graphQLErrors[0].message;\n\t\t\t// \tconsole.log(`status: ${status}, message: ${message}`);\n\t\t\t// }\n\t\t}\n\t};\n\n\tconst formDefinition: Record<string, FormPropFields> = {\n\t\t[FormFieldNames.USERNAME]: {\n\t\t\t...commonFormFieldUsername(useRef(), FormFieldNames.USERNAME)\n\t\t},\n\t\t[FormFieldNames.PASSWORD]: {\n\t\t\t...commonFormFieldPassword(useRef(), FormFieldNames.PASSWORD, showPassword, handlePasswordVisibility)\n\t\t},\n\t};\n\n\treturn (\n\t\t<Container component='main' maxWidth='xs'>\n\t\t\t<div className={classes.paper}>\n\t\t\t\t{/* <Avatar className={classes.avatar}>\n\t\t\t\t\t<LockOutlinedIcon />\n\t\t\t\t</Avatar> */}\n\t\t\t\t<LogoIcon width='10vw' />\n\t\t\t\t<Typography component='h1' variant='h5'>\n\t\t\t\t\t{c.I18N.signIn}\n\t\t\t\t</Typography>\n\t\t\t\t{/* 'handleSubmit' will validate your inputs before invoking 'onSubmit' */}\n\t\t\t\t<form\n\t\t\t\t\tclassName={classes.form} noValidate autoComplete='off'\n\t\t\t\t\tonSubmit={handleSubmit((data) => handleSubmitHandler(data))}\n\t\t\t\t>\n\t\t\t\t\t{generateFormDefinition(formDefinition, control, errors, loading)}\n\t\t\t\t\t<Button\n\t\t\t\t\t\ttype='submit'\n\t\t\t\t\t\tvariant='contained'\n\t\t\t\t\t\tdisabled={loading}\n\t\t\t\t\t\tfullWidth\n\t\t\t\t\t>\n\t\t\t\t\t\t{c.I18N.signIn}\n\t\t\t\t\t</Button>\n\t\t\t\t\t<FormControlLabel\n\t\t\t\t\t\tcontrol={<Checkbox value='remember' color='primary' disabled={loading} />}\n\t\t\t\t\t\tlabel={c.I18N.rememberMe}\n\t\t\t\t\t/>\n\t\t\t\t\t<Grid container spacing={1}>\n\t\t\t\t\t\t{/* <Grid item xs={4}>\n\t\t\t\t\t\t\t<Link href='#' variant='body2'>\n\t\t\t\t\t\t\t\t<Typography align='left' variant='subtitle2'>{c.I18N.forgotPassword}</Typography>\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</Grid> */}\n\t\t\t\t\t\t<Grid item xs={12}>\n\t\t\t\t\t\t\t<Link href={routes[RouteKey.SIGN_UP].path} variant='body2'>\n\t\t\t\t\t\t\t\t<Typography align='center' variant='subtitle2'>{c.I18N.nonAccountSignUp}</Typography>\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</Grid>\n\t\t\t\t\t{loading && <LinearIndeterminate />}\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t\t{apolloError && <AlertMessage severity={AlertSeverityType.ERROR} message={c.I18N.loginFailed} className={classes.spacerTop} />}\n\t\t\t{/* show signUpUserRegisteredSuccessfully */}\n\t\t\t{state.resultMessage && <Box component='span' m={1}>\n\t\t\t\t<AlertMessage severity={AlertSeverityType.SUCCESS} message={state.resultMessage} className={classes.spacerTop} />\n\t\t\t</Box>}\n\t\t\t<Box mt={2}>\n\t\t\t\t<Copyright {...copyrightProps} />\n\t\t\t</Box>\n\t\t\t{/* <AlertMessage severity={AlertSeverityType.WARNING} message={c.I18N.signInWip} className={classes.spacerTop} /> */}\n\t\t</Container>\n\t);\n}\n","import { ElapsedTime } from \"../types\";\n\n/**\n * convert a generic record type to array\n * @param record a generic record\n */\nexport const recordToArray = <T>(record: Record<string, T>) => {\n  const result: T[] = [];\n  for (const key in record) {\n    if (record.hasOwnProperty(key)) {\n      result.push(record[key]);\n    }\n  }\n  return result;\n}\n\n/**\n * check if is a valid json object, or array of valid objects\n */\nexport const isValidJsonObject = (json: string, required: boolean = false): boolean => {\n  if (!json && !required) return true;\n  try {\n    // validate all elements of array\n    if (Array.isArray(json)) {\n      Array.from(json).forEach(e => {\n        // don't re-parse already object, use JSON.stringify to check if is valid\n        JSON.stringify(e);\n      });\n    } else {\n      // parse string\n      JSON.parse(json);\n    }\n    // console.log(JSON.stringify(parsed));\n  } catch (error) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * check if is a valid enum\n */\nexport const isValidEnum = (enumType: any, enumKey: string): boolean => {\n  return Object.values(enumType).includes(enumKey);\n}\n\n/**\n * validate regEx\n */\nexport const validateRegExp = (value: string, regExp: RegExp): boolean => {\n  return regExp.test(value);\n}\n\n/**\n * validate regEx\n */\nexport const validateRegExpObjectProperty = (obj: any, prop: string, regExp: RegExp): boolean => {\n  return (obj && obj[prop] && regExp.test(obj[prop]));\n}\n\n/**\n * generic function to get Enum key from a Enum value\n * @param enumType a typescript Type\n * @param enumValue string value\n */\nexport const getEnumKeyFromEnumValue = (enumType: any, enumValue: string | number): any => {\n  const keys: string[] = Object.keys(enumType).filter((x) => enumType[x] === enumValue);\n  if (keys.length > 0) {\n    return keys[0];\n  } else {\n    // throw error to caller function\n    // throw new Error(`Invalid enum value '${enumValue}'! Valid enum values are ${Object.keys(myEnum)}`);\n    throw new Error(`Invalid enum value '${enumValue}'! Valid enum value(s() are ${Object.values(enumType)}`);\n  }\n};\n\n/**\n * generic function to get Enum value from a Enum key\n * @param enumType a typescript Type\n * @param enumValue string value\n */\nexport const getEnumValueFromEnumKey = (enumType: any, enumKey: string | number): any => {\n  // use getEnumKeyByEnumValue to get key from value\n  const keys = Object.keys(enumType).filter((x) => getEnumKeyFromEnumValue(enumType, enumType[x]) === enumKey);\n  if (keys.length > 0) {\n    // return value from equality key\n    return enumType[keys[0]];\n  } else {\n    // throw error to caller function\n    throw new Error(`Invalid enum key '${enumKey}'! Valid enum key(s() are ${Object.keys(enumType)}`);\n  }\n};\n\nexport const calcElapsedTime = (start: Date, end: Date): ElapsedTime => {\n  const elapsedMs: number = (end.getTime() - start.getTime());\n  const elapsed = new Date(elapsedMs);\n  // subtract the timezone offset, else we have 1h and not 0h\n  elapsed.setTime(elapsed.getTime() + elapsed.getTimezoneOffset() * 60 * 1000);\n  const elapsedHours = elapsed.getHours();\n  const elapsedMinutes = elapsed.getMinutes();\n  const elapsedSeconds = elapsed.getSeconds();\n\n  return { hours: elapsedHours, minutes: elapsedMinutes, seconds: elapsedSeconds, ms: elapsedMs };\n};\n\n/**\n * Simple func to format Date\n */\nexport const currentFormatDate = (date: Date, withTime: boolean = true): string => {\n  const yy: string = date.getUTCFullYear().toString();\n  const mo: string = (date.getUTCMonth() + 1).toString().padStart(2, '0');\n  const dd: string = date.getUTCDate().toString().padStart(2, '0');\n  const hh: string = date.getUTCHours().toString().padStart(2, '0');\n  const mm: string = date.getUTCMinutes().toString().padStart(2, '0');\n  const ss: string = date.getUTCSeconds().toString().padStart(2, '0');\n  return (withTime)\n    ? `${yy}-${mo}-${dd} ${hh}:${mm}:${ss}`\n    : `${yy}-${mo}-${dd}`;\n};\n\n\n/**\n * simple string template engine\n * @param stringTemplate \n * @param obj \n */\nexport const parseTemplate = (stringTemplate: string, obj: any) => stringTemplate.replace(/\\${(.*?)}/g, (x, g) => obj[g]);\n\nexport const randomInteger = (max: number) => {\n  return Math.floor(Math.random() * max - 1) + 1;\n}\n","/**\n * https://github.com/temideoye/barcode-validator/blob/master/src/validatebarcode.js\n * @param barCode \n */\n\nexport const validateBarCode = (barCode: string): boolean => {\n  const code = `${barCode}`;\n  const digits = () => /^\\d{8,13}$/g.test(code);\n  const validLengths = [8, 12, 13];\n  if (!digits() || !validLengths.includes(code.length)) return false;\n\n  let checksum = 0;\n  const codeList = code.split(\"\");\n  const checkDigit = parseInt(codeList.pop(), 10);\n  // eslint-disable-next-line array-callback-return\n  codeList.map((value, index) => {\n    const digit = parseInt(value, 10);\n    if (code.length % 2 === 1) checksum += index % 2 ? digit * 3 : digit;\n    else checksum += index % 2 ? digit : digit * 3;\n  });\n\n  let check = checksum % 10;\n  if (check !== 0) check = 10 - check;\n  if (check === checkDigit) return true;\n  return false;\n}\n\n/**\n * typescript version of\n * https://gist.github.com/eresende/88562d2c4dc85b62cb0c\n * https://codepen.io/caneco/pen/gOMZvqQ\n * @param value \n */\nexport const validateFiscalNumber = (fiscalNumber: string): boolean => {\n  // remove PT first\n  let value = fiscalNumber.substring(2,fiscalNumber.length) + '';\n\n  // anonymous consumer\n  if (value === '999999990') return true;\n\n  // has 9 digits?\n  if (!/^[0-9]{9}$/.test(value)) return false;\n\n  // is from a person?\n  if (!/^[123]|45|5/.test(value)) return false;\n\n  // digit check\n  let tot =\n    parseInt(value[0]) * 9 +\n    parseInt(value[1]) * 8 +\n    parseInt(value[2]) * 7 +\n    parseInt(value[3]) * 6 +\n    parseInt(value[4]) * 5 +\n    parseInt(value[5]) * 4 +\n    parseInt(value[6]) * 3 +\n    parseInt(value[7]) * 2;\n  let div = (tot / 11).toString();\n  let mod = tot - parseInt(div) * 11;\n  let tst = (mod === 1 || mod === 0 ? 0 : 11 - mod).toString();\n\n  return value[8] === tst;\n}\n","/* eslint-disable no-template-curly-in-string */\n/* eslint-disable array-callback-return */\n\n/**\n * helper file with common jsx functional stuff for dynamic forms\n */\n\nimport { ApolloError } from '@apollo/client';\nimport { Button, FormHelperText } from '@material-ui/core';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\nimport Autocomplete, { AutocompleteRenderInputParams } from \"@material-ui/lab/Autocomplete\";\nimport { capitalCase, constantCase } from \"change-case\";\nimport React, { Fragment } from 'react';\nimport { Control, Controller, DeepMap, FieldError } from 'react-hook-form';\nimport { appConstants as c } from '../app/constants';\nimport { AutocompleteAndSelectOptions, FormInputType, FormPropFields } from '../types';\nimport { recordToArray } from './main-util';\nimport { validateBarCode } from './validation';\n\n// used outside in forms\nexport const useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    width: 'fullWidth',\n  },\n  spacer: {\n    marginBottom: theme.spacing(2),\n  },\n  spacerTop: {\n    marginTop: theme.spacing(2),\n  },\n  // helper\n  redColor: {\n    backgroundColor: 'red',\n  },\n  formButtonsDiv: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n  },\n  button: {\n    marginRight: theme.spacing(2),\n  },\n  buttonGoodsActions: {\n    marginTop: theme.spacing(2),\n    height: 54,\n  },\n  buttonGoodsAdd: {\n    marginRight: theme.spacing(2),\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n  },\n}));\n\n/**\n * common control properties\n */\nexport const commonControlProps: { [key: string]: string } = {\n  variant: 'outlined',\n  margin: 'normal',\n};\n\nexport const validationMessage = (messageType: 'required' | 'invalid', fieldName: string,) => `${fieldName} is ${c.I18N[messageType]}`;\n\n/**\n * a simple helper to generate regExp rules\n * @param fieldName \n * @param regExp \n */\nexport const validationRuleRegExHelper = (fieldName: string, regExp: RegExp, required: boolean = true) => {\n  return {\n    required: (required) ? validationMessage('required', fieldName) : false,\n    pattern: {\n      value: regExp,\n      message: validationMessage('invalid', fieldName),\n    },\n  };\n}\n\n/**\n * helper to validate barCode\n * @param fieldName \n * @param value \n * @param required \n */\nexport const validationBarCodeExHelper = (fieldName: string, value: any, required: boolean = true) => {\n  return {\n    required: (required) ? validationMessage('required', fieldName) : false,\n    validate: () => (value && value.barCode && validateBarCode(value.barCode))\n      ? true\n      : validationMessage('invalid', fieldName),\n  };\n}\n\n/**\n * validate an array of regExp, returns true if any of the items in array return true, acts like OR\n * @param value \n * @param regExpArray \n */\nexport const validateRegExpArray = (value: string, regExpArray: RegExp[]): boolean => {\n  // returns true when match one predicated that match\n  return regExpArray.some((e: RegExp) => e.test(value));\n}\n\n/**\n * validate an array of values and check if all values pass with any of the regExp\n * @param values \n * @param regExpArray \n */\nexport const validateRegExpArrayWithValuesArray = (values: string[], regExpArray: RegExp[]): string[] => {\n  const failValues: string[] = [];\n  values.forEach((v: string) => {\n    // test any value in any regExp\n    const result = regExpArray.some((e: RegExp) => e.test(v));\n    if (!result) {\n      failValues.push(v);\n    }\n  });\n  // return failValues to caller \n  return failValues;\n}\n\n/**\n * helper to extract string error message from ApolloError\n */\nexport const getGraphQLApolloError = (apolloError: ApolloError): string => {\n  let errorMessage = '';\n  if (apolloError) {\n    // errorMessage = apolloError.message\n    const propExists = (obj: any, path: any) => {\n      return !!path.split('.').reduce((obj: any, prop: any) => {\n        return obj && obj[prop] ? obj[prop] : undefined;\n      }, obj)\n    }\n\n    if (propExists(apolloError, 'graphQLErrors.0.extensions.exception.message.error')) {\n      errorMessage = apolloError.graphQLErrors[0].extensions.exception.message.error;\n    } else if (propExists(apolloError, 'graphQLErrors.0.extensions.exception.responses.0.error.message')) {\n      errorMessage = apolloError.graphQLErrors[0].extensions.exception.responses[0].error.message;\n    } else if (propExists(apolloError, 'graphQLErrors.0..message.error')) {\n      errorMessage = (apolloError.graphQLErrors[0].message as any).error;\n    } else if (propExists(apolloError, 'message')) {\n      errorMessage = apolloError.message;\n    }\n  }\n\n  return errorMessage;\n}\n\n/**\n * add if not exists, and convert title and value to\n * Capital Case and CONSTANT\n */\nexport const addToAutocomplete = (name: string, control: Control<Record<string, any>>, value: string): void => {\n  // clone\n  const result: Array<AutocompleteAndSelectOptions> = [...control.getValues(name)];\n  const newTitle = capitalCase(value);\n  const newValue = constantCase(value);\n  if (result.length >= 0) {\n    const exists = result.find((e) => e.value === newValue);\n    if (!exists) {\n      // add to options\n      control.setValue(name, [...control.getValues(name),\n      { title: newTitle, value: newValue }\n      ], { shouldValidate: true });\n    }\n  }\n}\n\n/**\n * helper to get common form buttons\n */\nexport const generateFormButtonsDiv = (classes: Record<'button' | 'formButtonsDiv', string>, loading: boolean, handleResetHandler: () => void) => {\n  return (\n    <div className={classes.formButtonsDiv}>\n      <Button\n        type='submit'\n        variant='contained'\n        className={classes.button}\n        disabled={loading}\n      >\n        {c.I18N.create}\n      </Button>\n      <Button\n        type='reset'\n        variant='contained'\n        className={classes.button}\n        disabled={loading}\n        onClick={() => handleResetHandler()}\n      >\n        {c.I18N.reset}\n      </Button>\n    </div>\n  );\n}\n\n// trick to use generics with jsx, we can use <T> it will be interpreted as jsx\n// https://stackoverflow.com/questions/41112313/how-to-use-generics-with-arrow-functions-in-typescript-jsx-with-react?rq=1\n// use '<T extends {}>'\n// T is FormInputs\nexport const generateFormDefinition = (formDefinition: any, control: Control<Record<string, any>>, errors: DeepMap<any, FieldError>, loading: boolean/*, setValue?: any*/): JSX.Element[] => recordToArray<FormPropFields>(formDefinition).map((e: FormPropFields) => {\n  if (e.visible === false || (typeof e.visible === 'function' && !e.visible(control))) return;\n  let returnValue;\n  switch (e.type) {\n    case FormInputType.TEXT:\n    case FormInputType.PASSWORD:\n    case FormInputType.DATE:\n    case FormInputType.EMAIL:\n    case FormInputType.COLOR:\n    case FormInputType.DATETIME:\n    case FormInputType.FILE:\n    case FormInputType.HIDDEN:\n    case FormInputType.IMAGE:\n    case FormInputType.MONTH:\n    case FormInputType.NUMBER:\n    case FormInputType.RANGE:\n    case FormInputType.TEL:\n    case FormInputType.TIME:\n    case FormInputType.URL:\n    case FormInputType.WEEK:\n      returnValue = generateTextField(e, control, errors, loading);\n      break\n    case FormInputType.SELECT:\n      returnValue = generateSelection(e, control, errors, loading);\n      break\n    case FormInputType.AUTOCOMPLETE:\n      returnValue = generateAutocomplete(e, control, errors, loading);\n      break\n    case FormInputType.CUSTOM:\n      returnValue = e.custom;\n      break\n  }\n  return returnValue;\n});\n\nexport const generateTextField = (e: FormPropFields, control: Control<Record<string, any>>, errors: DeepMap<any, FieldError>, loading: boolean): JSX.Element => {\n  // inner function to maintain error cleaner\n  const errorHandler = (errors: DeepMap<any, FieldError>, e: FormPropFields) => {\n    return (typeof e.errorFn === 'function')\n      ? e.errorFn()\n      : (errors[(e.name)] !== undefined);\n  }\n  // inner function to maintain helperText cleaner\n  const helperTextHandler = (errors: DeepMap<any, FieldError>, e: FormPropFields) => {\n    return (typeof e.helperTextFn === 'function')\n      ? e.helperTextFn()\n      // show error or errorMessage or helperText\n      : (errors[(e.name)] !== undefined) ? errors[(e.name)].message : e.helperText\n  }\n\n  return (\n    <Fragment key={e.name}>\n      <Controller\n        as={<TextField inputRef={e.inputRef} {...e.controlProps} />}\n        // text | password\n        type={e.type}\n        control={control}\n        name={(e.name as string)}\n        label={e.label}\n        placeholder={e.placeholder}\n        fullWidth={e.fullWidth}\n        rules={e.rules}\n        disabled={loading || e.disabled}\n        // added for custom type\n        // error={(errors[(e.name)] !== undefined)}\n        error={errorHandler(errors, e)}\n        // added for custom type\n        // helperText={(errors[(e.name as any)] !== undefined) ? errors[(e.name as any)].message : e.helperText}\n        helperText={helperTextHandler(errors, e)}\n        // added for custom type\n        // onFocus={() => { e.inputRef.current.focus(); }}\n        // TODO: Unhandled Rejection (TypeError): Cannot read property 'focus' of null\n        // onFocus={() => { (typeof e.onFocusFn === 'function') ? e.onFocusFn() : e.inputRef.current.focus(); }}\n        onFocus={() => { (typeof e.onFocusFn === 'function') && e.onFocusFn(); }}\n        // added for custom type\n        defaultValue={e.defaultValue}\n      />\n    </Fragment>\n  )\n}\n\nconst generateSelection = (e: FormPropFields, control: Control<Record<string, any>>, errors: DeepMap<any, FieldError>, loading: boolean): JSX.Element => {\n  return (\n    <Fragment key={e.name}>\n      <FormControl variant='outlined' margin='normal' fullWidth={e.fullWidth}>\n        <InputLabel id={`${e.name}-select-label`}>{e.label}</InputLabel>\n        <Controller\n          as={\n            <Select\n              id={e.name}\n              labelId={`${e.name}-select-label`}\n              label={e.label}\n              inputRef={e.inputRef}\n            >\n              <MenuItem value={c.VALUES.undefined}>{c.I18N.undefined}</MenuItem>\n              {/* use key or value */}\n              {e.options && e.options().map((e: AutocompleteAndSelectOptions) => <MenuItem key={e.key ? e.key : e.value} value={e.value}>{e.title}</MenuItem>)}\n            </Select>\n          }\n          // render={({ onChange, onBlur, value, name, ...props }) => (\n          //   <Select\n          //     id={e.name}\n          //     labelId={`${e.name}-select-label`}\n          //     label={e.label}\n          //     inputRef={e.inputRef}\n          //     onChange={(event) => console.log(event.target.value)}\n          //   >\n          //     <MenuItem value={''}>{c.I18N.none}</MenuItem>\n          //     {e.options.map(e => <MenuItem key={e.value} value={e.value}>{e.title}</MenuItem>)}\n          //   </Select>\n          // )}\n          control={control}\n          name={e.name}\n          error={(errors[(e.name)] !== undefined)}\n          // TODO: wip\n          placeholder={e.placeholder}\n          // TODO: wip\n          rules={e.rules}\n          disabled={loading || e.disabled}\n          onFocus={() => { e.inputRef.current.focus(); }}\n        // TODO: this gives the margin problem in console\n        // Failed prop type: Invalid prop `margin` of value `normal` supplied to \n        // {...e.controlProps}\n        />\n        <FormHelperText error={(errors[(e.name as any)] !== undefined)}>{(errors[(e.name as any)] !== undefined) ? errors[(e.name as any)].message : e.helperText}</FormHelperText>\n      </FormControl>\n    </Fragment>\n  )\n}\n\n/**\n * helper to generate Autocomplete component \n * @param options [{ title: 'The Shawshank Redemption', year: 1994 }...]\n */\nconst generateAutocomplete = (\n  e: FormPropFields, control: Control<Record<string, any>>, errors: DeepMap<any, FieldError>, loading: boolean\n) => {\n  const icon = <CheckBoxOutlineBlankIcon fontSize='small' />;\n  const checkedIcon = <CheckBoxIcon fontSize='small' />;\n  interface InputProps {\n    onKeyDown: (event: object) => void;\n  }\n\n  const handleKeyDown = (event: any) => {\n    switch (event.key) {\n      case 'Enter':\n      case ' ':\n      case ',': {\n        event.preventDefault();\n        event.stopPropagation();\n        // 3 chars minimum\n        if (event.target.value.length >= 3) {\n          // get current control values\n          // working version without function helper\n          // const newValue = { title: event.target.value, value: (event.target.value as string).toUpperCase() };\n          // control.setValue(e.name, [...control.getValues(e.name), newValue], { shouldValidate: true });\n          addToAutocomplete(e.name, control, event.target.value);\n        }\n        break;\n      }\n      default:\n    }\n  };\n\n  // working but has no value\n  // return (\n  //   <Fragment key={e.name}>\n  //     <Autocomplete\n  //       id={e.name}\n  //       options={options}\n  //       multiple\n  //       disableCloseOnSelect\n  //       defaultValue={[options[1]]}\n  //       getOptionLabel={(option) => option.title}\n  //       getOptionSelected={(option, value) => option.value === value.value}\n  //       renderOption={(option, { selected }) => (\n  //         <Fragment>\n  //           <Checkbox\n  //             icon={icon}\n  //             checkedIcon={checkedIcon}\n  //             style={{ marginRight: 8 }}\n  //             checked={selected}\n  //           />\n  //           {option.title}\n  //         </Fragment>\n  //       )}\n  //       renderInput={(params) => (\n  //         <TextField name={e.name} inputRef={e.inputRef} {...params} variant='outlined' label={e.label} placeholder={e.placeholder} />\n  //       )}\n  //       fullWidth={e.fullWidth}\n  //       disabled={loading}\n  //       onFocus={() => { e.inputRef.current.focus(); }}\n  //       {...e.controllProps}\n  //     />\n  //   </Fragment>\n  // );\n\n  // working but before use cleaner version from codeSandbox\n  return (\n    <Fragment key={e.name}>\n      <Controller\n        name={e.name}\n        control={control}\n        rules={e.rules}\n        render={({ onChange, ...props }) => (\n          // TODO: use `as` crash when we clear tags\n          //  as={\n          <Autocomplete\n            id={e.name}\n            options={e.options()}\n            multiple={e.multipleOptions}\n            disableCloseOnSelect={e.disableCloseOnSelect}\n            filterSelectedOptions\n            autoComplete\n            autoHighlight\n            freeSolo\n            getOptionLabel={(option) => (option.title) ? option.title : ''}\n            getOptionSelected={(option, value) => option.value === value.value}\n            renderOption={(option, { selected }) => (\n              <Fragment>\n                {e.multipleOptions &&\n                  <Checkbox\n                    icon={icon}\n                    checkedIcon={checkedIcon}\n                    style={{ marginRight: 8 }}\n                    checked={selected}\n                  />\n                }\n                {option.title}\n              </Fragment>\n            )}\n            renderInput={(params: AutocompleteRenderInputParams) => {\n              // add listener if addToAutocomplete is enabled\n              if (e.addToAutocomplete) {\n                (params.inputProps as any).onKeyDown = handleKeyDown;\n              }\n              return (\n                <TextField\n                  name={e.name}\n                  inputRef={e.inputRef}\n                  // variant='outlined'\n                  label={e.label}\n                  placeholder={e.placeholder}\n                  error={(errors[(e.name)] !== undefined)}\n                  helperText={(errors[(e.name as any)] !== undefined) ? errors[(e.name as any)].message : e.helperText}\n                  {...params}\n                  {...e.controlProps}\n                />\n              )\n            }}\n            onChange={(e, data) => onChange(data)}\n            fullWidth={e.fullWidth}\n            disabled={loading || e.disabled}\n            onFocus={() => { e.inputRef.current.focus(); }}\n            // defaultValue={[e.options[0], e.options[2]]}\n            // props is the way to inject default values\n            // and Add tags Too, fuck 2 hours to discover it, how to create tags\n            {...props}\n          />\n        )}\n      // } // as\n      />\n    </Fragment>\n  );\n\n  // return (\n  //   <Fragment key={e.name}>\n  //     <Controller\n  //       type={e.type}\n  //       control={control}\n  //       as={<Autocomplete\n  //         // use ref not inputRef\n  //         ref={e.inputRef}\n  //         options={options}\n  //         multiple\n  //         disableCloseOnSelect\n  //         getOptionLabel={(option) => option.title}\n  //         renderOption={(option, { selected }) => (\n  //           <Fragment>\n  //             <Checkbox\n  //               icon={icon}\n  //               checkedIcon={checkedIcon}\n  //               style={{ marginRight: 8 }}\n  //               checked={selected}\n  //             />\n  //             {option.title}\n  //           </Fragment>\n  //         )}\n  //         renderInput={(params) => (\n  //           <TextField {...params} variant='outlined' label={e.label} placeholder={e.placeholder} />\n  //         )}\n  //         // {...e.controllProps}\n  //       />}\n  //       name={(e.name as string)}\n  //       // error={(errors[(e.name)] !== undefined)}\n  //       // helperText={(errors[(e.name as any)] !== undefined) ? errors[(e.name as any)].message : e.helperText}\n  //       // label={e.label}\n  //       // placeholder={e.placeholder}\n  //       // className={e.className}\n  //       fullWidth={e.fullWidth}\n  //       // rules={e.rules}\n  //       // disabled={loading}\n  //       // onFocus={() => { e.inputRef.current.focus(); }}\n  //     />\n  //   </Fragment>\n  // )\n\n  // return (\n  //   <Controller\n  //     key={e.name}\n  //     name={e.name}\n  //     control={control}\n  //     render={({ onChange, ...props }) => (\n  //       <Autocomplete\n  //         options={options}\n  //         getOptionLabel={(option) => option.title}\n  //         getOptionSelected={(option, value) => option.value === value.value}\n  //         renderInput={(params) => (\n  //           <TextField {...params} variant='outlined' label={e.label} placeholder={e.placeholder} />\n  //         )}\n  //         renderOption={(option, { selected }) => (\n  //           <Fragment>\n  //             <Checkbox\n  //               icon={icon}\n  //               checkedIcon={checkedIcon}\n  //               style={{ marginRight: 8 }}\n  //               checked={selected}\n  //             />\n  //             {option.title}\n  //           </Fragment>\n  //         )}\n  //         onChange={(e, data) => onChange(data)}\n  //         {...props}\n  //         fullWidth={e.fullWidth}\n  //         disabled={loading}\n  //       />\n  //     )}\n  //     onChange={([, data]: any) => data}\n  //     defaultValue={null}\n  //     // multiple\n  //     // disableCloseOnSelect\n  //     // onFocus={() => { e.inputRef.current.focus(); }}\n  //     // {...e.controllProps}\n  //   />\n  // );\n}\n\n// const ControlledAutocomplete = ({ options = [], renderInput, getOptionLabel, onChange: ignored, control, defaultValue, name, renderOption }: any) => {\n//   return (\n//     <Controller\n//       render={({ onChange, ...props }) => (\n//         <Autocomplete\n//           options={options}\n//           getOptionLabel={getOptionLabel}\n//           renderOption={renderOption}\n//           renderInput={renderInput}\n//           onChange={(e, data) => onChange(data)}\n//           {...props}\n//         />\n//       )}\n//       onChange={([, data]: any) => data}\n//       defaultValue={defaultValue}\n//       name={name}\n//       control={control}\n//     />\n//   );\n// }","import { Box, Grid, Link } from '@material-ui/core';\nimport Button from '@material-ui/core/Button/Button';\nimport Container from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport React, { useRef, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { RouteComponentProps } from 'react-router';\nimport { appConstants as c, mokeFormData } from '../../app';\nimport { commonFormFieldEmail, commonFormFieldFirstName, commonFormFieldFiscalNumber, commonFormFieldLastName, commonFormFieldMobilePhone, commonFormFieldPassword, commonFormFieldPasswordConfirmation, commonFormFieldUsername, formCommonOptions, RouteKey, routes } from '../../app/config';\nimport { ActionType, useStateValue } from '../../app/state';\nimport { AlertMessage, AlertSeverityType } from '../../components/material-ui/alert-message';\nimport { LinearIndeterminate } from '../../components/material-ui/feedback';\nimport { Copyright } from '../../components/material-ui/other/Copyright';\nimport { NewPersonInput, usePersonRegisterMutation } from '../../generated/graphql';\nimport { ReactComponent as LogoIcon } from '../../icons/LogoIcon.svg';\nimport { FormDefaultValues, FormPropFields } from '../../types';\nimport { generateFormDefinition, getGraphQLApolloError, parseTemplate, validateFiscalNumber } from '../../utils';\nimport { copyrightProps, useStyles } from './SignInPage';\n\ntype FormInputs = {\n\tfirstName: string;\n\tlastName: string;\n\tusername: string;\n\tpassword: string;\n\tpasswordConfirmation: string;\n\tfiscalNumber: string;\n\tmobilePhone: string;\n\temail: string;\n};\nenum FormFieldNames {\n\tFIRST_NAME = 'firstName',\n\tLAST_NAME = 'lastName',\n\tUSERNAME = 'username',\n\tPASSWORD = 'password',\n\tPASSWORD_CONFIRMATION = 'passwordConfirmation',\n\tFISCAL_NUMBER = 'fiscalNumber',\n\tMOBILE_PHONE = 'mobilePhone',\n\tEMAIL = 'email',\n};\nconst defaultValues: FormDefaultValues = {\n\tfirstName: mokeFormData ? 'Jake' : '',\n\tlastName: mokeFormData ? 'Doe' : '',\n\tusername: mokeFormData ? 'jakedoe' : '',\n\tpassword: mokeFormData ? c.VALUES.mokePassword : '',\n\tpasswordConfirmation: mokeFormData ? c.VALUES.mokePassword : '',\n\tfiscalNumber: mokeFormData ? 'PT123123127' : '',\n\tmobilePhone: mokeFormData ? '+351936101187' : '',\n\temail: mokeFormData ? 'jakedoe@mail.com' : '',\n};\n\n// use RouteComponentProps to get history props from Route\nexport const SignUpPage: React.FC<RouteComponentProps> = ({ history }) => {\n\t// hooks styles: from signInPage\n\tconst classes = useStyles();\n\t// hooks react form\n\tconst { handleSubmit, watch, errors, control, getValues, reset } = useForm<FormInputs>({ defaultValues, ...formCommonOptions })\n\tconst [showPassword, setShowPassword] = useState(false);\n\t// hooks: apollo\n\tconst [personNewMutation, { loading, error: apolloError }] = usePersonRegisterMutation();\n\t// hooks state\n\tconst [, dispatch] = useStateValue();\n\t// used in result state message\n\tconst username = watch(FormFieldNames.USERNAME);\n\t// extract error message\n\tconst errorMessage = getGraphQLApolloError(apolloError);\n\t// debug\n\t// console.log('errors', JSON.stringify(errors, undefined, 2));\n\n\tconst handlePasswordVisibility = () => setShowPassword(!showPassword);\n\tconst handleResetHandler = async () => { reset(defaultValues, {}) };\n\tconst handleSubmitHandler = async (data: FormInputs) => {\n\t\ttry {\n\t\t\t// alert(JSON.stringify(data, undefined, 2));\n\t\t\tsetShowPassword(false);\n\t\t\tconst newPersonData: NewPersonInput = {\n\t\t\t\tusername: data.username,\n\t\t\t\tpassword: data.password,\n\t\t\t\tfiscalNumber: data.fiscalNumber,\n\t\t\t\tmobilePhone: data.mobilePhone,\n\t\t\t\temail: data.email,\n\t\t\t};\n\t\t\tconst response = await personNewMutation({ variables: { newPersonData } })\n\t\t\t\t.catch(error => {\n\t\t\t\t\tthrow error;\n\t\t\t\t})\n\n\t\t\tif (response) {\n\t\t\t\tconst payload = { message: parseTemplate(c.I18N.signUpUserRegisteredSuccessfully, { username }) };\n\t\t\t\tdispatch({ type: ActionType.RESULT_MESSAGE, payload });\n\t\t\t\thistory.push({ pathname: routes.RESULT_PAGE.path });\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// console.error('graphQLErrors' in errors && error.graphQLErrors[0] ? JSON.stringify(error.graphQLErrors[0].message, undefined, 2) : error);\n\t\t} finally {\n\t\t\tsetShowPassword(false);\n\t\t}\n\t};\n\n\tconst formDefinition: Record<string, FormPropFields> = {\n\t\t[FormFieldNames.FIRST_NAME]: {\n\t\t\t...commonFormFieldFirstName(useRef(), FormFieldNames.FIRST_NAME)\n\t\t},\n\t\t[FormFieldNames.LAST_NAME]: {\n\t\t\t...commonFormFieldLastName(useRef(), FormFieldNames.LAST_NAME)\n\t\t},\n\t\t[FormFieldNames.USERNAME]: {\n\t\t\t...commonFormFieldUsername(useRef(), FormFieldNames.USERNAME)\n\t\t},\n\t\t[FormFieldNames.PASSWORD]: {\n\t\t\t...commonFormFieldPassword(useRef(), FormFieldNames.PASSWORD, showPassword, handlePasswordVisibility)\n\t\t},\n\t\t[FormFieldNames.PASSWORD_CONFIRMATION]: {\n\t\t\t...commonFormFieldPasswordConfirmation(useRef(), FormFieldNames.PASSWORD_CONFIRMATION, showPassword, () => getValues(FormFieldNames.PASSWORD) === getValues(FormFieldNames.PASSWORD_CONFIRMATION))\n\t\t},\n\t\t[FormFieldNames.FISCAL_NUMBER]: {\n\t\t\t...commonFormFieldFiscalNumber(useRef(), FormFieldNames.FISCAL_NUMBER, () => validateFiscalNumber(getValues(FormFieldNames.FISCAL_NUMBER)))\n\t\t},\n\t\t[FormFieldNames.MOBILE_PHONE]: {\n\t\t\t...commonFormFieldMobilePhone(useRef(), FormFieldNames.MOBILE_PHONE)\n\t\t},\n\t\t[FormFieldNames.EMAIL]: {\n\t\t\t...commonFormFieldEmail(useRef(), FormFieldNames.EMAIL)\n\t\t},\n\t};\n\n\treturn (\n\t\t<Container component='main' maxWidth='xs'>\n\t\t\t<div className={classes.paper}>\n\t\t\t\t{/* <Avatar className={classes.avatar}>\n\t\t\t\t\t<LockOutlinedIcon />\n\t\t\t\t</Avatar> */}\n\t\t\t\t<LogoIcon width='10vw'/>\n\t\t\t\t<Typography component='h1' variant='h5'>\n\t\t\t\t\t{c.I18N.signUp}\n\t\t\t\t</Typography>\n\t\t\t\t{/* 'handleSubmit' will validate your inputs before invoking 'onSubmit' */}\n\t\t\t\t<form\n\t\t\t\t\tclassName={classes.form} noValidate autoComplete='off'\n\t\t\t\t\tonSubmit={handleSubmit((data) => handleSubmitHandler(data))}\n\t\t\t\t>\n\t\t\t\t\t{generateFormDefinition(formDefinition, control, errors, loading)}\n\t\t\t\t\t<Grid container spacing={1}>\n\t\t\t\t\t\t<Grid item xs={6}>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\ttype='submit'\n\t\t\t\t\t\t\t\tvariant='contained'\n\t\t\t\t\t\t\t\tdisabled={loading}\n\t\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\t>{c.I18N.signUp}</Button>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t\t<Grid item xs={6}>\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\ttype='reset'\n\t\t\t\t\t\t\t\tvariant='contained'\n\t\t\t\t\t\t\t\tdisabled={loading}\n\t\t\t\t\t\t\t\tfullWidth\n\t\t\t\t\t\t\t\tonClick={() => handleResetHandler()}\n\t\t\t\t\t\t\t>{c.I18N.reset}</Button>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</Grid>\n\t\t\t\t\t<Grid container spacing={1}>\n\t\t\t\t\t\t<Grid item xs={12}>\n\t\t\t\t\t\t\t<Link href={routes[RouteKey.SIGN_IN].path} variant='body2'>\n\t\t\t\t\t\t\t\t<Typography align='center' variant='subtitle2'>{c.I18N.signIn}</Typography>\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t</Grid>\n\t\t\t\t\t</Grid>\n\t\t\t\t\t{loading && <LinearIndeterminate />}\n\t\t\t\t</form>\n\t\t\t</div>\n\t\t\t{apolloError && <AlertMessage severity={AlertSeverityType.ERROR} message={errorMessage}/>}\n\t\t\t{/* {apolloError && <pre>{JSON.stringify(apolloError.graphQLErrors[0].message, undefined, 2)}</pre>} */}\n\t\t\t<Box mt={8}>\n\t\t\t\t<Copyright {...copyrightProps} />\n\t\t\t</Box>\n\t\t</Container>\n\t);\n}\n","import { Box, Button, ButtonGroup } from '@material-ui/core';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\nimport ToggleButtonGroup from '@material-ui/lab/ToggleButtonGroup';\nimport { makeStyles } from '@material-ui/core/styles';\nimport React, { Fragment } from 'react';\nimport { ActionType, ThemeColors } from '../../app/state/reducerStateValue';\nimport { useStateValue } from '../../app/state/useStateValue';\nimport { PageTitle } from '../../components/material-ui/typography';\nimport { InputMouseEvent } from '../../types';\nimport { RouteKey, routes } from '../../app/config';\n\ninterface Props { }\n\ntype ClickHandlerAction = {\n  type: ActionType,\n  payload?: any\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& > *': {\n      marginLeft: theme.spacing(0),\n      marginBottom: theme.spacing(2),\n    },\n  },\n}));\n\nexport const StatePage: React.FC<Props> = () => {\n  // get hook\n  const [state, dispatch] = useStateValue();\n  // handlers\n  const onClickChangeThemeHandler = (action: ClickHandlerAction) => (e: InputMouseEvent) => {\n    dispatch(action);\n  }\n  const onClickDecrementHandler = (e: InputMouseEvent) => dispatch({ type: ActionType.DECREMENT });\n  const onClickIncrementHandler = (e: InputMouseEvent) => dispatch({ type: ActionType.INCREMENT });\n  const onClickSignOutHandler = (e: InputMouseEvent) => dispatch({ type: ActionType.SIGNED_OUT_USER });\n  // generate buttons\n  const buttons = Object.keys(ThemeColors).map(e =>\n    <ToggleButton key={e} value={e.toUpperCase()} onClick={onClickChangeThemeHandler({ type: ActionType.CHANGE_THEME, payload: { newTheme: e } })}>{e}</ToggleButton>\n  );\n  // styles\n  const classes = useStyles();\n  const stateOutput = JSON.stringify(state, undefined, 2);\n  const pageTitle = <PageTitle>{routes[RouteKey.STATE].title}</PageTitle>;\n  const pageContent = (\n    <Fragment>\n      <div className={classes.root}>\n        <ToggleButtonGroup value={state.theme.primary} color='primary' aria-label='outlined primary button group'>\n          {buttons}\n        </ToggleButtonGroup>\n      </div>\n      <div className={classes.root}>\n        <ButtonGroup variant='contained' color='primary' aria-label='outlined primary button group'>\n          <Button color='inherit' onClick={onClickDecrementHandler}>Decrement</Button>\n          <Button color='inherit' onClick={onClickIncrementHandler}>Increment</Button>\n          <Button color='secondary' onClick={onClickSignOutHandler}>Sign Out</Button>\n        </ButtonGroup>\n      </div>\n      <pre>state: {stateOutput}</pre>\n    </Fragment>\n  );\n  return (\n    <Fragment>\n      {pageTitle}\n      <Box component='span' m={1}>\n        {pageContent}\n      </Box>\n    </Fragment>\n  );\n}","// normal subscription without graphql-codegen\n\nimport * as React from 'react';\nimport { useSubscription, gql } from '@apollo/client';\n\ntype Props = { causeId: string };\ntype DataScheme = { transactionAdded?: any} ;\n\nconst TRANSACTION_ADDED = gql`\nsubscription transactionAdded{\n  transactionAdded {\n    id\n    transactionType\n    resourceType\n    input {\n      entity {\n        id\n        type\n        createdDate\n      }\n    }\n    output {\n      entity {\n        id\n        type\n        createdDate\n      }\n    }\n    quantity\n    currency\n    location\n    createdDate\n  }\n}`;\n\nexport const TransactionsNonCodeGen: React.FC<Props> = ({ causeId }) => {\n  const { data, loading } = useSubscription<DataScheme>(\n    TRANSACTION_ADDED,\n    // { variables: { causeId } }\n  );\n  return <h4>New transaction: {!loading && data && data.transactionAdded ? data.transactionAdded.id : 'waiting' }</h4>;\n};\n","// import SpriteText from 'three-spritetext';\n// import { graphData } from '../../../app/config';\nimport { useApolloClient } from '@apollo/client/react/hooks/useApolloClient';\nimport React, { Fragment, useCallback, useEffect, useRef } from 'react';\nimport ForceGraph3D from 'react-force-graph-3d';\nimport { getAccessToken } from '../../../app';\nimport { useStateValue } from '../../../app/state';\nimport { /*PersonProfileDocument,*/ ReactForceDataDocument, useAssetAddedSubscription, useCauseAddedSubscription, useParticipantAddedSubscription, usePersonAddedSubscription, useReactForceDataLazyQuery, useTransactionAddedSubscription } from '../../../generated/graphql';\nimport { getGraphQLApolloError } from '../../../utils';\nimport { AlertMessage, AlertSeverityType } from '../../material-ui/alert-message';\nimport { LinearIndeterminate } from '../../material-ui/feedback';\n// import { envVariables as e } from '../../../app/config';\n\ntype Props = {};\n// TODO: move to types\nexport interface IState { nodes: Node[], links: Link[] };\nexport type Node = { __typename?: string, id: string, label: string, nodeVal?: number, desc?: string, color?: NodeColor | string, autoColorBy?: string, group?: NodeType | string };\nexport type Link = { __typename?: string, source: string, target: string, label?: string, desc?: string, color?: string, autoColorBy?: string, linkWidth?: number, group?: TransactionType };\nexport enum NodeType { GENESIS, PARTICIPANT, PERSON, CAUSE, ASSET, TRANSACTION };\nexport enum TransactionType { FUNDS, GOODS, VOLUNTARY_HOURS, SERVICE };\nexport enum RelationType { HAS_BORN = 'HAS_BORN', CREATED_CAUSE = 'CREATED_CAUSE', CREATED_ASSET = 'CREATED_ASSET', CREATED_TRANSACTION = 'CREATED_TRANSACTION', TRANSACTION_TO_ENTITY = 'TRANSACTION_TO_ENTITY', }\nexport enum LinkColor { DARK_GREY = '#282828', }\nconst GENESIS_NODE_ID = '00000000-0000-0000-0000-000000000000';\n// must match graphQl node sizes\nexport enum NodeValue { GENESIS = 1, PARTICIPANT = 15, PERSON = 20, CAUSE = 25, ASSET = 30, TRANSACTION = 35, DEBUG = 1 };\nexport enum NodeColor { WHITE = '#ffffff', RED = '#ff0000', ORANGE = '#ffa500', YELLOW = '#ffff00', GREEN = '#aa88aa', BLUE = '#aaaaff', PURPLE = '#4b0082', PINK = '#ee82ee', DEBUG = '#FF4444' };\n\n// const randomWidth = () => Math.round(30);\n\nlet lastParticipantIdAdded: string;\nlet lastPersonIdAdded: string;\nlet lastCauseIdAdded: string;\nlet lastAssetIdAdded: string;\nlet lastTransactionIdAdded: string;\n\nexport const DynamicGraph: React.FC<Props> = (props) => {\n  // old data from setState\n  // const [data, setData] = useState<IState>({ nodes: [], links: [] });\n  // required to get shell width from state\n  const [state] = useStateValue();\n  const fgRef = useRef();\n  // get apollo client instance `client` is now set to the `ApolloClient` instance being used by the\n  const client = useApolloClient();\n  const handleClick = useCallback(node => {\n    // Aim at node from outside it\n    const distance = 40;\n    const distRatio = 1 + distance / Math.hypot(node.x, node.y, node.z);\n\n    (fgRef as any).current.cameraPosition(\n      { x: node.x * distRatio, y: node.y * distRatio, z: node.z * distRatio }, // new position\n      node, // lookAt ({ x, y, z })\n      3000  // ms transition duration\n    );\n  }, [fgRef]);\n  // hooks\n  const [reactForceDataQuery, { data: dataQuery, loading, error }] = useReactForceDataLazyQuery({\n    // TODO always override default env fetchPolicy. first working version of graph data without double render\n    fetchPolicy: 'cache-first', // e.apolloFetchPolicy,\n    variables: {\n      skip: 0,\n      // UNLIMITED\n      // take: 50\n    }\n  });\n  // const { data: dataSub, loading: loadingSub, error: errorSub } = usePersonAddedSubscription();\n\n  // old use memo stuff, before try apollo cache\n  //   useMemo(() => {\n  //     // require to check if dataQuery exists\n  //     if (dataQuery) {\n  //       const nodes = dataQuery.reactForceData.nodes.map((e) => {\n  //         return {\n  //           id: e.id,\n  //           group: e.group,\n  //           nodeVal: e.nodeVal,\n  //           color: e.color,\n  //           label: e.label\n  //         }\n  //       })\n  //       const links = dataQuery.reactForceData.links.map((e) => {\n  //         return {\n  //           source: e.source,\n  //           target: e.target,\n  //           label: e.label,\n  //           group: e.group,\n  //         }\n  //       })\n  //       setData({ nodes, links });\n  //     }\n  //   }, [dataQuery])\n\n  // const click = (setData: any, data: any) => {\n  //   useEffect(() => {\n  //     console.log(\"Click\");\n  //     setData(data);\n  //   }, []);\n  // }\n\n  // 2021-02-06 19:25:24 commented to disappear from console.log\n  // const changeProfile = () => {\n  //   // Combining reads and writes\n  //   // https://www.apollographql.com/docs/react/caching/cache-interaction/#combining-reads-and-writes\n  //   // Get the current to-do list\n  //   const data = client.readQuery({\n  //     query: PersonProfileDocument,\n  //     // query: ReactForceDataDocument,\n  //   });\n  //   // console.log(`data: '${JSON.stringify(data, undefined, 2)}'`);\n  //   // write to cache\n  //   client.writeQuery({\n  //     // must use postfix Document type gql``\n  //     query: PersonProfileDocument,\n  //     data: {\n  //       // must match personProfile with personLogin.user return objects\n  //       personProfile: {\n  //         // the trick is access personProfile from data, use the consoles\n  //         ...data.personProfile,\n  //         username: 'bob',\n  //         email: 'bob@example.com',\n  //       }\n  //     }\n  //   })\n  //   // const dataChanged = client.readQuery({\n  //   //   query: PersonProfileDocument,\n  //   // });\n  //   // console.log(`dataChanged: '${JSON.stringify(dataChanged, undefined, 2)}'`);\n  // };\n\n  const addToGraph = (nodes: Node[] = [], links: Link[] = []) => {\n    // Combining reads and writes\n    // https://www.apollographql.com/docs/react/caching/cache-interaction/#combining-reads-and-writes\n    // Get the current to-do list\n    const data = client.readQuery({\n      query: ReactForceDataDocument,\n      // MissingFieldError {message: \"Can't find field 'reactForceData' on ROOT_QUERY object\"\n      // TODO: notes must match query at 100% even the variables\n      variables: { 'skip': 0 }\n    });\n    // write to cache\n    client.writeQuery({\n      // must use postfix Document type gql``\n      query: ReactForceDataDocument,\n      variables: { 'skip': 0 },\n      data: {\n        // must match reactForceData with personLogin.user return objects\n        reactForceData: {\n          // Cache data may be lost when replacing the reactForceData field of a Query object.\n          // To address this problem (which is not a bug in Apollo Client), either ensure all objects of type GraphData have IDs, or define a custom merge function for the Query.reactForceData field, so InMemoryCache can safely merge these objects:\n          __typename: 'GraphData',\n          // the trick is access reactForceData from data, use the consoles\n          nodes: [\n            ...data.reactForceData.nodes,\n            // ...dataQuery.reactForceData.nodes,\n            ...nodes,\n            // hard coded object that starts to work\n            // {\n            //   __typename: \"GraphNode\",\n            //   id: \"c8ca045c-9d1b-407f-b9ae-31711758f228\",\n            //   label: \"Participant:28\",\n            //   desc: null,\n            //   nodeVal: 1,\n            //   color: \"#ff0000\",\n            //   autoColorBy: null,\n            //   group: 1\n            // }\n          ],\n          links: [\n            // TODO TRY TO USE THE CACHE IN GRAPH AND NOT THE dataQuery.reactForceData maybe it works\n            ...data.reactForceData.links,\n            // ...dataQuery.reactForceData.links,\n            ...links,\n          ],\n        }\n      }\n    })\n    // console.log(`data: '${JSON.stringify(data, undefined, 2)}'`);\n    // const dataChanged = client.readQuery({\n    //   query: ReactForceDataDocument,\n    //   variables: { 'skip': 0 },\n    // });\n    // console.log(`dataChanged: '${JSON.stringify(dataChanged, undefined, 2)}'`);\n  };\n\n  // // subscriptions\n  // // eslint-disable-next-line\n  const { data: participantDataSub, loading: participantLoadingSub, error: participantErrorSub } = useParticipantAddedSubscription();\n  // // eslint-disable-next-line\n  const { data: personDataSub, loading: personLoadingSub, error: personErrorSub } = usePersonAddedSubscription();\n  // // eslint-disable-next-line\n  const { data: causeDataSub, loading: causeLoadingSub, error: causeErrorSub } = useCauseAddedSubscription();\n  // // eslint-disable-next-line\n  // TODO remove fetchPolicy\n  const { data: assetDataSub, loading: assetLoadingSub, error: assetErrorSub } = useAssetAddedSubscription({ /*fetchPolicy: 'cache-only'*/ });\n  // // eslint-disable-next-line\n  const { data: transactionDataSub, loading: transactionLoadingSub, error: transactionErrorSub } = useTransactionAddedSubscription();\n  // // The solution for working with subscriptions at last, is using a useEffect to prevent renders\n  // // UsersObserver component\n  // // https://medium.com/@cbartling/graphql-subscriptions-with-apollo-client-react-hooks-and-hasura-20f67d98be4c\n\n  // participantSubscription\n  if (!participantLoadingSub && participantDataSub && participantDataSub.participantAdded.id !== lastParticipantIdAdded) {\n    // console.info('Received participant GraphQL subscription', participantDataSub);\n    lastParticipantIdAdded = participantDataSub.participantAdded.id;\n    addToGraph([{\n      __typename: 'GraphNode',\n      id: participantDataSub.participantAdded.id, label: `Participant:${participantDataSub.participantAdded.name}`, nodeVal: NodeValue.PARTICIPANT/*NodeValue.DEBUG*/, group: 1,\n      // required else MissingFieldError {message: \"Can't find field 'color' on object\n      desc: 'desc', color: NodeColor.BLUE/*NodeColor.DEBUG*/, autoColorBy: null,\n    }], [{\n      __typename: 'GraphLink',\n      source: participantDataSub.participantAdded.id, target: GENESIS_NODE_ID, label: RelationType.HAS_BORN, group: 1,\n      // required else MissingFieldError {message: \"Can't find field 'color' on object\n      desc: 'desc', color: LinkColor.DARK_GREY, autoColorBy: null,\n    }])\n  }\n\n  // personSubscription\n  if (!personLoadingSub && personDataSub && personDataSub.personAdded.id !== lastPersonIdAdded) {\n    // console.info('Received person GraphQL subscription', personDataSub);\n    lastPersonIdAdded = personDataSub.personAdded.id;\n    addToGraph([{\n      __typename: 'GraphNode',\n      id: personDataSub.personAdded.id, label: `Person:${personDataSub.personAdded.username}`, nodeVal: /*NodeValue.PERSON*/NodeValue.PERSON, group: 1,\n      desc: 'desc', color: NodeColor.PINK/*NodeColor.DEBUG*/, autoColorBy: null,\n    }], [{\n      __typename: 'GraphLink',\n      source: personDataSub.personAdded.id, target: GENESIS_NODE_ID, label: RelationType.HAS_BORN, group: 1,\n      desc: 'desc', color: LinkColor.DARK_GREY, autoColorBy: null,\n    }])\n  }\n\n  // causeSubscription\n  if (!causeLoadingSub && causeDataSub && causeDataSub.causeAdded.id !== lastCauseIdAdded) {\n    // console.info('Received cause GraphQL subscription', causeDataSub);\n    lastCauseIdAdded = causeDataSub.causeAdded.id;\n    addToGraph([{\n      __typename: 'GraphNode',\n      id: causeDataSub.causeAdded.id, label: `Cause:${causeDataSub.causeAdded.name}`, nodeVal: NodeValue.CAUSE/*NodeValue.DEBUG*/, group: 1,\n      desc: 'desc', color: NodeColor.ORANGE/*NodeColor.DEBUG*/, autoColorBy: null,\n    }], [{\n      __typename: 'GraphLink',\n      source: causeDataSub.causeAdded.input.entity.id, target: causeDataSub.causeAdded.id, label: RelationType.CREATED_CAUSE, group: 1,\n      desc: 'desc', color: LinkColor.DARK_GREY, autoColorBy: null,\n    }])\n  }\n\n  // assetSubscription\n  if (!assetLoadingSub && assetDataSub && assetDataSub.assetAdded.id !== lastAssetIdAdded) {\n    // console.info('Received asset GraphQL subscription', assetDataSub);\n    lastAssetIdAdded = assetDataSub.assetAdded.id;\n    addToGraph([{\n      __typename: 'GraphNode',\n      id: assetDataSub.assetAdded.id, label: `Asset:${assetDataSub.assetAdded.name}`, nodeVal: NodeValue.ASSET/*NodeValue.DEBUG*/, group: 1,\n      desc: 'desc', color: NodeColor.YELLOW/*NodeColor.DEBUG*/, autoColorBy: null,\n    }], [{\n      __typename: 'GraphLink',\n      source: assetDataSub.assetAdded.owner.entity.id, target: assetDataSub.assetAdded.id, label: RelationType.CREATED_ASSET, group: 1,\n      desc: 'desc', color: LinkColor.DARK_GREY, autoColorBy: null,\n    }])\n  };\n\n  // transactionSubscription\n  if (!transactionLoadingSub && transactionDataSub && transactionDataSub.transactionAdded.id !== lastTransactionIdAdded) {\n    // console.info('Received transaction GraphQL subscription', transactionDataSub);\n    lastTransactionIdAdded = transactionDataSub.transactionAdded.id;\n    addToGraph([{\n      __typename: 'GraphNode',\n      id: transactionDataSub.transactionAdded.id, label: `Transaction:${transactionDataSub.transactionAdded.transactionType}`, nodeVal: NodeValue.TRANSACTION/*NodeValue.DEBUG*/, group: 1,\n      // required else MissingFieldError {message: \"Can't find field 'color' on object\n      desc: 'desc', color: NodeColor.GREEN/*NodeColor.DEBUG*/, autoColorBy: null,\n    }], [{\n      __typename: 'GraphLink',\n      source: transactionDataSub.transactionAdded.input.entity.id, target: transactionDataSub.transactionAdded.id, label: RelationType.CREATED_TRANSACTION, group: 1,\n      // required else MissingFieldError {message: \"Can't find field 'color' on object\n      desc: 'desc', color: LinkColor.DARK_GREY, autoColorBy: null,\n    }, {\n      __typename: 'GraphLink',\n      source: transactionDataSub.transactionAdded.id, target: transactionDataSub.transactionAdded.output.entity.id, label: RelationType.CREATED_TRANSACTION, group: 1,\n      // required else MissingFieldError {message: \"Can't find field 'color' on object\n      desc: 'desc', color: LinkColor.DARK_GREY, autoColorBy: null,\n    }])\n  }\n\n  // only fire query if has a valid accessToken to prevent after login delay problems\n  useEffect(() => {\n    if (!dataQuery && !loading && getAccessToken()) {\n      reactForceDataQuery();\n    }\n    return () => { }\n  }, [dataQuery, loading, reactForceDataQuery]);\n\n  // subscriptions: participant\n  // if (!participantLoadingSub && participantDataSub && participantDataSub.participantAdded) {\n  //   console.log(participantDataSub);\n  // }\n  if (participantErrorSub) {\n    return <AlertMessage severity={AlertSeverityType.ERROR} message={getGraphQLApolloError(participantErrorSub)} />;\n  }\n  // subscriptions: person\n  // if (!personLoadingSub && personDataSub && personDataSub.personAdded) {\n  //   console.log(personDataSub);\n  // }\n  if (personErrorSub) {\n    return <AlertMessage severity={AlertSeverityType.ERROR} message={getGraphQLApolloError(personErrorSub)} />;\n  }\n  // subscriptions: cause\n  // if (!causeLoadingSub && causeDataSub && causeDataSub.causeAdded) {\n  //   console.log(causeDataSub);\n  // }\n  if (causeErrorSub) {\n    return <AlertMessage severity={AlertSeverityType.ERROR} message={getGraphQLApolloError(causeErrorSub)} />;\n  }\n  // subscriptions: asset\n  // if (!assetLoadingSub && assetDataSub && assetDataSub.assetAdded) {\n  //   console.log(assetDataSub);\n  // }\n  if (assetErrorSub) {\n    return <AlertMessage severity={AlertSeverityType.ERROR} message={getGraphQLApolloError(assetErrorSub)} />;\n  }\n  // subscriptions: transaction\n  // if (!transactionLoadingSub && transactionDataSub && transactionDataSub.transactionAdded) {\n  //   console.log(transactionDataSub);\n  // }\n  if (transactionErrorSub) {\n    return <AlertMessage severity={AlertSeverityType.ERROR} message={getGraphQLApolloError(transactionErrorSub)} />;\n  }\n\n  // catch error first\n  if (error) {\n    return <AlertMessage severity={AlertSeverityType.ERROR} message={error.message} />;\n  }\n\n  if (loading || !dataQuery) {\n    return (\n      <Fragment>\n        <LinearIndeterminate />\n      </Fragment>\n    );\n  }\n\n  // map nodes and links, and ASSIGN its apollo hook's REFERENCES\n  // const nodes = dataQuery.reactForceData.nodes.map((e) => {\n  //   return {\n  //     id: e.id,\n  //     group: e.group,\n  //     nodeVal: e.nodeVal,\n  //     color: e.color,\n  //     label: e.label\n  //   }\n  // })\n  // const links = dataQuery.reactForceData.links.map((e) => {\n  //   return {\n  //     source: e.source,\n  //     target: e.target,\n  //     label: e.label,\n  //     group: e.group,\n  //   }\n  // })\n\n  // apollo cache\n  // client.writeQuery({\n  //   // must use postfix Document type gql``\n  //   query: ReactForceDataDocument,\n  //   data: {\n  //     // must match personProfile with personLogin.user return objects\n  //     personProfile: dataQuery.reactForceData\n  //   }\n  // });\n\n  // random addNode\n  // useEffect(() => {\n  //   setInterval(() => {\n  //     // Add a new connected node every x second\n  //     addNode()\n  //   }, 10000);\n  // }, []);\n\n  // old handler when press remove node\n  // const handleClick = useCallback(node => {\n  //   const { nodes, links } = data;\n  //   // Remove node on click\n  //   const newLinks = links.filter((l) => l.source !== node && l.target !== node);\n  //   // Remove links attached to node\n  //   const newNodes = nodes.slice();\n  //   // Remove node\n  //   newNodes.splice(node.id, 1);\n  //   // Reset node ids to array index\n  //   newNodes.forEach((n, idx) => { n.id = idx; });\n  //   setData({ nodes: newNodes, links: newLinks });\n  // }, [data, setData]);\n\n  // TODO temporary buttons\n  // const handleButton1Click = () => changeProfile();\n  // const handleButton2Click = () => addToGraph();\n\n  // below works\n  // const addNode = () => {\n  //   // Add a new connected\n  //   setData(({ nodes, links }) => {\n  //     const id = nodes.length;\n  //     const target = Math.round(Math.random() * (id - 1));\n  //     const group = Math.round(Math.random() * (Object.keys(TransactionType).length - 1));\n  //     // const color = Math.round(Math.random() * (Object.keys(Color).length - 1));\n  //     return {\n  //       nodes: [...nodes, { id: id.toString(), label: `id${id}`, nodeVal: 1, group }],\n  //       links: [...links, { source: id.toString(), target: target.toString(), label: `${id}>${target}`, group }]\n  //     };\n  //   });\n  // }\n\n  // const handleButton2Click = () => fetch();\n  // const fetch = () => {\n  //   props.client\n  //     .query({\n  //       query: gql`\n  //       query GetRates {\n  //         rates(currency: \"USD\") {\n  //           currency\n  //         }\n  //       }\n  //     `\n  //     })\n  //     .then((result) => {\n  //       console.log(result);\n  //     })\n  //     .catch((error) => {\n  //       console.log(error);\n  //     });\n  // }\n\n  // console.log(`dataQuery.reactForceData.nodes: [${JSON.stringify(dataQuery.reactForceData.nodes, undefined, 2)}]`);\n\n  return (<Fragment>\n    {/* <button children={<span>Fetch</span>} onClick={handleButton2Click} /> */}\n    {/* <button children={<span>changeProfile</span>} onClick={handleButton1Click} /> */}\n    {/* <button children={<span>addToGraph</span>} onClick={handleButton2Click} /> */}\n    <ForceGraph3D\n      ref={fgRef}\n      graphData={{\n        nodes: dataQuery ? dataQuery.reactForceData.nodes.map((e) => {\n          return {\n            id: e.id,\n            group: e.group,\n            nodeVal: e.nodeVal,\n            color: e.color,\n            label: e.label\n          }\n        }) : [],\n        links: dataQuery ? dataQuery.reactForceData.links.map((e) => {\n          return {\n            source: e.source,\n            target: e.target,\n            label: e.label,\n            group: e.group,\n          }\n        }) : [],\n      }}\n      nodeLabel='label'\n      linkLabel='label'\n      showNavInfo={true}\n      nodeAutoColorBy=\"group\"\n      linkAutoColorBy=\"group\"\n      nodeRelSize={5}\n      enableNodeDrag={false}\n      // #fafafa\n      backgroundColor={'#282828'}\n      linkThreeObjectExtend={true}\n      linkDirectionalArrowLength={3.5}\n      linkDirectionalArrowRelPos={1}\n      // linkCurvature={0.25}      \n      nodeVal={node => 100 / ((node as any).nodeVal + 1)}\n      linkWidth={node => (node as any).linkWidth ? (node as any).linkWidth : 1}\n      // linkDirectionalParticleSpeed={node => (node as any).nodeVal * 0.001}\n      // linkDirectionalParticles=\"value\"\n      width={state.shellWidth}\n      height={state.shellWidth}\n      // events\n      onNodeClick={handleClick}\n    // https://github.com/vasturiano/react-force-graph/blob/master/example/text-links/index-3d.html\n    // linkThreeObject={link => {\n    //   // extend link with text sprite\n    //   const sprite = new SpriteText(`${link.source} > ${link.target}`);\n    //   sprite.color = 'lightgrey';\n    //   sprite.textHeight = 1.5;\n    //   return sprite;\n    // }}\n    // linkPositionUpdate={(sprite, { start, end }: { start: any, end: any }): any => {\n    //   const middlePos = Object.assign({\n    //     ...['x', 'y', 'z'].map(c => ({\n    //       // calc middle point\n    //       [c]: start[c] + (end[c] - start[c]) / 2\n    //     }))\n    //   });\n    //   // Position sprite\n    //   Object.assign(sprite.position, middlePos);\n    // }}\n    />\n  </Fragment>)\n};\n","import { makeStyles, Theme } from '@material-ui/core';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Alert from '@material-ui/lab/Alert';\nimport React, { Dispatch, SetStateAction } from 'react';\n\nconst autoHideDuration = 6000;\n\nexport enum SnackbarSeverityType {\n  ERROR = 'error',\n  WARNING = 'warning',\n  INFO = 'info',\n  SUCCESS = 'success',\n}\n\ninterface Props {\n  message: string;\n  severity: SnackbarSeverityType;\n  // pass useState references from outside\n  open: boolean;\n  setOpen: Dispatch<SetStateAction<any>>,\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    width: '100%',\n    '& > * + *': {\n      marginTop: theme.spacing(2),\n      marginBottom: theme.spacing(2),\n    },\n  },\n}));\n\nexport const SnackbarMessage: React.FC<Props> = ({message, severity, setOpen, open}) => {\n  const classes = useStyles();\n  // const [open, setOpen] = React.useState(false);\n\n  const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n    setOpen(false);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Snackbar open={open} autoHideDuration={autoHideDuration} onClose={handleClose}>\n        <Alert onClose={handleClose} severity={severity}>\n          {message}\n        </Alert>\n      </Snackbar>\n    </div>\n  );\n}","import React, { forwardRef, useImperativeHandle } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\n/**\n * use with\n * const childRef = useRef<{ open: () => void }>();\n * now use childRef with\n * const handleClickOpen = () => { childRef.current.open(); }\n * this will fire child component function\n */\n\ninterface Props {\n  ref: any,\n  title?: string;\n  closeButtonLabel: string;\n  dialogActions?: JSX.Element,\n}\n\nexport const CustomDialog: React.FC<Props> = forwardRef(({ title, closeButtonLabel, dialogActions, children }, ref) => {\n  const [open, setOpen] = React.useState<boolean>(false);\n  useImperativeHandle(ref, () => ({\n    // expose fn to outside world ex call it with childRef.current.open();\n    open() { handleClickOpen(); }\n  }));\n  // handlers\n  const handleClickOpen = () => { setOpen(true); };\n  const handleClose = () => { setOpen(false); };\n\n  return (\n    <div>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby='alert-dialog-title'\n        aria-describedby='alert-dialog-description'\n        fullWidth\n      >\n        <DialogTitle id='alert-dialog-title'>{title}</DialogTitle>\n        <DialogContent>\n          {children}\n        </DialogContent>\n        <DialogActions>\n          {dialogActions}\n          <Button onClick={handleClose} color='primary' autoFocus>\n            {closeButtonLabel}\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n});\n","import { ColDef, DataGrid, RowParams } from '@material-ui/data-grid';\nimport * as React from 'react';\n\ninterface Props {\n  columns: ColDef[],\n  rows: any[],\n  attributes?: {\n    pageSize?: number;\n    onRowClick?: (param: RowParams) => void,\n  }\n}\n\n// helper function to convert dataQuery to dataTable data, required to use function expression to use <T> generic and not clash with jsx\nexport const queryDataToDataTableRows = function <T>(columns: ColDef[], data: T[]): any[] {\n  const rows: any[] = [];\n  data.forEach((e: T) => {\n    // init empty object\n    const row: any = {}\n    columns.forEach((c: ColDef) => {\n      row[c.field] = (typeof (e as any)[c.field] === 'object') ? JSON.stringify({ ...(e as any)[c.field], __typename: undefined }) : (e as any)[c.field];\n    });\n    rows.push(row);\n  })\n  return rows;\n}\n\nexport const modalPropertyColumns: ColDef[] = [\n  { field: 'id', hide: true },\n  { field: 'prop', headerName: 'Prop', width: 160, align: 'right' },\n  { field: 'value', headerName: 'Value', width: 340 },\n];\n\nexport const objectPropsToDataTableRows = (data: any): any[] => {\n  const rows: any[] = [];\n  Object.keys(data).forEach((e: string) => {\n    const row: any = {}\n    row['id'] = e;\n    row['prop'] = e;\n    row['value'] = (typeof data[e] === 'object') ? JSON.stringify({ ...data[e], __typename: undefined }) : data[e];\n    rows.push(row);\n  })\n  return rows;\n}\n\nexport const CustomDataTable: React.FC<Props> = ({ rows, columns, attributes }) => {\n  return (\n    <div style={{ width: '100%', height: 423 }}>\n      <DataGrid rows={rows} columns={columns} {...attributes} />\n    </div>\n  );\n}\n","import { Box, Typography } from '@material-ui/core';\nimport { ColDef } from '@material-ui/data-grid';\nimport React, { Fragment, useRef, useState } from 'react';\nimport { appConstants as c, getAccessToken } from '../../app';\nimport { envVariables as e, RouteKey, routes } from '../../app/config';\nimport { AlertMessage, AlertSeverityType } from '../../components/material-ui/alert-message';\nimport { CustomDialog } from '../../components/material-ui/custom-dialog';\nimport { LinearIndeterminate } from '../../components/material-ui/feedback';\nimport { CustomDataTable, modalPropertyColumns, objectPropsToDataTableRows, queryDataToDataTableRows } from '../../components/material-ui/tables';\nimport { PageTitle } from '../../components/material-ui/typography';\nimport { AssetAddedSubscription, useAssetAddedSubscription, useAssetsLazyQuery } from '../../generated/graphql';\nimport { getGraphQLApolloError, useStyles } from '../../utils';\n\ninterface Props { }\nconst assetAdded = new Array<AssetAddedSubscription>();\n\nexport const AssetsQueryPage: React.FC<Props> = () => {\n  // hooks styles\n  const classes = useStyles();\n  // state\n  const [modalRows, setModalRows] = useState([])\n  // hooks\n  const [assetQuery, { data, loading, error }] = useAssetsLazyQuery({\n    fetchPolicy: e.apolloFetchPolicy,\n    variables: {\n      skip: 0,\n      take: 50\n    }\n  });\n  // subscriptions\n  const { data: dataSub, loading: loadingSub, error: errorSub } = useAssetAddedSubscription();\n  \n  // reference to use in module to be exposed to parent in childRef.current\n  const childRef = useRef<{ open: () => void }>();\n\n  // only fire query if has a valid accessToken to prevent after login delay problems\n  if (!data && !loading && getAccessToken()) {\n    assetQuery();\n  }\n\n  // subscriptions: seem that we don't need useEffect, creates some issues when we scroll with double renders and\n  // only work if we scroll, the best way is to check if dataSub.modelAdded.id is different than the last in item in modelAdded array\n  // this way we don't have render's and works with all subscriptions \n  if (!loadingSub && dataSub && dataSub.assetAdded && (\n    (assetAdded.length === 0) ||\n    (assetAdded.length > 0 && assetAdded[assetAdded.length - 1].assetAdded.id !== dataSub.assetAdded.id)\n  )\n  ) {\n    assetAdded.push(dataSub);\n  }\n  if (errorSub) {\n    debugger;\n    return <AlertMessage severity={AlertSeverityType.ERROR} message={getGraphQLApolloError(errorSub)} />;\n  }\n\n  // catch error first\n  if (error) {\n    return <AlertMessage severity={AlertSeverityType.ERROR} message={error.message} />;\n  }\n\n  const pageTitle = <PageTitle>{routes[RouteKey.ASSETS].title}</PageTitle>;\n  if (loading || !data) {\n    return (\n      <Fragment>\n        {pageTitle}\n        <LinearIndeterminate />\n      </Fragment>\n    );\n  }\n\n  // render subscriptionsContent\n  const assets = assetAdded.map((e: AssetAddedSubscription) => (\n    <Box key={e.assetAdded.id} component='span' m={1}>\n      <Typography>{e.assetAdded.name} : {e.assetAdded.id}</Typography>\n    </Box>\n  ));\n  const subscriptionsContent = assetAdded.length > 0 ? assets : <Typography>{c.I18N.waitingForSubscriptions}</Typography>\n\n  // modal handlers\n  const handleClickOpen = () => {\n    // console.log('handleCancel');\n    childRef.current.open();\n  }\n\n  const columns: ColDef[] = [\n    { field: 'id', hide: true },\n    { field: 'name', headerName: 'Name', width: 140, },\n    { field: 'assetType', headerName: 'AssetType', width: 140 },\n    { field: 'description', hide: true },\n    { field: 'ambassadors', hide: true },\n    { field: 'owner', hide: true },\n    { field: 'location', hide: true },\n    { field: 'tags', hide: true },\n    { field: 'participant', hide: true },\n    { field: 'createdDate', hide: true },\n    { field: 'createdByPersonId', hide: true },\n    { field: 'metaData', hide: true },\n    { field: 'metaDataInternal', hide: true },\n  ];\n  // type is to complex to pass in generic\n  const rows = queryDataToDataTableRows<any>(columns, data.assets);\n  const attributes = {\n    pageSize: c.VALUES.dataGridPageSize,\n    onRowClick: (e: { data: any }) => {\n      const rows = objectPropsToDataTableRows(e.data);\n      setModalRows(rows);\n      handleClickOpen();\n    }\n  };\n\n  return (\n    <Fragment>\n      {pageTitle}\n      <CustomDataTable columns={columns} rows={rows} attributes={attributes} />\n      {/* subscriptions */}\n      <Box className={classes.spacerTop}><PageTitle>{c.I18N.subscriptions}</PageTitle></Box>\n      {subscriptionsContent}\n      {/* customDialog */}\n      <CustomDialog ref={childRef} title='details' closeButtonLabel={c.I18N.close}>\n        <CustomDataTable columns={modalPropertyColumns} rows={modalRows} />\n      </CustomDialog>\n    </Fragment>\n  );\n}\n","import Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport React from 'react';\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 345,\n  },\n  media: {\n    height: 140,\n  },\n});\n\ninterface Props {\n  title: string,\n  content: JSX.Element,\n  image: string,\n  imageTitle: string,\n  buttonLabel: string,\n  onClickHandler?: () => void\n}\n\nexport const CustomMediaCard: React.FC<Props> = ({ title, content, image, imageTitle, buttonLabel, onClickHandler }) => {\n  const classes = useStyles();\n  return (\n    <Card className={classes.root}>\n      <CardActionArea>\n        <CardMedia\n          className={classes.media}\n          image={image}\n          title={imageTitle}\n        />\n        <CardContent>\n          <Typography gutterBottom variant='h5' component='h2'>{title}</Typography>\n          {content}\n        </CardContent>\n      </CardActionArea>\n      <CardActions>\n        <Button size='medium' variant='outlined' color='primary' onClick={onClickHandler}>{buttonLabel}</Button>\n      </CardActions>\n    </Card>\n  );\n}","import { Grid, Typography } from '@material-ui/core';\nimport QRCode from 'qrcode.react';\nimport React from 'react';\nimport { appConstants as c } from '../app';\nimport { CustomMediaCard } from '../components/material-ui/cards';\nimport { parseTemplate } from './main-util';\n\n/**\n * generate grid with mediaCard quickButtons from arbitrary data query\n */\nexport const generateMediaCardQuickButton = (data: any[], classes: any, startPic: number, titleTemplate: string, description: string): JSX.Element => {\n  const gridContent = (data.map((e: any, index: number) => {\n    const onClickHandler = () => { console.log(`mediaCard id: ${e.id}`); };\n    return (\n      <Grid item xs={6} md={4} lg={3} key={index}>\n        <CustomMediaCard\n          title={parseTemplate(titleTemplate, e)}\n          content={(\n            <Grid container spacing={3} className={classes.spacerTop}>\n              <Grid item sm={8}><Typography>{description}</Typography></Grid>\n              <Grid item sm={4}><QRCode size={50} value={e.id} /></Grid>\n            </Grid>\n          )}\n          image={`https://picsum.photos/id/${startPic + index}/400/300`}\n          imageTitle={e.fiscalNumber}\n          buttonLabel={`${c.I18N.donate} ${index + 1}€`}\n          onClickHandler={onClickHandler}\n          />\n      </Grid>\n    )\n  }));\n  return (<Grid container spacing={3}>{gridContent}</Grid>)\n}","/* eslint-disable no-template-curly-in-string */\nimport { Box, Typography } from '@material-ui/core';\nimport { ColDef } from '@material-ui/data-grid';\nimport React, { Fragment, useRef, useState } from 'react';\nimport { appConstants as c, getAccessToken } from '../../app';\nimport { envVariables as e, RouteKey, routes } from '../../app/config';\nimport { AlertMessage, AlertSeverityType } from '../../components/material-ui/alert-message';\nimport { CustomDialog } from '../../components/material-ui/custom-dialog';\nimport { LinearIndeterminate } from '../../components/material-ui/feedback';\nimport { CustomDataTable, modalPropertyColumns, objectPropsToDataTableRows, queryDataToDataTableRows } from '../../components/material-ui/tables';\nimport { PageTitle } from '../../components/material-ui/typography';\nimport { CauseAddedSubscription, useCauseAddedSubscription, useCausesLazyQuery } from '../../generated/graphql';\nimport { getGraphQLApolloError, useStyles } from '../../utils';\nimport { generateMediaCardQuickButton } from '../../utils/tsx-util';\n\ninterface Props { }\nconst causeAdded = new Array<CauseAddedSubscription>();\n\nexport const CausesQueryPage: React.FC<Props> = () => {\n  // hooks styles\n  const classes = useStyles();\n  // state\n  const [modalRows, setModalRows] = useState([])\n  // hooks\n  const [causeQuery, { data, loading, error }] = useCausesLazyQuery({\n    fetchPolicy: e.apolloFetchPolicy,\n    variables: {\n      skip: 0,\n      take: 50\n    }\n  });\n  // subscriptions\n  const { data: dataSub, loading: loadingSub, error: errorSub } = useCauseAddedSubscription();\n\n  // reference to use in module to be exposed to parent in childRef.current\n  const childRef = useRef<{ open: () => void }>();\n\n  // only fire query if has a valid accessToken to prevent after login delay problems\n  if (!data && !loading && getAccessToken()) {\n    causeQuery();\n  }\n\n  // subscriptions: seem that we don't need useEffect, creates some issues when we scroll with double renders and\n  // only work if we scroll, the best way is to check if dataSub.modelAdded.id is different than the last in item in modelAdded array\n  // this way we don't have render's and works with all subscriptions \n  if (!loadingSub && dataSub && dataSub.causeAdded && (\n    (causeAdded.length === 0) ||\n    (causeAdded.length > 0 && causeAdded[causeAdded.length - 1].causeAdded.id !== dataSub.causeAdded.id)\n  )\n  ) {\n    causeAdded.push(dataSub);\n  }\n  if (errorSub) {\n    return <AlertMessage severity={AlertSeverityType.ERROR} message={getGraphQLApolloError(errorSub)} />;\n  }\n\n  // catch error first\n  if (error) {\n    return <AlertMessage severity={AlertSeverityType.ERROR} message={error.message} />;\n  }\n\n  const pageTitle = <PageTitle>{routes[RouteKey.CAUSES].title}</PageTitle>;\n  if (loading || !data) {\n    return (\n      <Fragment>\n        {pageTitle}\n        <LinearIndeterminate />\n      </Fragment>\n    );\n  }\n\n  // render subscriptionsContent\n  const causes = causeAdded.map((e: CauseAddedSubscription) => (\n    <Box key={e.causeAdded.id} component='span' m={1}>\n      <Typography>{e.causeAdded.name} : {e.causeAdded.id}</Typography>\n    </Box>\n  ));\n  const subscriptionsContent = causeAdded.length > 0 ? causes : <Typography>{c.I18N.waitingForSubscriptions}</Typography>\n\n  // modal handlers\n  const handleClickOpen = () => {\n    // console.log('handleCancel');\n    childRef.current.open();\n  }\n\n  const columns: ColDef[] = [\n    { field: 'id', headerName: 'Id', hide: true },\n    { field: 'name', headerName: 'Name', width: 220 },\n    { field: 'email', headerName: 'Email', width: 220 },\n    { field: 'tags', headerName: 'Tags', width: 220 },\n    { field: 'startDate', hide: true },\n    { field: 'endDate', hide: true },\n    { field: 'ambassadors', hide: true },\n    { field: 'location', hide: true },\n    { field: 'input', hide: true },\n    { field: 'fundsBalance', hide: true },\n    { field: 'volunteeringHoursBalance', hide: true },\n    { field: 'goodsStock', hide: true },\n    { field: 'participant', hide: true },\n    { field: 'createdDate', hide: true },\n    { field: 'createdByPersonId', hide: true },\n    { field: 'metaData', hide: true },\n    { field: 'metaDataInternal', hide: true },\n  ];\n  // type is to complex to pass in generic\n  const rows = queryDataToDataTableRows<any>(columns, data.causes);\n  const attributes = {\n    pageSize: c.VALUES.dataGridPageSize,\n    onRowClick: (e: { data: any }) => {\n      const rows = objectPropsToDataTableRows(e.data);\n      setModalRows(rows);\n      handleClickOpen();\n    }\n  };\n\n  return (\n    <Fragment>\n      {pageTitle}\n      <CustomDataTable columns={columns} rows={rows} attributes={attributes} />\n      {/* QuickButtons */}\n      <Box className={classes.spacerTop}><PageTitle>{c.I18N.quickDonateButtons}</PageTitle></Box>\n      {generateMediaCardQuickButton(data.causes, classes, 228, '${name} / ${email}', 'Cras euismod elementum turpis eget pharetra. Class aptent taciti sociosqu ...')}\n      {/* subscriptions */}\n      <Box className={classes.spacerTop}><PageTitle>{c.I18N.subscriptions}</PageTitle></Box>\n      {subscriptionsContent}\n      {/* customDialog */}\n      <CustomDialog ref={childRef} title='details' closeButtonLabel={c.I18N.close}>\n        <CustomDataTable columns={modalPropertyColumns} rows={modalRows} />\n      </CustomDialog>\n    </Fragment>\n  );\n}\n","/* eslint-disable no-template-curly-in-string */\nimport { Box, Typography } from '@material-ui/core';\nimport { ColDef } from '@material-ui/data-grid';\nimport React, { Fragment, useRef, useState } from 'react';\nimport { appConstants as c, getAccessToken } from '../../app';\nimport { envVariables as e, RouteKey, routes } from '../../app/config';\nimport { AlertMessage, AlertSeverityType } from '../../components/material-ui/alert-message';\nimport { CustomDialog } from '../../components/material-ui/custom-dialog';\nimport { LinearIndeterminate } from '../../components/material-ui/feedback';\nimport { CustomDataTable, modalPropertyColumns, objectPropsToDataTableRows, queryDataToDataTableRows } from '../../components/material-ui/tables';\nimport { PageTitle } from '../../components/material-ui/typography';\nimport { ParticipantAddedSubscription, useParticipantAddedSubscription, useParticipantsLazyQuery } from '../../generated/graphql';\nimport { getGraphQLApolloError, useStyles } from '../../utils';\nimport { generateMediaCardQuickButton } from '../../utils/tsx-util';\n\ninterface Props { }\nconst participantAdded = new Array<ParticipantAddedSubscription>();\n\nexport const ParticipantsQueryPage: React.FC<Props> = () => {\n  // hooks styles\n  const classes = useStyles();\n  // state\n  const [modalRows, setModalRows] = useState([])\n  // hooks\n  const [participantQuery, { data, loading, error }] = useParticipantsLazyQuery({\n    fetchPolicy: e.apolloFetchPolicy,\n    variables: {\n      skip: 0,\n      take: 50\n    }\n  });\n  // subscriptions\n  const { data: dataSub, loading: loadingSub, error: errorSub } = useParticipantAddedSubscription();\n  // reference to use in module to be exposed to parent in childRef.current\n  const childRef = useRef<{ open: () => void }>();\n\n  // only fire query if has a valid accessToken to prevent after login delay problems\n  if (!data && !loading && getAccessToken()) {\n    participantQuery();\n  }\n\n  // subscriptions: seem that we don't need useEffect, creates some issues when we scroll with double renders and\n  // only work if we scroll, the best way is to check if dataSub.participantAdded.id is different than the last in item in participantAdded array\n  // this way we don't have render's and works with all subscriptions \n  if (!loadingSub && dataSub && dataSub.participantAdded && (\n    (participantAdded.length === 0) ||\n    (participantAdded.length > 0 && participantAdded[participantAdded.length - 1].participantAdded.id !== dataSub.participantAdded.id)\n  )\n  ) {\n    participantAdded.push(dataSub);\n  }\n  if (errorSub) {\n    return <AlertMessage severity={AlertSeverityType.ERROR} message={getGraphQLApolloError(errorSub)} />;\n  }\n\n  // catch error first\n  if (error) {\n    return <AlertMessage severity={AlertSeverityType.ERROR} message={error.message} />;\n  }\n\n  const pageTitle = <PageTitle>{routes[RouteKey.PARTICIPANTS].title}</PageTitle>;\n  if (loading || !data) {\n    return (\n      <Fragment>\n        {pageTitle}\n        <LinearIndeterminate />\n      </Fragment>\n    );\n  }\n\n  // render subscriptionsContent\n  const participants = participantAdded.map((e: ParticipantAddedSubscription) => (\n    <Box key={e.participantAdded.id} component='span' m={1}>\n      <Typography>{e.participantAdded.name} : {e.participantAdded.id}</Typography>\n    </Box>\n  ));\n  const subscriptionsContent = participantAdded.length > 0 ? participants : <Typography>{c.I18N.waitingForSubscriptions}</Typography>\n\n  // modal handlers\n  const handleClickOpen = () => {\n    // console.log('handleCancel');\n    childRef.current.open();\n  }\n\n  const columns: ColDef[] = [\n    { field: 'id', headerName: 'Id', hide: true },\n    { field: 'code', hide: true },\n    { field: 'name', headerName: 'Name', width: 220 },\n    { field: 'email', headerName: 'Email', width: 220 },\n    { field: 'fiscalNumber', headerName: 'FiscalNumber', width: 220 },\n    { field: 'ambassadors', hide: true },\n    { field: 'fundsBalance', hide: true },\n    { field: 'volunteeringHoursBalance', hide: true },\n    { field: 'goodsStock', hide: true },\n    { field: 'msp', hide: true },\n    { field: 'participant', hide: true },\n    { field: 'createdDate', hide: true },\n    { field: 'createdByPersonId', hide: true },\n    { field: 'metaData', hide: true },\n    { field: 'metaDataInternal', hide: true },\n  ];\n  // type is to complex to pass in generic\n  const rows = queryDataToDataTableRows<any>(columns, data.participants);\n  const attributes = {\n    pageSize: c.VALUES.dataGridPageSize,\n    onRowClick: (e: { data: any }) => {\n      const rows = objectPropsToDataTableRows(e.data);\n      setModalRows(rows);\n      handleClickOpen();\n    }\n  };\n\n  return (\n    <Fragment>\n      {pageTitle}\n      <CustomDataTable columns={columns} rows={rows} attributes={attributes} />\n      {/* quickButtons */}\n      <Box className={classes.spacerTop}><PageTitle>{c.I18N.quickDonateButtons}</PageTitle></Box>\n      {generateMediaCardQuickButton(data.participants, classes, 128, '${name} / ${email}', 'Cras euismod elementum turpis eget pharetra. Class aptent taciti sociosqu ...')}\n      {/* subscriptions */}\n      <Box className={classes.spacerTop}><PageTitle>{c.I18N.subscriptions}</PageTitle></Box>\n      {subscriptionsContent}\n      {/* customDialog */}\n      <CustomDialog ref={childRef} title='details' closeButtonLabel={c.I18N.close}>\n        <CustomDataTable columns={modalPropertyColumns} rows={modalRows} />\n      </CustomDialog>\n    </Fragment>\n  );\n}\n","/* eslint-disable no-template-curly-in-string */\nimport { Box, Typography } from '@material-ui/core';\nimport { ColDef } from '@material-ui/data-grid';\nimport React, { Fragment, useRef, useState } from 'react';\nimport { appConstants as c, getAccessToken } from '../../app';\nimport { envVariables as e, RouteKey, routes } from '../../app/config';\nimport { AlertMessage, AlertSeverityType } from '../../components/material-ui/alert-message';\nimport { CustomDialog } from '../../components/material-ui/custom-dialog';\nimport { LinearIndeterminate } from '../../components/material-ui/feedback';\nimport { CustomDataTable, modalPropertyColumns, objectPropsToDataTableRows, queryDataToDataTableRows } from '../../components/material-ui/tables';\nimport { PageTitle } from '../../components/material-ui/typography';\nimport { Person, PersonAddedSubscription, usePersonAddedSubscription, usePersonsLazyQuery } from '../../generated/graphql';\nimport { getGraphQLApolloError, useStyles } from '../../utils';\nimport { generateMediaCardQuickButton } from '../../utils/tsx-util';\n\ninterface Props { }\nconst personAdded = new Array<PersonAddedSubscription>();\n\nexport const PersonQueryPage: React.FC<Props> = () => {\n  // hooks styles\n  const classes = useStyles();\n  // state\n  const [modalRows, setModalRows] = useState([])\n  // hooks\n  const [personQuery, { data, loading, error }] = usePersonsLazyQuery({\n    fetchPolicy: e.apolloFetchPolicy,\n    variables: {\n      skip: 0,\n      take: 50\n    }\n  });\n  // subscriptions\n  const { data: dataSub, loading: loadingSub, error: errorSub } = usePersonAddedSubscription();\n  // reference to use in module to be exposed to parent in childRef.current\n  const childRef = useRef<{ open: () => void }>();\n\n  // only fire query if has a valid accessToken to prevent after login delay problems\n  if (!data && !loading && getAccessToken()) {\n    personQuery();\n  }\n\n  // subscriptions: seem that we don't need useEffect, creates some issues when we scroll with double renders and\n  // only work if we scroll, the best way is to check if dataSub.modelAdded.id is different than the last in item in modelAdded array\n  // this way we don't have render's and works with all subscriptions \n  if (!loadingSub && dataSub && dataSub.personAdded && (\n    (personAdded.length === 0) ||\n    (personAdded.length > 0 && personAdded[personAdded.length - 1].personAdded.id !== dataSub.personAdded.id)\n  )\n  ) {\n    personAdded.push(dataSub);\n  }\n  if (errorSub) {\n    return <AlertMessage severity={AlertSeverityType.ERROR} message={getGraphQLApolloError(errorSub)} />;\n  }\n  \n  // catch error first\n  if (error) {\n    return <AlertMessage severity={AlertSeverityType.ERROR} message={error.message} />;\n  }\n\n  const pageTitle = <PageTitle>{routes[RouteKey.PERSONS].title}</PageTitle>;\n  if (loading || !data) {\n    return (\n      <Fragment>\n        {pageTitle}\n        <LinearIndeterminate />\n      </Fragment>\n    );\n  }\n\n  // render subscriptionsContent\n  const persons = personAdded.map((e: PersonAddedSubscription) => (\n    <Box key={e.personAdded.id} component='span' m={1}>\n      <Typography>{e.personAdded.username} : {e.personAdded.id}</Typography>\n    </Box>\n  ));\n  const subscriptionsContent = personAdded.length > 0 ? persons : <Typography>{c.I18N.waitingForSubscriptions}</Typography>\n\n  // modal handlers\n  const handleClickOpen = () => {\n    // console.log('handleCancel');\n    childRef.current.open();\n  }\n  // const handleCancel = () => {\n  //   console.log('handleCancel');\n  // }\n  // other actions\n  // const dialogActions = (<Button onClick={handleCancel} color='primary'>Cancel</Button>);\n\n  const columns: ColDef[] = [\n    { field: 'id', hide: true },\n    { field: 'username', headerName: 'Username', width: 140, },\n    { field: 'fiscalNumber', headerName: 'FiscalNumber', width: 140 },\n    { field: 'email', headerName: 'Email', width: 240 },\n    { field: 'mobilePhone', headerName: 'MobilePhone', hide: true },\n    { field: 'firstName', hide: true },\n    { field: 'lastName', hide: true },\n    { field: 'gender', hide: true },\n    { field: 'height', hide: true },\n    { field: 'fatherFirstName', hide: true },\n    { field: 'fatherLastName', hide: true },\n    { field: 'motherFirstName', hide: true },\n    { field: 'motherLastName', hide: true },\n    { field: 'birthDate', hide: true },\n    { field: 'nationality', hide: true },\n    { field: 'city', hide: true },\n    { field: 'postal', hide: true },\n    { field: 'region', hide: true },\n    { field: 'country', hide: true },\n    { field: 'geoLocation', hide: true },\n    { field: 'timezone', hide: true },\n    { field: 'personalInfo', hide: true },\n    { field: 'documentNumber', hide: true },\n    { field: 'documentType', hide: true },\n    { field: 'cardVersion', hide: true },\n    { field: 'emissionDate', hide: true },\n    { field: 'expirationDate', hide: true },\n    { field: 'emittingEntity', hide: true },\n    { field: 'identityNumber', hide: true },\n    { field: 'socialSecurityNumber', hide: true },\n    { field: 'beneficiaryNumber', hide: true },\n    { field: 'pan', hide: true },\n    { field: 'requestLocation', hide: true },\n    { field: 'otherInformation', hide: true },\n    { field: 'registrationDate', hide: true },\n    { field: 'profile', hide: true },\n    { field: 'fundsBalance', hide: true },\n    { field: 'volunteeringHoursBalance', hide: true },\n    { field: 'goodsStock', hide: true },\n    { field: 'attributes', hide: true },\n    { field: 'roles', hide: true },\n    { field: 'participant', hide: true },\n    { field: 'createdDate', hide: true },\n    { field: 'metaData', hide: true },\n    { field: 'metaDataInternal', hide: true },\n  ];\n  const rows = queryDataToDataTableRows<Person>(columns, data.persons);\n  const attributes = {\n    pageSize: c.VALUES.dataGridPageSize,\n    onRowClick: (e: { data: any }) => {\n      const rows = objectPropsToDataTableRows(e.data);\n      setModalRows(rows);\n      handleClickOpen();\n    }\n  };\n\n  return (\n    <Fragment>\n      {pageTitle}\n      {/* <Box component='span' m={1}>\n        {data.persons.map((e: Person) =>\n          <Typography key={e.id}>{e.id} : {e.firstName} : {e.lastName} : {e.email} : {e.username} : {e.fiscalNumber} : {e.mobilePhone}</Typography>\n        )}\n      </Box> */}\n      <CustomDataTable columns={columns} rows={rows} attributes={attributes} />\n      {/* quickButtons */}\n      <Box className={classes.spacerTop}><PageTitle>{c.I18N.quickDonateButtons}</PageTitle></Box>\n      {generateMediaCardQuickButton(data.persons, classes, 28, '${username} / ${email}', 'Cras euismod elementum turpis eget pharetra. Class aptent taciti sociosqu ...')}\n      {/* <Button variant=\"outlined\" color=\"primary\" onClick={handleClickOpen}>\n        Open form dialog\n      </Button> */}\n      {/* subscriptions */}\n      <Box className={classes.spacerTop}><PageTitle>{c.I18N.subscriptions}</PageTitle></Box>\n      {subscriptionsContent}\n      {/* customDialog */}\n      <CustomDialog ref={childRef} title='details' closeButtonLabel={c.I18N.close}>\n        <CustomDataTable columns={modalPropertyColumns} rows={modalRows} />\n      </CustomDialog>\n    </Fragment>\n  );\n}\n","import { ColDef } from '@material-ui/data-grid';\nimport React, { Fragment, useRef, useState } from 'react';\nimport { appConstants as c, getAccessToken } from '../../app';\nimport { envVariables as e, RouteKey, routes } from '../../app/config';\nimport { AlertMessage, AlertSeverityType } from '../../components/material-ui/alert-message';\nimport { CustomDialog } from '../../components/material-ui/custom-dialog';\nimport { LinearIndeterminate } from '../../components/material-ui/feedback';\nimport { CustomDataTable, modalPropertyColumns, objectPropsToDataTableRows, queryDataToDataTableRows } from '../../components/material-ui/tables';\nimport { PageTitle } from '../../components/material-ui/typography';\nimport { useTransactionsLazyQuery, useTransactionAddedSubscription, TransactionAddedSubscription } from '../../generated/graphql';\nimport { getGraphQLApolloError, useStyles } from '../../utils';\nimport { Box, Typography } from '@material-ui/core';\n\ninterface Props { }\nconst transactionAdded = new Array<TransactionAddedSubscription>();\n\nexport const TransactionsQueryPage: React.FC<Props> = () => {\n\t// hooks styles\n  const classes = useStyles();\n  // state\n  const [modalRows, setModalRows] = useState([])\n  // hooks\n  const [transactionQuery, { data, loading, error }] = useTransactionsLazyQuery({\n    fetchPolicy: e.apolloFetchPolicy,\n    variables: {\n      skip: 0,\n      take: 50\n    }\n  });\n  // subscriptions\n  const { data: dataSub, loading: loadingSub, error: errorSub } = useTransactionAddedSubscription();\n  // reference to use in module to be exposed to parent in childRef.current\n  const childRef = useRef<{ open: () => void }>();\n\n  // only fire query if has a valid accessToken to prevent after login delay problems\n  if (!data && !loading && getAccessToken()) {\n    transactionQuery();\n  }\n\n  // subscriptions: seem that we don't need useEffect, creates some issues when we scroll with double renders and\n  // only work if we scroll, the best way is to check if dataSub.modelAdded.id is different than the last in item in modelAdded array\n  // this way we don't have render's and works with all subscriptions \n  if (!loadingSub && dataSub && dataSub.transactionAdded && (\n    (transactionAdded.length === 0) ||\n    (transactionAdded.length > 0 && transactionAdded[transactionAdded.length - 1].transactionAdded.id !== dataSub.transactionAdded.id)\n  )\n  ) {\n    transactionAdded.push(dataSub);\n  }\n  if (errorSub) {\n    return <AlertMessage severity={AlertSeverityType.ERROR} message={getGraphQLApolloError(errorSub)} />;\n  }\n\n  // catch error first\n  if (error) {\n    return <AlertMessage severity={AlertSeverityType.ERROR} message={error.message} />;\n  }\n\n  const pageTitle = <PageTitle>{routes[RouteKey.TRANSACTIONS].title}</PageTitle>;\n  if (loading || !data) {\n    return (\n      <Fragment>\n        {pageTitle}\n        <LinearIndeterminate />\n      </Fragment>\n    );\n  }\n\n  // render subscriptionsContent\n  const transactions = transactionAdded.map((e: TransactionAddedSubscription) => (\n    <Box key={e.transactionAdded.id} component='span' m={1}>\n      <Typography>{e.transactionAdded.transactionType} : {e.transactionAdded.id}</Typography>\n    </Box>\n  ));\n  const subscriptionsContent = transactionAdded.length > 0 ? transactions : <Typography>{c.I18N.waitingForSubscriptions}</Typography>\n\n  // modal handlers\n  const handleClickOpen = () => {\n    // console.log('handleCancel');\n    childRef.current.open();\n  }\n\n  const columns: ColDef[] = [\n    { field: 'id', hide: true },\n    { field: 'transactionType', headerName: 'TransactionType', width: 200 },\n    { field: 'resourceType', headerName: 'ResourceType', width: 200 },\n    { field: 'input' },\n    { field: 'output' },\n    { field: 'quantity', hide: true },\n    { field: 'currency', hide: true },\n    { field: 'location', hide: true },\n    { field: 'participant', hide: true },\n    { field: 'assetId', hide: true },\n    { field: 'goods', hide: true },\n    { field: 'tags', hide: true },\n    { field: 'createdDate', hide: true },\n    { field: 'createdByPersonId', hide: true },\n    { field: 'metaData', hide: true },\n    { field: 'metaDataInternal', hide: true },    \n  ];\n  // type is to complex to pass in generic\n  const rows = queryDataToDataTableRows<any>(columns, data.transactions);\n  const attributes = {\n    pageSize: c.VALUES.dataGridPageSize,\n    onRowClick: (e: { data: any }) => {\n      const rows = objectPropsToDataTableRows(e.data);\n      setModalRows(rows);\n      handleClickOpen();\n    }\n  };\n\n  return (\n    <Fragment>\n      {pageTitle}\n      <CustomDataTable columns={columns} rows={rows} attributes={attributes} />\n      {/* subscriptions */}\n      <Box className={classes.spacerTop}><PageTitle>{c.I18N.subscriptions}</PageTitle></Box>\n      {subscriptionsContent}\n      {/* customDialog */}\n      <CustomDialog ref={childRef} title='details' closeButtonLabel={c.I18N.close}>\n        <CustomDataTable columns={modalPropertyColumns} rows={modalRows} />\n      </CustomDialog>\n    </Fragment>\n  );\n}\n","import { Box, Typography } from '@material-ui/core';\nimport React, { Fragment } from 'react';\nimport { AlertMessage, AlertSeverityType } from '../../components/material-ui/alert-message';\nimport { PageTitle } from '../../components/material-ui/typography';\nimport { TransactionAddedSubscription, useTransactionAddedSubscription } from '../../generated/graphql';\n\ntype Props = { causeId: string };\nconst transactionAdded = new Array<TransactionAddedSubscription>();\n\n// TODO send and filter by causeId, personId or participantId\nexport const TransactionSubscriptionPage: React.FC<Props> = ({ causeId }) => {\n  // state\n  const { data, loading, error } = useTransactionAddedSubscription();\n\n  if (!loading && data && data.transactionAdded) {\n    transactionAdded.push(data);\n  }\n\n  if (error) {\n    return <AlertMessage severity={AlertSeverityType.ERROR} message={error.message} />;\n  }\n\n  const transactions = transactionAdded.map((e: TransactionAddedSubscription) => (\n    <Box key={e.transactionAdded.id} component='span' m={1}>\n      <Typography>{e.transactionAdded.createdDate} : {e.transactionAdded.id} : {e.transactionAdded.transactionType} : {e.transactionAdded.resourceType}</Typography>\n    </Box>\n  ));\n\n  const pageTitle = <PageTitle>TransactionsAdded</PageTitle>;\n  const pageContent = transactionAdded.length > 0 ? transactions : <Typography>waiting for transactions...</Typography>\n  return (\n    <Fragment>\n      {pageTitle}\n      <Box component='span' m={1}>\n        {pageContent}\n      </Box>\n    </Fragment>\n  );\n};\n","import { Box, FormControlLabel, Switch } from '@material-ui/core';\nimport React, { Fragment, useCallback, useRef, useState } from 'react';\nimport BarcodeReader from 'react-barcode-reader';\n// import { useBarcodeScanner} from 'react-barcode-reader'\nimport { useFieldArray, useForm } from 'react-hook-form';\nimport { RouteComponentProps } from 'react-router';\nimport { appConstants as c, mokeFormData } from '../../app';\nimport { commonFormFieldGoodsBag, commonFormFieldGoodsBagEan, commonFormFieldGoodsBagInput, commonFormFieldGoodsBagQuantity, commonFormFieldLocation, commonFormFieldMetadata, commonFormFieldMetadataInternal, commonFormFieldOutputEntity, commonFormFieldOutputTypeEntity, envVariables as e, formCommonOptions, RouteKey, routes } from '../../app/config';\nimport { useStateValue } from '../../app/state';\nimport { AlertMessage, AlertSeverityType } from '../../components/material-ui/alert-message';\nimport { LinearIndeterminate } from '../../components/material-ui/feedback';\nimport { PageTitle } from '../../components/material-ui/typography';\nimport { SnackbarMessage, SnackbarSeverityType } from '../../components/snackbar-message';\nimport { NewTransactionInput, useCausesLazyQuery, useTransactionNewMutation } from '../../generated/graphql';\nimport { AutocompleteAndSelectOptions, EntityType, FormDefaultValues, FormPropFields, GoodsBagItem, ResourceType, Tag, TransactionType } from '../../types';\nimport { generateFormButtonsDiv, generateFormDefinition, getGraphQLApolloError, isValidEnum, isValidJsonObject, useStyles, validateRegExpArray } from '../../utils';\n\n// eslint-disable-next-line\nlet renderCount = 0;\n\ntype FormInputs = {\n\tinputType: EntityType;\n\tinput: string;\n\toutputType: EntityType;\n\toutput: string;\n\tgoodsBag: Array<GoodsBagItem>\n\tlocation?: string\n\ttags: Tag[],\n\tmetaData?: any,\n\tmetaDataInternal?: any,\n};\nenum FormFieldNames {\n\tINPUT_TYPE = 'inputType',\n\tINPUT = 'input',\n\tOUTPUT_TYPE = 'outputType',\n\tOUTPUT = 'output',\n\tGOODS_BAG = 'goodsBag',\n\tLOCATION = 'location',\n\tTAGS = 'tags',\n\tMETA_DATA = 'metaData',\n\tMETA_DATA_INTERNAL = 'metaDataInternal',\n};\nconst defaultValues: FormDefaultValues = {\n\tinputType: c.VALUES.undefined,\n\tinput: '',\n\toutputType: c.VALUES.undefined,\n\toutput: c.VALUES.undefined,\n\tgoodsBag: [{ barCode: '', quantity: 1 }],\n\tlocation: mokeFormData ? c.VALUES.mokeLocation : '',\n\ttags: mokeFormData ? c.VALUES.mokeTags : [],\n\tmetaData: '',\n\tmetaDataInternal: '',\n};\n\n// use RouteComponentProps to get history props from Route\nexport const TransactionGoodsForm: React.FC<RouteComponentProps> = ({ history }) => {\n\t// BOF of `DRY code shared with transactions & goods`\n\n\t// hooks styles\n\tconst classes = useStyles();\n\t// hooks state\n\t// eslint-disable-next-line\n\tconst [state, dispatch] = useStateValue();\n\t// state\n\tconst [locked, setLocked] = useState<boolean>(false)\n\t// snackBar state\n\tconst [snackbarOpen, setSnackbarOpen] = React.useState<boolean>(false);\n\t// hooks react form\n\tconst { handleSubmit, watch, errors, control, reset, getValues, setValue, trigger } = useForm<FormInputs>({ defaultValues, ...formCommonOptions });\n\t// hooks: apollo\n\tconst [transactionNewMutation, { loading, error: apolloError }] = useTransactionNewMutation();\n\t// extract error message\n\tconst errorMessage = getGraphQLApolloError(apolloError);\n\n\tconst { fields, append, remove } = useFieldArray({\n\t\t// control props comes from useForm (optional: if you are using FormContext)\n\t\tcontrol,\n\t\t// unique name for your Field Array\n\t\tname: 'goodsBag',\n\t\t// default to \"id\", you can change the key name\n\t\t// keyName: \"id\"\n\t});\n\n\t// output personOptions: require [] array to be a reference, not a primitive\n\tconst [causeOptions, setCauseOptions] = useState<AutocompleteAndSelectOptions[]>([]);\n\tconst [causeOptionsLoaded, setCauseOptionsLoaded] = useState<boolean>(false);\n\tconst [causeQuery, { data: causeQueryData, loading: causeQueryLoading, error: causeQueryError }] = useCausesLazyQuery({\n\t\tfetchPolicy: e.apolloFetchPolicy,\n\t\tvariables: { skip: 0, take: 50 }\n\t});\n\tif (!causeQueryData && !causeQueryLoading) { causeQuery(); };\n\tif (!causeOptionsLoaded && causeQueryData && !causeQueryLoading && !causeQueryError) {\n\t\tsetCauseOptions(causeQueryData.causes.map((e) => {\n\t\t\treturn { title: `${e.name}`, value: e.id }\n\t\t}));\n\t\tsetCauseOptionsLoaded(true);\n\t}\n\n\t// customBag definition\n\tconst goodsBag: Array<GoodsBagItem> = watch('goodsBag');\n\tconst maxGoodsItems = 10;\n\t// initialize any new refs, required to create refs outside of loop\n\tconst goodsBagEanInputRef: any[] = [];\n\tgoodsBagEanInputRef[0] = useRef(); goodsBagEanInputRef[1] = useRef(); goodsBagEanInputRef[2] = useRef(); goodsBagEanInputRef[3] = useRef(); goodsBagEanInputRef[4] = useRef(); goodsBagEanInputRef[5] = useRef(); goodsBagEanInputRef[6] = useRef(); goodsBagEanInputRef[7] = useRef(); goodsBagEanInputRef[8] = useRef(); goodsBagEanInputRef[9] = useRef();\n\tconst goodsBagQuantityInputRef: any[] = [];\n\tgoodsBagQuantityInputRef[0] = useRef(); goodsBagQuantityInputRef[1] = useRef(); goodsBagQuantityInputRef[2] = useRef(); goodsBagQuantityInputRef[3] = useRef(); goodsBagQuantityInputRef[4] = useRef(); goodsBagQuantityInputRef[5] = useRef(); goodsBagQuantityInputRef[6] = useRef(); goodsBagQuantityInputRef[7] = useRef(); goodsBagQuantityInputRef[8] = useRef(); goodsBagQuantityInputRef[9] = useRef();\n\t// goodsBagEan\n\tconst goodsBagEan: FormPropFields = {\n\t\t...commonFormFieldGoodsBagEan(!causeOptionsLoaded),\n\t};\n\t// goodsBagQuantity\n\tconst goodsBagQuantity: FormPropFields = {\n\t\t...commonFormFieldGoodsBagQuantity(!causeOptionsLoaded),\n\t};\n\n\t// DRY function shared with transactions & goods, have setValue, trigger, let it be simple\n\tconst handleIncreaseDecreaseGood = (goodsBagArg: Array<GoodsBagItem>, index: number, value: number) => {\n\t\tconst namePrefix = `goodsBag[${index}]`;\n\t\t// increase quantity, require to parseInt ex when user types on input it will be a string\n\t\tgoodsBagArg[index].quantity = parseInt(goodsBagArg[index].quantity.toString()) + value;\n\t\tsetValue(`${namePrefix}.quantity`, goodsBagArg[index].quantity);\n\t\t// trigger validation\n\t\ttrigger(`${namePrefix}.barCode`);\n\t\ttrigger(`${namePrefix}.quantity`);\n\t}\n\n\t// DRY function shared with transactions & goods\n\t// call function with all this magic local references\n\tconst customGoodsBag = commonFormFieldGoodsBag(\n\t\t// FormFieldNames.GOODS_BAG was replaced with formFieldName\n\t\tFormFieldNames.GOODS_BAG,\n\t\t// useStyles\n\t\tclasses,\n\t\t// useForm,\n\t\tcontrol,\n\t\terrors,\n\t\t// useFieldArray\n\t\tremove,\n\t\tappend,\n\t\thandleIncreaseDecreaseGood,\n\t\t// other\n\t\tloading,\n\t\tfields,\n\t\tgoodsBag,\n\t\tgoodsBagEan,\n\t\tgoodsBagQuantity,\n\t\tgoodsBagEanInputRef,\n\t\tgoodsBagQuantityInputRef,\n\t\tcauseOptionsLoaded,\n\t\tmaxGoodsItems,\n\t)\n\n\t// debug\n\trenderCount++;\n\n\t// EOF of `DRY code shared with transactions & goods`\n\n\t// require to use watch else getValues(FormFieldNames.x) don't work has expected\n\tconst inputType = watch(FormFieldNames.INPUT_TYPE);\n\tconst outputType = watch(FormFieldNames.OUTPUT_TYPE);\n\tconst output = watch(FormFieldNames.OUTPUT);\n\n\t// TODO\n\t// console.log(JSON.stringify(data, undefined, 2));\n\t// console.log(JSON.stringify(newTransactionData, undefined, 2));\n\n\t// locked switch\n\tconst handleLockedSwitch = (event: React.ChangeEvent<HTMLInputElement>) => {\n\t\tsetLocked(event.target.checked);\n\t};\n\n\tconst handleResetHandler = async () => { reset(defaultValues, {}); setLocked(false); };\n\tconst handleSubmitHandler = async (data: FormInputs) => {\n\t\ttry {\n\t\t\tconst newTransactionData: NewTransactionInput = {\n\t\t\t\ttransactionType: TransactionType.transferGoods,\n\t\t\t\tresourceType: ResourceType.genericGoods,\n\t\t\t\tinput: {\n\t\t\t\t\t// type: EntityType.person,\n\t\t\t\t\t// id: state.user.profile.id,\n\t\t\t\t\ttype: data.inputType,\n\t\t\t\t\tid: data.input,\n\t\t\t\t},\n\t\t\t\toutput: {\n\t\t\t\t\t// type: EntityType.cause,\n\t\t\t\t\ttype: data.outputType,\n\t\t\t\t\tid: data.output,\n\t\t\t\t},\n\t\t\t\tgoods: goodsBag.map((e: GoodsBagItem) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tcode: e.barCode, barCode: e.barCode, name: e.barCode, quantity: Number(e.quantity)\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\tlocation: data.location,\n\t\t\t\tmetaData: data.metaData ? JSON.parse(data.metaData) : {},\n\t\t\t\tmetaDataInternal: data.metaDataInternal ? JSON.parse(data.metaDataInternal) : {},\n\t\t\t};\n\n\t\t\t// fire mutation\n\t\t\tconst response = await transactionNewMutation({ variables: { newTransactionData: newTransactionData } });\n\n\t\t\tif (response) {\n\t\t\t\t// TODO: cleanUp\n\t\t\t\t// const payload = { message: parseTemplate(c.I18N.newModelCreatedSuccessfully, { model: ModelType.transaction, id: response.data.transactionNew.id }) };\n\t\t\t\t// dispatch({ type: ActionType.RESULT_MESSAGE, payload });\n\t\t\t\t// history.push({ pathname: routes.RESULT_PAGE.path });\n\t\t\t\tsetSnackbarOpen(true);\n\t\t\t\t// reset();\n\t\t\t\t// reset();\n\t\t\t\tsetValue(`goodsBag`, defaultValues.goodsBag);\n\t\t\t\tsetValue('input', '');\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// don't throw here else we catch react app, errorMessage is managed in `getGraphQLApolloError(apolloError)`\n\t\t\t// console.error('graphQLErrors' in errors && error.graphQLErrors[0] ? JSON.stringify(error.graphQLErrors[0].message, undefined, 2) : error);\n\t\t}\n\t};\n\n\t// barCode handler function\n\tconst addToGoodsBag = (goodsBagArg: Array<GoodsBagItem>, barCode: string) => {\n\t\tconst index = goodsBagArg.findIndex((e: GoodsBagItem) => e.barCode === barCode);\n\t\tconst namePrefix = `goodsBag[${index}]`;\n\t\t// add quantity\n\t\tif (index > -1) {\n\t\t\thandleIncreaseDecreaseGood(goodsBagArg, index, 1);\n\t\t} else {\n\t\t\t// get first empty input, useful to fill first, and other empty that was added\n\t\t\tconst indexEmpty = goodsBagArg.findIndex((e: GoodsBagItem) => {\n\t\t\t\treturn e.barCode === ''\n\t\t\t});\n\t\t\t// if found an empty slot\n\t\t\tif (indexEmpty > -1) {\n\t\t\t\tsetValue(`goodsBag[${indexEmpty}].barCode`, barCode);\n\t\t\t\tsetValue(`goodsBag[${indexEmpty}].quantity`, 1);\n\t\t\t\t// trigger validation\n\t\t\t\ttrigger(`${namePrefix}.barCode`);\n\t\t\t\ttrigger(`${namePrefix}.quantity`);\n\t\t\t} else {\n\t\t\t\tappend({ barCode, quantity: 1 });\n\t\t\t}\n\t\t}\n\t}\n\t// barcodeReader handlers\n\tconst handleBarcodeReaderError = (error: any) => {\n\t\tconsole.error(error);\n\t}\n\t// handleBarcodeReaderScan = handleBarcodeReaderScan.bind(this);\n\t// how to use bind in rfc: https://stackoverflow.com/questions/53215067/how-can-i-bind-function-with-hooks-in-react\n\tconst handleBarcodeReaderScan = useCallback(\n\t\t(data: any) => {\n\t\t\tconsole.log(`read data '${data}'`);\n\t\t\taddToGoodsBag(goodsBag, data);\n\t\t},\n\t\t// bind of class components is used with useCallback\n\t\t// the trick is use [goodsBag] to pass current reference\n\t\t// tells React to memoize regardless of arguments.\n\t\t// eslint-disable-next-line\n\t\t[goodsBag],\n\t);\n\n\tconst formDefinition: Record<string, FormPropFields> = {\n\t\t// TODO\n\t\t// [FormFieldNames.INPUT_TYPE]: {\n\t\t// \t...commonFormFieldInputTypeEntity(useRef(), FormFieldNames.INPUT_TYPE, () => isValidEnum(EntityType, getValues(FormFieldNames.INPUT_TYPE))),\n\t\t// },\n\t\t// [FormFieldNames.INPUT]: {\n\t\t// \t...commonFormFieldInputEntity(useRef(), FormFieldNames.INPUT, () => causeOptions, !causeOptionsLoaded),\n\t\t// },\n\t\t[FormFieldNames.INPUT_TYPE]: {\n\t\t\t...commonFormFieldOutputTypeEntity(useRef(), FormFieldNames.INPUT_TYPE, () => isValidEnum(EntityType, getValues(FormFieldNames.INPUT_TYPE))),\n\t\t\tdisabled: !causeOptionsLoaded || locked,\n\t\t\t// override outputLabel\n\t\t\tlabel: c.I18N.inputTypeLabel,\n\t\t},\n\t\t[FormFieldNames.INPUT]: {\n\t\t\t...commonFormFieldOutputEntity(useRef(), FormFieldNames.INPUT, inputType,\n\t\t\t\t() => causeOptions,\n\t\t\t\t// visible\n\t\t\t\t() => { return (inputType !== c.VALUES.undefined); },\n\t\t\t\t// validate\n\t\t\t\t() => { return validateRegExpArray(getValues(FormFieldNames.INPUT), [c.REGEXP.uuid, c.REGEXP.fiscalNumber, c.REGEXP.mobilePhone]) }\n\t\t\t),\n\t\t\tdisabled: !causeOptionsLoaded,\n\t\t\t// override outputLabel\n\t\t\tlabel: c.I18N.inputLabel,\n\t\t},\n\t\t[FormFieldNames.OUTPUT_TYPE]: {\n\t\t\t...commonFormFieldOutputTypeEntity(useRef(), FormFieldNames.OUTPUT_TYPE, () => isValidEnum(EntityType, getValues(FormFieldNames.OUTPUT_TYPE))),\n\t\t\tdisabled: !causeOptionsLoaded || locked,\n\t\t},\n\t\t[FormFieldNames.OUTPUT]: {\n\t\t\t...commonFormFieldOutputEntity(useRef(), FormFieldNames.OUTPUT, outputType,\n\t\t\t\t() => causeOptions,\n\t\t\t\t// visible\n\t\t\t\t() => { return (outputType !== c.VALUES.undefined); },\n\t\t\t\t// validate\n\t\t\t\t() => { return validateRegExpArray(getValues(FormFieldNames.OUTPUT), [c.REGEXP.uuid, c.REGEXP.fiscalNumber, c.REGEXP.mobilePhone]) }\n\t\t\t),\n\t\t\tdisabled: !causeOptionsLoaded || locked,\n\t\t},\n\t\t[FormFieldNames.GOODS_BAG]: {\n\t\t\t...commonFormFieldGoodsBagInput(useRef(), FormFieldNames.GOODS_BAG, customGoodsBag),\n\t\t},\n\t\t[FormFieldNames.LOCATION]: {\n\t\t\t...commonFormFieldLocation(useRef(), FormFieldNames.LOCATION),\n\t\t\tdisabled: !causeOptionsLoaded,\n\t\t\tvisible: false,\n\t\t},\n\t\t[FormFieldNames.META_DATA]: {\n\t\t\t...commonFormFieldMetadata(useRef(), FormFieldNames.META_DATA, () => isValidJsonObject(getValues(FormFieldNames.META_DATA))),\n\t\t\tdisabled: !causeOptionsLoaded,\n\t\t\tvisible: false,\n\t\t},\n\t\t[FormFieldNames.META_DATA_INTERNAL]: {\n\t\t\t...commonFormFieldMetadataInternal(useRef(), FormFieldNames.META_DATA_INTERNAL, () => isValidJsonObject(getValues(FormFieldNames.META_DATA_INTERNAL))),\n\t\t\tdisabled: !causeOptionsLoaded,\n\t\t\tvisible: false,\n\t\t},\n\t};\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<PageTitle>{routes[RouteKey.TRANSACTION_GOODS_FORM].title}</PageTitle>\n\t\t\t<Box component='span' m={1}>\n\t\t\t\t{/* 'handleSubmit' will validate your inputs before invoking 'onSubmit' */}\n\t\t\t\t<form\n\t\t\t\t\tclassName={classes.root} noValidate autoComplete='off'\n\t\t\t\t\tonSubmit={handleSubmit((data) => handleSubmitHandler(data))}\n\t\t\t\t>\n\t\t\t\t\t{generateFormDefinition(formDefinition, control, errors, loading)}\n\t\t\t\t\t{generateFormButtonsDiv(classes, loading || !causeOptionsLoaded, handleResetHandler)}\n\t\t\t\t\t<FormControlLabel control={\n\t\t\t\t\t\t<Switch\n\t\t\t\t\t\t\tname='toggleLocked'\n\t\t\t\t\t\t\tchecked={locked}\n\t\t\t\t\t\t\tonChange={handleLockedSwitch}\n\t\t\t\t\t\t\tdisabled={!(causeOptionsLoaded && inputType && outputType && output)}\n\t\t\t\t\t\t/>}\n\t\t\t\t\t\tlabel=\"Locked\"\n\t\t\t\t\t/>\n\t\t\t\t</form>\n\t\t\t\t{apolloError && <AlertMessage severity={AlertSeverityType.ERROR} message={errorMessage} className={classes.spacer}/>}\n\t\t\t\t{/* {apolloError && <pre>{JSON.stringify(apolloError.graphQLErrors[0].message, undefined, 2)}</pre>} */}\n\t\t\t\t{loading && <LinearIndeterminate />}\n\t\t\t<SnackbarMessage message={c.I18N.snackbarTransactionUpsertSuccess} severity={SnackbarSeverityType.SUCCESS} open={snackbarOpen} setOpen={setSnackbarOpen} />\n\t\t\t{/* <AlertMessage severity={AlertSeverityType.WARNING} message={c.I18N.transactionGoodsFormWip} /> */}\n\t\t\t<BarcodeReader\n\t\t\t\ttimeBeforeScanTest={250}\n\t\t\t\tonScan={handleBarcodeReaderScan}\n\t\t\t\tonError={handleBarcodeReaderError}\n\t\t\t/>\n\t\t\t</Box>\n\t\t</Fragment >\n\t);\n}\n","import { Box } from '@material-ui/core';\nimport React, { Fragment, useRef } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { RouteComponentProps } from 'react-router';\nimport { appConstants as c, mokeFormData } from '../../app';\nimport { commonFormFieldAmbassadors, commonFormFieldAssetName, commonFormFieldAssetOwner, commonFormFieldAssetType, commonFormFieldLocation, commonFormFieldMetadata, commonFormFieldMetadataInternal, commonFormFieldPersonNdParticipantInputTypeEntity, commonFormFieldTags, formCommonOptions, RouteKey, routes } from '../../app/config';\nimport { useStateValue } from '../../app/state';\nimport { AlertMessage, AlertSeverityType } from '../../components/material-ui/alert-message';\nimport { LinearIndeterminate } from '../../components/material-ui/feedback';\nimport { PageTitle } from '../../components/material-ui/typography';\nimport { SnackbarMessage, SnackbarSeverityType } from '../../components/snackbar-message';\nimport { NewAssetInput, useAssetNewMutation } from '../../generated/graphql';\nimport { AssetType, EntityType, FormDefaultValues, FormPropFields, Tag } from '../../types';\nimport { generateFormButtonsDiv, generateFormDefinition, getGraphQLApolloError, isValidEnum, isValidJsonObject, useStyles, validateRegExpArray, validateRegExpArrayWithValuesArray } from '../../utils';\n\ntype FormInputs = {\n\tassetType: AssetType,\n\tname: string,\n\t// TODO: add, first we need to add it to NewAssetInput GraphQL\n\tdescription: string,\n\tambassadors?: string,\n\t// input/output entity object\n\tinputType: EntityType;\n\towner: string,\n\tlocation?: string\n\ttags: Tag[],\n\tmetaData?: any,\n\tmetaDataInternal?: any,\n};\nenum FormFieldNames {\n\tASSET_TYPE = 'assetType',\n\tNAME = 'name',\n\tDESCRIPTION = 'description',\n\tAMBASSADORS = 'ambassadors',\n\tINPUT_TYPE = 'inputType',\n\tOWNER = 'owner',\n\tLOCATION = 'location',\n\tTAGS = 'tags',\n\tMETA_DATA = 'metaData',\n\tMETA_DATA_INTERNAL = 'metaDataInternal',\n};\nconst defaultValues: FormDefaultValues = {\n\tassetType: c.VALUES.undefined,\n\tname: mokeFormData ? 'Wheel chair' : '',\n\tdescription: mokeFormData ? 'some useful description' : '',\n\tambassadors: mokeFormData ? c.VALUES.mokeAmbassadors : '',\n\tinputType: EntityType.person,\n\t// inject by user profile id state\n\towner: '',\n\tlocation: mokeFormData ? c.VALUES.mokeLocation : '',\n\ttags: [\n\t\t{ title: 'Nature', value: 'NATURE' },\n\t\t{ title: 'Economy', value: 'ECONOMY' },\n\t],\n\tmetaData: '',\n\tmetaDataInternal: '',\n};\n\n// use RouteComponentProps to get history props from Route\nexport const AssetUpsertForm: React.FC<RouteComponentProps> = ({ history }) => {\n\t// hooks styles\n\tconst classes = useStyles();\n\t// hooks state\n\tconst [state] = useStateValue();\n\t// snackBar state\n\tconst [snackbarOpen, setSnackbarOpen] = React.useState<boolean>(false);\n\t// hooks react form\n\tconst { handleSubmit, errors, control, reset, getValues } = useForm<FormInputs>({\n\t\t// required to inject owner from state\n\t\tdefaultValues: { ...defaultValues, owner: state.user.profile.fiscalNumber },\n\t\t...formCommonOptions\n\t})\n\t// hooks: apollo\n\tconst [assetNewMutation, { loading, error: apolloError }] = useAssetNewMutation();\n\t// extract error message\n\tconst errorMessage = getGraphQLApolloError(apolloError);\n\t// debug\n\t// console.log('errors', JSON.stringify(errors, undefined, 2));\n\t// console.log(`tags:${JSON.stringify(getValues(FormFieldNames.TAGS), undefined, 2)}`);\n\t// console.log(`assetType:${getValues(FormFieldNames.ASSET_TYPE)}`);\n\n\tconst handleResetHandler = async () => { reset(defaultValues, {}) };\n\tconst handleSubmitHandler = async (data: FormInputs) => {\n\t\ttry {\n\t\t\tconst newAssetData: NewAssetInput = {\n\t\t\t\tname: data.name,\n\t\t\t\tassetType: data.assetType,\n\t\t\t\tambassadors: data.ambassadors.split(' '),\n\t\t\t\towner: {\n\t\t\t\t\ttype: data.inputType,\n\t\t\t\t\tid: data.owner,\n\t\t\t\t},\n\t\t\t\tlocation: data.location,\n\t\t\t\ttags: data.tags.map((e: Tag) => e.value),\n\t\t\t\tmetaData: data.metaData ? JSON.parse(data.metaData) : {},\n\t\t\t\tmetaDataInternal: data.metaDataInternal ? JSON.parse(data.metaDataInternal) : {},\n\t\t\t};\n\t\t\t// console.log(JSON.stringify(data, undefined, 2));\n\t\t\t// console.log(JSON.stringify(newAssetData, undefined, 2));\n\t\t\tconst response = await assetNewMutation({ variables: { newAssetData: newAssetData } });\n\n\t\t\tif (response) {\n\t\t\t\t// TODO: cleanup old result message\n\t\t\t\t// const payload = { message: parseTemplate(c.I18N.newModelCreatedSuccessfully, { model: ModelType.asset, id: response.data.assetNew.id }) };\n\t\t\t\t// dispatch({ type: ActionType.RESULT_MESSAGE, payload });\n\t\t\t\t// history.push({ pathname: routes.RESULT_PAGE.path });\n\t\t\t\tsetSnackbarOpen(true);\n\t\t\t\treset();\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// don't throw here else we catch react app, errorMessage is managed in `getGraphQLApolloError(apolloError)`\n\t\t\t// console.error('graphQLErrors' in errors && error.graphQLErrors[0] ? JSON.stringify(error.graphQLErrors[0].message, undefined, 2) : error);\n\t\t}\n\t};\n\n\tconst formDefinition: Record<string, FormPropFields> = {\n\t\t[FormFieldNames.ASSET_TYPE]: {\n\t\t\t...commonFormFieldAssetType(useRef(), FormFieldNames.ASSET_TYPE, () => isValidEnum(AssetType, getValues(FormFieldNames.ASSET_TYPE))),\n\t\t},\n\t\t[FormFieldNames.NAME]: {\n\t\t\t...commonFormFieldAssetName(useRef(), FormFieldNames.NAME),\n\t\t},\n\t\t[FormFieldNames.INPUT_TYPE]: {\n\t\t\t...commonFormFieldPersonNdParticipantInputTypeEntity(useRef(), FormFieldNames.INPUT_TYPE, () => isValidEnum(EntityType, getValues(FormFieldNames.INPUT_TYPE))),\n\t\t},\n\t\t[FormFieldNames.OWNER]: {\n\t\t\t...commonFormFieldAssetOwner(useRef(), FormFieldNames.OWNER, () => validateRegExpArray(getValues(FormFieldNames.OWNER), [c.REGEXP.uuid, c.REGEXP.fiscalNumber, c.REGEXP.mobilePhone])),\n\t\t},\n\t\t[FormFieldNames.AMBASSADORS]: {\n\t\t\t...commonFormFieldAmbassadors(useRef(), FormFieldNames.AMBASSADORS, () => {\n\t\t\t\t// optional, only uses validation if has values, assets can be created without ambassadors\n\t\t\t\tif (getValues(FormFieldNames.AMBASSADORS)) {\n\t\t\t\t\tconst failValues = validateRegExpArrayWithValuesArray((getValues(FormFieldNames.AMBASSADORS) as string).split(' '), [c.REGEXP.uuid, c.REGEXP.fiscalNumber, c.REGEXP.mobilePhone]);\n\t\t\t\t\treturn (failValues.length > 0) ? `invalid id(s) ${failValues.join(' ')}` : true;\n\t\t\t\t}\n\t\t\t})\n\t\t},\n\t\t[FormFieldNames.LOCATION]: {\n\t\t\t...commonFormFieldLocation(useRef(), FormFieldNames.LOCATION)\n\t\t},\n\t\t[FormFieldNames.TAGS]: {\n\t\t\t...commonFormFieldTags(useRef(), FormFieldNames.TAGS, () => (getValues(FormFieldNames.TAGS) as string[]).length > 0),\n\t\t},\n\t\t[FormFieldNames.META_DATA]: {\n\t\t\t...commonFormFieldMetadata(useRef(), FormFieldNames.META_DATA, () => isValidJsonObject(getValues(FormFieldNames.META_DATA))),\n\t\t},\n\t\t[FormFieldNames.META_DATA_INTERNAL]: {\n\t\t\t...commonFormFieldMetadataInternal(useRef(), FormFieldNames.META_DATA_INTERNAL, () => isValidJsonObject(getValues(FormFieldNames.META_DATA_INTERNAL)))\n\t\t},\n\t};\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<PageTitle>{routes[RouteKey.ASSET_UPSERT_FORM].title}</PageTitle>\n\t\t\t<Box component='span' m={1}>\n\t\t\t\t{/* 'handleSubmit' will validate your inputs before invoking 'onSubmit' */}\n\t\t\t\t<form\n\t\t\t\t\tclassName={classes.root} noValidate autoComplete='off'\n\t\t\t\t\tonSubmit={handleSubmit((data) => handleSubmitHandler(data))}\n\t\t\t\t>\n\t\t\t\t\t{generateFormDefinition(formDefinition, control, errors, loading)}\n\t\t\t\t\t{generateFormButtonsDiv(classes, loading, handleResetHandler)}\n\t\t\t\t</form>\n\t\t\t\t{apolloError && <AlertMessage severity={AlertSeverityType.ERROR} message={errorMessage} />}\n\t\t\t\t{/* {apolloError && <pre>{JSON.stringify(apolloError.graphQLErrors[0].message, undefined, 2)}</pre>} */}\n\t\t\t\t{loading && <LinearIndeterminate />}\n\t\t\t\t<SnackbarMessage message={c.I18N.snackbarAssetUpsertSuccess} severity={SnackbarSeverityType.SUCCESS} open={snackbarOpen} setOpen={setSnackbarOpen} />\n\t\t\t</Box>\n\t\t</Fragment >\n\t);\n}\n","import { Box } from '@material-ui/core';\nimport React, { Fragment, useRef } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { RouteComponentProps } from 'react-router';\nimport { appConstants as c, mokeFormData } from '../../app';\nimport { commonFormFieldAmbassadors, commonFormFieldCauseInputEntity, commonFormFieldCauseName, commonFormFieldEmail, commonFormFieldEndDate, commonFormFieldLocation, commonFormFieldMetadata, commonFormFieldMetadataInternal, commonFormFieldPersonNdParticipantInputTypeEntity, commonFormFieldStartDate, commonFormFieldTags, formCommonOptions, RouteKey, routes } from '../../app/config';\nimport { useStateValue } from '../../app/state';\nimport { AlertMessage, AlertSeverityType } from '../../components/material-ui/alert-message';\nimport { LinearIndeterminate } from '../../components/material-ui/feedback';\nimport { PageTitle } from '../../components/material-ui/typography';\nimport { SnackbarMessage, SnackbarSeverityType } from '../../components/snackbar-message';\nimport { NewCauseInput, useCauseNewMutation } from '../../generated/graphql';\nimport { EntityType, FormDefaultValues, FormPropFields, Tag } from '../../types';\nimport { currentFormatDate, generateFormButtonsDiv, generateFormDefinition, getGraphQLApolloError, isValidEnum, isValidJsonObject, useStyles, validateRegExpArray, validateRegExpArrayWithValuesArray } from '../../utils';\n\ntype FormInputs = {\n\tname: string,\n\temail: string,\n\tstartDate: string;\n\tendDate: string;\n\tlocation?: string\n\t// input/output entity object\n\tinputType: EntityType;\n\tinput: string;\n\tambassadors?: string,\n\ttags: Tag[],\n\tmetaData?: any,\n\tmetaDataInternal?: any,\n};\nenum FormFieldNames {\n\tNAME = 'name',\n\tEMAIL = 'email',\n\tSTART_DATE = 'startDate',\n\tEND_DATE = 'endDate',\n\tLOCATION = 'location',\n\tINPUT_TYPE = 'inputType',\n\tINPUT = 'input',\n\tAMBASSADORS = 'ambassadors',\n\tTAGS = 'tags',\n\tMETA_DATA = 'metaData',\n\tMETA_DATA_INTERNAL = 'metaDataInternal',\n};\nconst defaultValues: FormDefaultValues = {\n\tname: mokeFormData ? 'Together we save the world': '',\n\temail: mokeFormData ? 'mail@tws.com': '',\n\tambassadors: mokeFormData ? c.VALUES.mokeAmbassadors: '',\n\t// current plus one day/24h\n\tstartDate: currentFormatDate(new Date(Date.now() + ((3600 * 1000 * 24) * 0)), false),\n\t// current plus one day/24h*7\n\tendDate: currentFormatDate(new Date(Date.now() + ((3600 * 1000 * 24) * 7)), false),\n\tlocation: mokeFormData ? c.VALUES.mokeLocation : '',\n\tinputType: EntityType.person,\n\t// inject by user profile id state\n\tinput: '',\n\ttags: mokeFormData ? c.VALUES.mokeTags : [],\n\tmetaData: '',\n\tmetaDataInternal: '',\n};\n\n// use RouteComponentProps to get history props from Route\nexport const CauseUpsertForm: React.FC<RouteComponentProps> = ({ history }) => {\n\t// hooks styles\n\tconst classes = useStyles();\n\t// hooks state\n\tconst [state] = useStateValue();\n\t// snackBar state\n\tconst [snackbarOpen, setSnackbarOpen] = React.useState<boolean>(false);\n\t// hooks: apollo\n\tconst [causeNewMutation, { loading, error: apolloError }] = useCauseNewMutation();\n\t// hooks react form\n\tconst { handleSubmit, errors, control, reset, getValues } = useForm<FormInputs>({\n\t\t// required to inject owner from state\n\t\tdefaultValues: { ...defaultValues, input: state.user.profile.fiscalNumber },\n\t\t...formCommonOptions\n\t});\n\t// extract error message\n\tconst errorMessage = getGraphQLApolloError(apolloError);\n\t// debug\n\t// console.log('errors', JSON.stringify(errors, undefined, 2));\n\t// console.log(`tags:${JSON.stringify(getValues(FormFieldNames.TAGS), undefined, 2)}`);\n\t// console.log(`startDate:${getValues(FormFieldNames.START_DATE)}`);\n\t// console.log(`endDate:${new Date(getValues(FormFieldNames.END_DATE)).getTime()}`);\n\n\tconst handleResetHandler = async () => { reset(defaultValues, {}) };\n\tconst handleSubmitHandler = async (data: FormInputs) => {\n\t\ttry {\n\t\t\tconst newCauseData: NewCauseInput = {\n\t\t\t\tname: data.name,\n\t\t\t\temail: data.email,\n\t\t\t\tambassadors: data.ambassadors.split(' '),\n\t\t\t\tstartDate: data.startDate,\n\t\t\t\tendDate: data.endDate,\n\t\t\t\tlocation: data.location,\n\t\t\t\tinput: {\n\t\t\t\t\ttype: data.inputType,\n\t\t\t\t\tid: data.input,\n\t\t\t\t},\n\t\t\t\ttags: data.tags ? data.tags.map((e: Tag) => e.value) : [],\n\t\t\t\tmetaData: data.metaData ? JSON.parse(data.metaData) : null,\n\t\t\t\tmetaDataInternal: data.metaData ? JSON.parse(data.metaDataInternal) : null,\n\t\t\t};\n\t\t\t// console.log(JSON.stringify(data, undefined, 2));\n\t\t\t// console.log(JSON.stringify(newCauseData, undefined, 2));\n\t\t\tconst response = await causeNewMutation({ variables: { newCauseData: newCauseData } });\n\n\t\t\tif (response) {\n\t\t\t\t// TODO: cleanup old result message\n\t\t\t\t// const payload = { message: parseTemplate(c.I18N.newModelCreatedSuccessfully, { model: ModelType.cause, id: response.data.causeNew.id }) };\n\t\t\t\t// dispatch({ type: ActionType.RESULT_MESSAGE, payload });\n\t\t\t\t// history.push({ pathname: routes.RESULT_PAGE.path });\n\t\t\t\tsetSnackbarOpen(true);\n\t\t\t\treset();\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// don't throw here else we catch react app, errorMessage is managed in `getGraphQLApolloError(apolloError)`\n\t\t\t// console.error('graphQLErrors' in errors && error.graphQLErrors[0] ? JSON.stringify(error.graphQLErrors[0].message, undefined, 2) : error);\n\t\t}\n\t};\n\n\tconst formDefinition: Record<string, FormPropFields> = {\n\t\t[FormFieldNames.NAME]: {\n\t\t\t...commonFormFieldCauseName(useRef(), FormFieldNames.NAME)\n\t\t},\n\t\t[FormFieldNames.START_DATE]: {\n\t\t\t...commonFormFieldStartDate(useRef(), FormFieldNames.START_DATE)\n\t\t},\n\t\t[FormFieldNames.END_DATE]: {\n\t\t\t...commonFormFieldEndDate(useRef(), FormFieldNames.END_DATE)\n\t\t},\n\t\t[FormFieldNames.LOCATION]: {\n\t\t\t...commonFormFieldLocation(useRef(), FormFieldNames.LOCATION)\n\t\t},\n\t\t[FormFieldNames.EMAIL]: {\n\t\t\t...commonFormFieldEmail(useRef(), FormFieldNames.EMAIL)\n\t\t},\n\t\t[FormFieldNames.INPUT_TYPE]: {\n\t\t\t...commonFormFieldPersonNdParticipantInputTypeEntity(useRef(), FormFieldNames.INPUT_TYPE, () => isValidEnum(EntityType, getValues(FormFieldNames.INPUT_TYPE))),\n\t\t},\n\t\t[FormFieldNames.INPUT]: {\n\t\t\t...commonFormFieldCauseInputEntity(useRef(), FormFieldNames.INPUT, () => validateRegExpArray(getValues(FormFieldNames.INPUT), [c.REGEXP.uuid, c.REGEXP.fiscalNumber, c.REGEXP.mobilePhone])),\n\t\t\tlabel: c.I18N.causeInputStarterLabel,\n\t\t},\n\t\t[FormFieldNames.TAGS]: {\n\t\t\t...commonFormFieldTags(useRef(), FormFieldNames.TAGS, () => (getValues(FormFieldNames.TAGS) as string[]).length > 0),\n\t\t},\n\t\t[FormFieldNames.AMBASSADORS]: {\n\t\t\t...commonFormFieldAmbassadors(useRef(), FormFieldNames.AMBASSADORS, () => {\n\t\t\t\tconst failValues = validateRegExpArrayWithValuesArray((getValues(FormFieldNames.AMBASSADORS) as string).split(' '), [c.REGEXP.uuid, c.REGEXP.fiscalNumber, c.REGEXP.mobilePhone]);\n\t\t\t\treturn (failValues.length > 0) ? `invalid id(s) ${failValues.join(' ')}` : true;\n\t\t\t})\n\t\t},\n\t\t[FormFieldNames.META_DATA]: {\n\t\t\t...commonFormFieldMetadata(useRef(), FormFieldNames.META_DATA, () => isValidJsonObject(getValues(FormFieldNames.META_DATA))),\n\t\t},\n\t\t[FormFieldNames.META_DATA_INTERNAL]: {\n\t\t\t...commonFormFieldMetadataInternal(useRef(), FormFieldNames.META_DATA_INTERNAL, () => isValidJsonObject(getValues(FormFieldNames.META_DATA_INTERNAL)))\n\t\t},\n\t};\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<PageTitle>{routes[RouteKey.CAUSE_UPSERT_FORM].title}</PageTitle>\n\t\t\t<Box component='span' m={1}>\n\t\t\t\t{/* 'handleSubmit' will validate your inputs before invoking 'onSubmit' */}\n\t\t\t\t<form\n\t\t\t\t\tclassName={classes.root} noValidate autoComplete='off'\n\t\t\t\t\tonSubmit={handleSubmit((data) => handleSubmitHandler(data))}\n\t\t\t\t>\n\t\t\t\t\t{generateFormDefinition(formDefinition, control, errors, loading)}\n\t\t\t\t\t{generateFormButtonsDiv(classes, loading, handleResetHandler)}\n\t\t\t\t</form>\n\t\t\t\t{apolloError && <AlertMessage severity={AlertSeverityType.ERROR} message={errorMessage} className={classes.spacer}/>}\n\t\t\t\t{/* {apolloError && <pre>{JSON.stringify(apolloError.graphQLErrors[0].message, undefined, 2)}</pre>} */}\n\t\t\t\t{loading && <LinearIndeterminate />}\n\t\t\t\t<SnackbarMessage message={c.I18N.snackbarCauseUpsertSuccess} severity={SnackbarSeverityType.SUCCESS} open={snackbarOpen} setOpen={setSnackbarOpen} />\n\t\t\t</Box>\n\t\t</Fragment >\n\t);\n}\n","import { Box } from '@material-ui/core';\nimport React, { Fragment, useRef } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { RouteComponentProps } from 'react-router';\nimport { appConstants as c, mokeFormData } from '../../app';\nimport { commonFormFieldAmbassadors, commonFormFieldCauseName, commonFormFieldCode, commonFormFieldEmail, commonFormFieldFiscalNumber, commonFormFieldMetadata, commonFormFieldMetadataInternal, formCommonOptions, RouteKey, routes } from '../../app/config';\nimport { AlertMessage, AlertSeverityType } from '../../components/material-ui/alert-message';\nimport { LinearIndeterminate } from '../../components/material-ui/feedback';\nimport { PageTitle } from '../../components/material-ui/typography';\nimport { SnackbarMessage, SnackbarSeverityType } from '../../components/snackbar-message';\nimport { NewParticipantInput, useParticipantNewMutation } from '../../generated/graphql';\nimport { FormDefaultValues, FormPropFields } from '../../types';\nimport { generateFormButtonsDiv, generateFormDefinition, getGraphQLApolloError, isValidJsonObject, useStyles, validateFiscalNumber, validateRegExpArrayWithValuesArray } from '../../utils';\n\ntype FormInputs = {\n\tcode: string,\n\tname: string,\n\temail: string,\n\tfiscalNumber: string,\n\tambassadors?: string,\n\tmetaData?: any,\n\tmetaDataInternal?: any,\n};\nenum FormFieldNames {\n\tCODE = 'code',\n\tNAME = 'name',\n\tEMAIL = 'email',\n\tFISCAL_NUMBER = 'fiscalNumber',\n\tAMBASSADORS = 'ambassadors',\n\tMETA_DATA = 'metaData',\n\tMETA_DATA_INTERNAL = 'metaDataInternal',\n};\nconst defaultValues: FormDefaultValues = {\n\tcode: mokeFormData ? 'wfp' : '',\n\tname: mokeFormData ? 'World Food Program' : '',\n\temail: mokeFormData ? 'mail@wfp.com' : '',\n\tfiscalNumber: mokeFormData ? 'PT500128006' : '',\n\tambassadors: mokeFormData ? c.VALUES.mokeAmbassadors : '',\n\tmetaData: '',\n\tmetaDataInternal: '',\n};\n\n// use RouteComponentProps to get history props from Route\nexport const ParticipantUpsertForm: React.FC<RouteComponentProps> = ({ history }) => {\n\t// hooks styles\n\tconst classes = useStyles();\n\t// snackBar state\n\tconst [snackbarOpen, setSnackbarOpen] = React.useState<boolean>(false);\n\t// hooks react form\n\tconst { handleSubmit, errors, control, reset, getValues } = useForm<FormInputs>({ defaultValues, ...formCommonOptions })\n\t// hooks: apollo\n\tconst [assetNewMutation, { loading, error: apolloError }] = useParticipantNewMutation();\n\t// extract error message\n\tconst errorMessage = getGraphQLApolloError(apolloError);\n\n\tconst handleResetHandler = async () => { reset(defaultValues, {}) };\n\tconst handleSubmitHandler = async (data: FormInputs) => {\n\t\ttry {\n\t\t\tconst newParticipantData: NewParticipantInput = {\n\t\t\t\tcode: data.code,\n\t\t\t\tname: data.name,\n\t\t\t\temail: data.email,\n\t\t\t\tfiscalNumber: data.fiscalNumber,\n\t\t\t\tambassadors: data.ambassadors.split(' '),\n\t\t\t\tmetaData: data.metaData ? JSON.parse(data.metaData) : {},\n\t\t\t\tmetaDataInternal: data.metaDataInternal ? JSON.parse(data.metaDataInternal) : {},\n\t\t\t};\n\t\t\tconst response = await assetNewMutation({ variables: { newParticipantData: newParticipantData } });\n\n\t\t\tif (response) {\n\t\t\t\t// TODO: cleanup old result message\n\t\t\t\t// const payload = { message: parseTemplate(c.I18N.newModelCreatedSuccessfully, { model: ModelType.participant, id: response.data.participantNew.id }) };\n\t\t\t\t// dispatch({ type: ActionType.RESULT_MESSAGE, payload });\n\t\t\t\t// history.push({ pathname: routes.RESULT_PAGE.path });\n\t\t\t\tsetSnackbarOpen(true);\n\t\t\t\treset();\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// don't throw here else we catch react app, errorMessage is managed in `getGraphQLApolloError(apolloError)`\n\t\t\t// console.error('graphQLErrors' in errors && error.graphQLErrors[0] ? JSON.stringify(error.graphQLErrors[0].message, undefined, 2) : error);\n\t\t}\n\t};\n\n\tconst formDefinition: Record<string, FormPropFields> = {\n\t\t[FormFieldNames.CODE]: {\n\t\t\t...commonFormFieldCode(useRef(), FormFieldNames.CODE)\n\t\t},\n\t\t[FormFieldNames.NAME]: {\n\t\t\t// TODO: change to generic name, and use it in all field names\n\t\t\t...commonFormFieldCauseName(useRef(), FormFieldNames.NAME),\n\t\t\tlabel: c.I18N.participantLabel,\n\t\t},\n\t\t[FormFieldNames.FISCAL_NUMBER]: {\n\t\t\t...commonFormFieldFiscalNumber(useRef(), FormFieldNames.FISCAL_NUMBER, () => validateFiscalNumber(getValues(FormFieldNames.FISCAL_NUMBER)))\n\t\t},\n\t\t[FormFieldNames.EMAIL]: {\n\t\t\t...commonFormFieldEmail(useRef(), FormFieldNames.EMAIL)\n\t\t},\n\t\t[FormFieldNames.AMBASSADORS]: {\n\t\t\t...commonFormFieldAmbassadors(useRef(), FormFieldNames.AMBASSADORS, () => {\n\t\t\t\tconst failValues = validateRegExpArrayWithValuesArray((getValues(FormFieldNames.AMBASSADORS) as string).split(' '), [c.REGEXP.uuid, c.REGEXP.fiscalNumber, c.REGEXP.mobilePhone]);\n\t\t\t\treturn (failValues.length > 0) ? `invalid id(s) ${failValues.join(' ')}` : true;\n\t\t\t})\n\t\t},\n\t\t[FormFieldNames.META_DATA]: {\n\t\t\t...commonFormFieldMetadata(useRef(), FormFieldNames.META_DATA, () => isValidJsonObject(getValues(FormFieldNames.META_DATA))),\n\t\t},\n\t\t[FormFieldNames.META_DATA_INTERNAL]: {\n\t\t\t...commonFormFieldMetadataInternal(useRef(), FormFieldNames.META_DATA_INTERNAL, () => isValidJsonObject(getValues(FormFieldNames.META_DATA_INTERNAL)))\n\t\t},\n\t};\n\n\t// debug\n\t// console.log('errors', JSON.stringify(errors, undefined, 2));\n\t// console.log(`assetType:${getValues(FormFieldNames.ASSET_TYPE)}`);\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<PageTitle>{routes[RouteKey.PARTICIPANT_UPSERT_FORM].title}</PageTitle>\n\t\t\t<Box component='span' m={1}>\n\t\t\t\t{/* 'handleSubmit' will validate your inputs before invoking 'onSubmit' */}\n\t\t\t\t<form\n\t\t\t\t\tclassName={classes.root} noValidate autoComplete='off'\n\t\t\t\t\tonSubmit={handleSubmit((data) => handleSubmitHandler(data))}\n\t\t\t\t>\n\t\t\t\t\t{generateFormDefinition(formDefinition, control, errors, loading)}\n\t\t\t\t\t{generateFormButtonsDiv(classes, loading, handleResetHandler)}\n\t\t\t\t</form>\n\t\t\t\t{apolloError && <AlertMessage severity={AlertSeverityType.ERROR} message={errorMessage} className={classes.spacer}/>}\n\t\t\t\t{/* {apolloError && <pre>{JSON.stringify(apolloError.graphQLErrors[0].message, undefined, 2)}</pre>} */}\n\t\t\t\t{loading && <LinearIndeterminate />}\n\t\t\t\t<SnackbarMessage message={c.I18N.snackbarParticipantUpsertSuccess} severity={SnackbarSeverityType.SUCCESS} open={snackbarOpen} setOpen={setSnackbarOpen} />\n\t\t\t</Box>\n\t\t</Fragment >\n\t);\n}\n","import { Box } from '@material-ui/core';\nimport React, { Fragment, useRef, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { RouteComponentProps } from 'react-router';\nimport { appConstants as c, mokeFormData } from '../../app';\nimport { commonFormFieldEmail, commonFormFieldFirstName, commonFormFieldFiscalNumber, commonFormFieldLastName, commonFormFieldMetadata, commonFormFieldMetadataInternal, commonFormFieldMobilePhone, commonFormFieldPassword, commonFormFieldPasswordConfirmation, commonFormFieldUsername, formCommonOptions, RouteKey, routes } from '../../app/config';\nimport { AlertMessage, AlertSeverityType } from '../../components/material-ui/alert-message';\nimport { LinearIndeterminate } from '../../components/material-ui/feedback';\nimport { PageTitle } from '../../components/material-ui/typography';\nimport { SnackbarMessage, SnackbarSeverityType } from '../../components/snackbar-message';\nimport { NewPersonInput, usePersonRegisterMutation } from '../../generated/graphql';\nimport { FormDefaultValues, FormPropFields } from '../../types';\nimport { generateFormButtonsDiv, generateFormDefinition, getGraphQLApolloError, isValidJsonObject, useStyles, validateFiscalNumber } from '../../utils';\n\ntype FormInputs = {\n\tfirstName: string;\n\tlastName: string;\n\tusername: string;\n\tpassword: string;\n\tpasswordConfirmation: string;\n\tfiscalNumber: string;\n\tmobilePhone: string;\n\temail: string;\n\tmetaData?: any,\n\tmetaDataInternal?: any,\n};\nenum FormFieldNames {\n\tFIRST_NAME = 'firstName',\n\tLAST_NAME = 'lastName',\n\tUSERNAME = 'username',\n\tPASSWORD = 'password',\n\tPASSWORD_CONFIRMATION = 'passwordConfirmation',\n\tFISCAL_NUMBER = 'fiscalNumber',\n\tMOBILE_PHONE = 'mobilePhone',\n\tEMAIL = 'email',\n\tMETA_DATA = 'metaData',\n\tMETA_DATA_INTERNAL = 'metaDataInternal',\n};\nconst defaultValues: FormDefaultValues = {\n\tfirstName: mokeFormData ? 'Jane' : '',\n\tlastName: mokeFormData ? 'Doe' : '',\n\tusername: mokeFormData ? 'janedoe' : '',\n\tpassword: mokeFormData ? c.VALUES.mokePassword : '',\n\tpasswordConfirmation: mokeFormData ? c.VALUES.mokePassword : '',\n\tfiscalNumber: mokeFormData ? 'PT282692126' : '',\n\tmobilePhone: mokeFormData ? '+351936200004' : '',\n\temail: mokeFormData ? 'janedoe@mail.com' : '',\n\tmetaData: '',\n\tmetaDataInternal: '',\n};\n\n// use RouteComponentProps to get history props from Route\nexport const PersonUpsertForm: React.FC<RouteComponentProps> = ({ history }) => {\n\t// hooks styles\n\tconst classes = useStyles();\n\t// snackBar state\n\tconst [snackbarOpen, setSnackbarOpen] = React.useState<boolean>(false);\n\t// hooks react form\n\tconst { handleSubmit, errors, control, reset, getValues } = useForm<FormInputs>({ defaultValues, ...formCommonOptions })\n\tconst [showPassword, setShowPassword] = useState(false);\n\t// hooks: apollo\n\tconst [personNewMutation, { loading, error: apolloError }] = usePersonRegisterMutation();\n\t// extract error message\n\tconst errorMessage = getGraphQLApolloError(apolloError);\n\n\t// handlers\n\tconst handlePasswordVisibility = () => setShowPassword(!showPassword);\n\tconst handleResetHandler = async () => { reset(defaultValues, {}) };\n\tconst handleSubmitHandler = async (data: FormInputs) => {\n\t\ttry {\n\t\t\t// alert(JSON.stringify(data, undefined, 2));\n\t\t\tsetShowPassword(false);\n\t\t\tconst newPersonData: NewPersonInput = {\n\t\t\t\tfirstName: data.firstName,\n\t\t\t\tlastName: data.lastName,\n\t\t\t\tusername: data.username,\n\t\t\t\tpassword: data.password,\n\t\t\t\tfiscalNumber: data.fiscalNumber,\n\t\t\t\tmobilePhone: data.mobilePhone,\n\t\t\t\temail: data.email,\n\t\t\t\tmetaData: data.metaData ? JSON.parse(data.metaData) : {},\n\t\t\t\tmetaDataInternal: data.metaDataInternal ? JSON.parse(data.metaDataInternal) : {},\n\t\t\t};\n\t\t\tconst response = await personNewMutation({ variables: { newPersonData } })\n\t\t\t\t.catch(error => {\n\t\t\t\t\tthrow error;\n\t\t\t\t});\n\n\t\t\tif (response) {\n\t\t\t\t// TODO: cleanup old result message\n\t\t\t\t// const payload = { message: parseTemplate(c.I18N.newModelCreatedSuccessfully, { model: ModelType.person, id: response.data.personRegister.id }) };\n\t\t\t\t// dispatch({ type: ActionType.RESULT_MESSAGE, payload });\n\t\t\t\t// history.push({ pathname: routes.RESULT_PAGE.path });\n\t\t\t\tsetSnackbarOpen(true);\n\t\t\t\treset();\n\t\t\t}\n\t\t} catch (error) {\n\t\t\tsetShowPassword(false);\n\t\t\t// console.error('graphQLErrors' in errors && error.graphQLErrors[0] ? JSON.stringify(error.graphQLErrors[0].message, undefined, 2) : error);\n\t\t}\n\t};\n\n\tconst formDefinition: Record<string, FormPropFields> = {\n\t\t[FormFieldNames.FIRST_NAME]: {\n\t\t\t...commonFormFieldFirstName(useRef(), FormFieldNames.FIRST_NAME)\n\t\t},\n\t\t[FormFieldNames.LAST_NAME]: {\n\t\t\t...commonFormFieldLastName(useRef(), FormFieldNames.LAST_NAME)\n\t\t},\n\t\t[FormFieldNames.USERNAME]: {\n\t\t\t...commonFormFieldUsername(useRef(), FormFieldNames.USERNAME)\n\t\t},\n\t\t[FormFieldNames.PASSWORD]: {\n\t\t\t...commonFormFieldPassword(useRef(), FormFieldNames.PASSWORD, showPassword, handlePasswordVisibility)\n\t\t},\n\t\t[FormFieldNames.PASSWORD_CONFIRMATION]: {\n\t\t\t...commonFormFieldPasswordConfirmation(useRef(), FormFieldNames.PASSWORD_CONFIRMATION, showPassword, () => getValues(FormFieldNames.PASSWORD) === getValues(FormFieldNames.PASSWORD_CONFIRMATION))\n\t\t},\n\t\t[FormFieldNames.FISCAL_NUMBER]: {\n\t\t\t...commonFormFieldFiscalNumber(useRef(), FormFieldNames.FISCAL_NUMBER, () => validateFiscalNumber(getValues(FormFieldNames.FISCAL_NUMBER)))\n\t\t},\n\t\t[FormFieldNames.MOBILE_PHONE]: {\n\t\t\t...commonFormFieldMobilePhone(useRef(), FormFieldNames.MOBILE_PHONE)\n\t\t},\n\t\t[FormFieldNames.EMAIL]: {\n\t\t\t...commonFormFieldEmail(useRef(), FormFieldNames.EMAIL)\n\t\t},\n\t\t[FormFieldNames.META_DATA]: {\n\t\t\t...commonFormFieldMetadata(useRef(), FormFieldNames.META_DATA, () => isValidJsonObject(getValues(FormFieldNames.META_DATA))),\n\t\t},\n\t\t[FormFieldNames.META_DATA_INTERNAL]: {\n\t\t\t...commonFormFieldMetadataInternal(useRef(), FormFieldNames.META_DATA_INTERNAL, () => isValidJsonObject(getValues(FormFieldNames.META_DATA_INTERNAL)))\n\t\t},\n\t};\n\n\t// debug\n\t// console.log('errors', JSON.stringify(errors, undefined, 2));\n\t// console.log(`metaData:${getValues(FormFieldNames.META_DATA)}`);\n\t// console.log(`metaDataInternal:${getValues(FormFieldNames.META_DATA_INTERNAL)}`);\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<PageTitle>{routes[RouteKey.PERSON_UPSERT_FORM].title}</PageTitle>\n\t\t\t<Box component='span' m={1}>\n\t\t\t\t{/* 'handleSubmit' will validate your inputs before invoking 'onSubmit' */}\n\t\t\t\t<form\n\t\t\t\t\tclassName={classes.root} noValidate autoComplete='off'\n\t\t\t\t\tonSubmit={handleSubmit((data) => handleSubmitHandler(data))}\n\t\t\t\t>\n\t\t\t\t\t{generateFormDefinition(formDefinition, control, errors, loading)}\n\t\t\t\t\t{generateFormButtonsDiv(classes, loading, handleResetHandler)}\n\t\t\t\t</form>\n\t\t\t\t{apolloError && <AlertMessage severity={AlertSeverityType.ERROR} message={errorMessage} className={classes.spacer}/>}\n\t\t\t\t{/* {apolloError && <pre>{JSON.stringify(apolloError.graphQLErrors[0].message, undefined, 2)}</pre>} */}\n\t\t\t\t{loading && <LinearIndeterminate />}\n\t\t\t\t<SnackbarMessage message={c.I18N.snackbarPersonUpsertSuccess} severity={SnackbarSeverityType.SUCCESS} open={snackbarOpen} setOpen={setSnackbarOpen} />\n\t\t\t</Box>\n\t\t</Fragment >\n\t);\n}\n","import { Box } from '@material-ui/core';\nimport React, { Fragment, useRef, useState } from 'react';\nimport { useFieldArray, useForm } from 'react-hook-form';\nimport { RouteComponentProps } from 'react-router';\nimport { appConstants as c, mokeFormData } from '../../app';\nimport { commonFormFieldAssetId, commonFormFieldCurrency, commonFormFieldGoodsBag, commonFormFieldGoodsBagEan, commonFormFieldGoodsBagInput, commonFormFieldGoodsBagQuantity, commonFormFieldLocation, commonFormFieldMetadata, commonFormFieldMetadataInternal, commonFormFieldOutputEntity, commonFormFieldOutputTypeEntity, commonFormFieldQuantity, commonFormFieldTags, envVariables as e, formCommonOptions, RouteKey, routes } from '../../app/config';\nimport { useStateValue } from '../../app/state';\nimport { AlertMessage, AlertSeverityType } from '../../components/material-ui/alert-message';\nimport { LinearIndeterminate } from '../../components/material-ui/feedback';\nimport { PageTitle } from '../../components/material-ui/typography';\nimport { SnackbarMessage, SnackbarSeverityType } from '../../components/snackbar-message/SnackbarMessage';\nimport { NewTransactionInput, useCausesLazyQuery, useTransactionNewMutation } from '../../generated/graphql';\nimport { AutocompleteAndSelectOptions, CurrencyCode, EntityType, FormDefaultValues, FormInputType, FormPropFields, GoodsBagItem, ResourceType, Tag, TransactionType } from '../../types';\nimport { commonControlProps, generateFormButtonsDiv, generateFormDefinition, getGraphQLApolloError, isValidEnum, isValidJsonObject, useStyles, validateRegExpArray, validationMessage } from '../../utils';\n\n// eslint-disable-next-line\nlet renderCount = 0;\n\ntype FormInputs = {\n\ttransactionType: string;\n\tresourceType: string,\n\t// input/output entity object\n\tinputType: EntityType;\n\tinput: string;\n\toutputType: EntityType;\n\toutput: string;\n\tquantity: number;\n\tcurrency: string;\n\tassetId: string\n\tgoods: Array<any> //[GoodsInput!]\n\tgoodsBag: Array<GoodsBagItem>\n\tlocation?: string\n\ttags: Tag[],\n\tmetaData?: any,\n\tmetaDataInternal?: any,\n};\n\nenum FormFieldNames {\n\tTRANSACTION_TYPE = 'transactionType',\n\tRESOURCE_TYPE = 'resourceType',\n\tINPUT_TYPE = 'inputType',\n\tINPUT = 'input',\n\tOUTPUT_TYPE = 'outputType',\n\tOUTPUT = 'output',\n\tQUANTITY = 'quantity',\n\tCURRENCY = 'currency',\n\tASSET_ID = 'assetId',\n\tGOODS = 'goods',\n\tLOCATION = 'location',\n\tGOODS_BAG = 'goodsBag',\n\tTAGS = 'tags',\n\tMETA_DATA = 'metaData',\n\tMETA_DATA_INTERNAL = 'metaDataInternal',\n};\n\nconst defaultValues: FormDefaultValues = {\n\ttransactionType: c.VALUES.undefined,\n\tresourceType: c.VALUES.undefined,\n\tinputType: EntityType.person,\n\t// inject by user profile id state\n\tinput: '',\n\toutputType: c.VALUES.undefined,\n\toutput: c.VALUES.undefined,\n\tquantity: 1,\n\tcurrency: 'EUR',\n\tassetId: '',\n\tgoods: [],\n\tlocation: mokeFormData ? c.VALUES.mokeLocation : '',\n\tgoodsBag: [{ barCode: '', quantity: 1 }],\n\ttags: mokeFormData ? c.VALUES.mokeTags : [],\n\tmetaData: '',\n\tmetaDataInternal: '',\n};\n\n// use RouteComponentProps to get history props from Route\nexport const TransactionUpsertForm: React.FC<RouteComponentProps> = ({ history }) => {\n\t// ----------------------------------------------------------------------------------------------------\n\t// effects\n\t// TODO: https://www.pluralsight.com/guides/how-to-use-geolocation-call-in-reactjs\n\t// TODO: https://developer.mozilla.org/pt-PT/docs/Web/API/Geolocation/Utilizacao_da_geolocalizacao\n\t// useEffect(() => {\n\t// \tnavigator.geolocation.getCurrentPosition((position) => {\n\t// \t\tconsole.log(\"Latitude is :\", position.coords.latitude);\n\t// \t\tconsole.log(\"Longitude is :\", position.coords.longitude);\n\t// \t});\n\t// }, [])\n\n\t// TODO geoLocation\n\t// eslint-disable-next-line\n\t// const { location: currentLocation, error: currentError } = useCurrentLocation(c.GEOLOCATION_OPTIONS);\n\t// console.log(`currentLocation:[${currentLocation}]`);\n\t// ----------------------------------------------------------------------------------------------------\n\n\t// BOF of `DRY code shared with transactions & goods`\n\n\t// hooks styles\n\tconst classes = useStyles();\n\t// hooks state\n\t// eslint-disable-next-line\t\n\tconst [state, dispatch] = useStateValue();\n\tconst [lastTransactionType, setLastTransactionType] = useState<TransactionType>(TransactionType.transferFunds);\n\t// snackBar state\n\tconst [snackbarOpen, setSnackbarOpen] = React.useState<boolean>(false);\n\t// hooks react form\n\tconst { handleSubmit, watch, errors, control, reset, getValues, setValue, trigger } = useForm<FormInputs>({\n\t\t// required to inject owner from state\n\t\tdefaultValues: { ...defaultValues, input: state.user.profile.fiscalNumber },\n\t\t...formCommonOptions\n\t})\n\t// hooks: apollo\n\tconst [transactionNewMutation, { loading, error: apolloError }] = useTransactionNewMutation();\n\t// extract error message\n\tconst errorMessage = getGraphQLApolloError(apolloError);\n\n\tconst { fields, append, remove } = useFieldArray({\n\t\t// control props comes from useForm (optional: if you are using FormContext)\n\t\tcontrol,\n\t\t// unique name for your Field Array\n\t\tname: 'goodsBag',\n\t\t// default to \"id\", you can change the key name\n\t\t// keyName: \"id\"\n\t});\n\n\t// output personOptions: require [] array to be a reference, not a primitive\n\tconst [causeOptions, setCauseOptions] = useState<AutocompleteAndSelectOptions[]>([]);\n\tconst [causeOptionsLoaded, setCauseOptionsLoaded] = useState<boolean>(false);\n\tconst [causeQuery, { data: causeQueryData, loading: causeQueryLoading, error: causeQueryError }] = useCausesLazyQuery({\n\t\tfetchPolicy: e.apolloFetchPolicy,\n\t\tvariables: { skip: 0, take: 50 }\n\t});\n\tif (!causeQueryData && !causeQueryLoading) { causeQuery(); };\n\tif (!causeOptionsLoaded && causeQueryData && !causeQueryLoading && !causeQueryError) {\n\t\tsetCauseOptions(causeQueryData.causes.map((e) => {\n\t\t\treturn { title: `${e.name}`, value: e.id }\n\t\t}));\n\t\tsetCauseOptionsLoaded(true);\n\t}\n\n\t// customBag definition\n\tconst goodsBag: any[] = watch('goodsBag');\n\tconst maxGoodsItems = 10;\n\t// initialize any new refs, required to create refs outside of loop\n\tconst goodsBagEanInputRef: any[] = [];\n\tgoodsBagEanInputRef[0] = useRef(); goodsBagEanInputRef[1] = useRef(); goodsBagEanInputRef[2] = useRef(); goodsBagEanInputRef[3] = useRef(); goodsBagEanInputRef[4] = useRef(); goodsBagEanInputRef[5] = useRef(); goodsBagEanInputRef[6] = useRef(); goodsBagEanInputRef[7] = useRef(); goodsBagEanInputRef[8] = useRef(); goodsBagEanInputRef[9] = useRef();\n\tconst goodsBagQuantityInputRef: any[] = [];\n\tgoodsBagQuantityInputRef[0] = useRef(); goodsBagQuantityInputRef[1] = useRef(); goodsBagQuantityInputRef[2] = useRef(); goodsBagQuantityInputRef[3] = useRef(); goodsBagQuantityInputRef[4] = useRef(); goodsBagQuantityInputRef[5] = useRef(); goodsBagQuantityInputRef[6] = useRef(); goodsBagQuantityInputRef[7] = useRef(); goodsBagQuantityInputRef[8] = useRef(); goodsBagQuantityInputRef[9] = useRef();\n\t// goodsBagEan\n\tconst goodsBagEan: FormPropFields = {\n\t\t...commonFormFieldGoodsBagEan(!causeOptionsLoaded),\n\t};\n\t// goodsBagQuantity\n\tconst goodsBagQuantity: FormPropFields = {\n\t\t...commonFormFieldGoodsBagQuantity(!causeOptionsLoaded),\n\t};\n\n\t// DRY function shared with transactions & goods, have setValue, trigger, let it be simple\n\tconst handleIncreaseDecreaseGood = (goodsBagArg: Array<GoodsBagItem>, index: number, value: number) => {\n\t\tconst namePrefix = `goodsBag[${index}]`;\n\t\t// increase quantity\t\t\t\n\t\tgoodsBagArg[index].quantity = goodsBagArg[index].quantity + value;\n\t\tsetValue(`${namePrefix}.quantity`, goodsBagArg[index].quantity);\n\t\t// trigger validation\n\t\ttrigger(`${namePrefix}.barCode`);\n\t\ttrigger(`${namePrefix}.quantity`);\n\t};\n\n\t// call function with all this magic local references\n\tconst customGoodsBag = commonFormFieldGoodsBag(\n\t\t// FormFieldNames.GOODS_BAG was replaced with formFieldName\n\t\tFormFieldNames.GOODS_BAG,\n\t\t// useStyles\n\t\tclasses,\n\t\t// useForm,\n\t\tcontrol,\n\t\terrors,\n\t\t// useFieldArray\n\t\tremove,\n\t\tappend,\n\t\thandleIncreaseDecreaseGood,\n\t\t// other\n\t\tloading,\n\t\tfields,\n\t\tgoodsBag,\n\t\tgoodsBagEan,\n\t\tgoodsBagQuantity,\n\t\tgoodsBagEanInputRef,\n\t\tgoodsBagQuantityInputRef,\n\t\tcauseOptionsLoaded,\n\t\tmaxGoodsItems,\n\t)\n\n\t// debug\n\trenderCount++;\n\n\t// EOF of `DRY code shared with transactions & goods`\n\n\t// console.log('errors', JSON.stringify(errors, undefined, 2));\n\t// console.log(`values:${JSON.stringify(getValues(), undefined, 2)}`);\n\t// if (errors[FormFieldNames.GOODS_BAG]) console.log('errors', JSON.stringify(errors[FormFieldNames.GOODS_BAG][0].barCode, undefined, 2));\n\t// console.log(`tags:${JSON.stringify(getValues(FormFieldNames.TAGS), undefined, 2)}`);\n\n\t// watch\n\tconst transactionType = watch(FormFieldNames.TRANSACTION_TYPE);\n\tconst resourceType = watch(FormFieldNames.RESOURCE_TYPE);\n\t// require to use watch else getValues(FormFieldNames.x) don't work has expected\n\tconst inputType = watch(FormFieldNames.INPUT_TYPE);\n\tconst outputType = watch(FormFieldNames.OUTPUT_TYPE);\n\n\t// if transactionType Changed, reset resourceType to first option\n\tif (lastTransactionType !== transactionType) {\n\t\t//setTimeout(() => { setValue(FormFieldNames.RESOURCE_TYPE, c.VALUES.undefined); }, 100);\n\t\tif (transactionType === TransactionType.transferFunds && resourceType !== ResourceType.funds) {\n\t\t\tsetTimeout(() => { setValue(FormFieldNames.RESOURCE_TYPE, ResourceType.funds); }, 100);\n\t\t} else if (transactionType === TransactionType.transferVolunteeringHours && resourceType !== ResourceType.volunteeringHours) {\n\t\t\tsetTimeout(() => { setValue(FormFieldNames.RESOURCE_TYPE, ResourceType.volunteeringHours); }, 100);\n\t\t} else if (transactionType === TransactionType.transferGoods && resourceType !== ResourceType.genericGoods) {\n\t\t\tsetTimeout(() => { setValue(FormFieldNames.RESOURCE_TYPE, ResourceType.genericGoods); }, 100);\n\t\t} else if (transactionType === TransactionType.transferAsset && resourceType !== ResourceType.physicalAsset) {\n\t\t\tsetTimeout(() => { setValue(FormFieldNames.RESOURCE_TYPE, ResourceType.physicalAsset); }, 100);\n\t\t} else if (transactionType === c.VALUES.undefined) {\n\t\t\tsetTimeout(() => { setValue(FormFieldNames.RESOURCE_TYPE, c.VALUES.undefined); }, 100);\n\t\t}\n\t\t// update lastTransactionType\n\t\tsetLastTransactionType(transactionType);\n\t}\n\n\tconst resourceTypeOptions = () => {\n\t\tswitch (transactionType) {\n\t\t\tcase TransactionType.transferFunds:\n\t\t\t\treturn [\n\t\t\t\t\t{ title: c.I18N.resourceTypeOptionFunds, value: ResourceType.funds },\n\t\t\t\t]\n\t\t\tcase TransactionType.transferVolunteeringHours:\n\t\t\t\treturn [\n\t\t\t\t\t{ title: c.I18N.resourceTypeOptionVolunteeringHours, value: ResourceType.volunteeringHours },\n\t\t\t\t]\n\t\t\tcase TransactionType.transferGoods:\n\t\t\t\treturn [\n\t\t\t\t\t{ title: c.I18N.resourceTypeOptionGenericGoods, value: ResourceType.genericGoods },\n\t\t\t\t]\n\t\t\tcase TransactionType.transferAsset:\n\t\t\t\treturn [\n\t\t\t\t\t{ title: c.I18N.resourceTypeOptionPhysicalAsset, value: ResourceType.physicalAsset },\n\t\t\t\t\t{ title: c.I18N.resourceTypeOptionDigitalAsset, value: ResourceType.digitalAsset },\n\t\t\t\t\t{ title: c.I18N.resourceTypeOptionPhysicalVoucher, value: ResourceType.physicalVoucher },\n\t\t\t\t\t{ title: c.I18N.resourceTypeOptionDigitalVoucher, value: ResourceType.digitalVoucher },\n\t\t\t\t]\n\t\t\tdefault:\n\t\t\t\treturn [];\n\t\t}\n\t}\n\n\tconst handleResetHandler = async () => { reset(defaultValues, {}) };\n\tconst handleSubmitHandler = async (data: FormInputs) => {\n\t\ttry {\n\t\t\tconst newTransactionData: NewTransactionInput = {\n\t\t\t\ttransactionType: data.transactionType,\n\t\t\t\tresourceType: data.resourceType,\n\t\t\t\tinput: {\n\t\t\t\t\ttype: data.inputType,\n\t\t\t\t\tid: data.input,\n\t\t\t\t},\n\t\t\t\toutput: {\n\t\t\t\t\ttype: data.outputType,\n\t\t\t\t\tid: data.output,\n\t\t\t\t},\n\t\t\t\t// require to cast to number else fails on server validations\n\t\t\t\tquantity: Number(data.quantity),\n\t\t\t\tcurrency: data.currency,\n\t\t\t\tassetId: data.assetId,\n\t\t\t\tgoods: goodsBag.map((e: GoodsBagItem) => {\n\t\t\t\t\treturn {\n\t\t\t\t\t\tcode: e.barCode, barCode: e.barCode, name: e.barCode, quantity: Number(e.quantity)\n\t\t\t\t\t}\n\t\t\t\t}),\n\t\t\t\tlocation: data.location,\n\t\t\t\tmetaData: data.metaData ? JSON.parse(data.metaData) : {},\n\t\t\t\tmetaDataInternal: data.metaDataInternal ? JSON.parse(data.metaDataInternal) : {},\n\t\t\t};\n\n\t\t\t// fire mutation\n\t\t\tconst response = await transactionNewMutation({ variables: { newTransactionData: newTransactionData } });\n\n\t\t\tif (response) {\n\t\t\t\t// TODO: cleanup old result message\n\t\t\t\t// const payload = { message: parseTemplate(c.I18N.newModelCreatedSuccessfully, { model: ModelType.transaction, id: response.data.transactionNew.id }) };\n\t\t\t\t// dispatch({ type: ActionType.RESULT_MESSAGE, payload });\n\t\t\t\t// history.push({ pathname: routes.RESULT_PAGE.path });\n\t\t\t\tsetSnackbarOpen(true);\n\t\t\t\treset();\n\t\t\t}\n\t\t} catch (error) {\n\t\t\t// don't throw here else we catch react app, errorMessage is managed in `getGraphQLApolloError(apolloError)`\n\t\t\t// console.error('graphQLErrors' in errors && error.graphQLErrors[0] ? JSON.stringify(error.graphQLErrors[0].message, undefined, 2) : error);\n\t\t}\n\t};\n\n\tconst formDefinition: Record<string, FormPropFields> = {\n\t\t[FormFieldNames.TRANSACTION_TYPE]: {\n\t\t\tinputRef: useRef(),\n\t\t\ttype: FormInputType.SELECT,\n\t\t\tname: FormFieldNames.TRANSACTION_TYPE,\n\t\t\tcontrolProps: commonControlProps,\n\t\t\tfullWidth: true,\n\t\t\tlabel: c.I18N.transferTypeLabel,\n\t\t\trules: {\n\t\t\t\t// TODO create helper to validate enums\n\t\t\t\tvalidate: () => isValidEnum(TransactionType, getValues(FormFieldNames.TRANSACTION_TYPE))\n\t\t\t\t\t? true\n\t\t\t\t\t: validationMessage('required', FormFieldNames.TRANSACTION_TYPE)\n\t\t\t},\n\t\t\toptions: () => [\n\t\t\t\t{ title: c.I18N.transactionTypeOptionTransferFunds, value: TransactionType.transferFunds },\n\t\t\t\t{ title: c.I18N.transactionTypeOptionTransferVolunteeringHours, value: TransactionType.transferVolunteeringHours },\n\t\t\t\t{ title: c.I18N.transactionTypeOptionTransferGoods, value: TransactionType.transferGoods },\n\t\t\t\t{ title: c.I18N.transactionTypeOptionTransferAsset, value: TransactionType.transferAsset },\n\t\t\t],\n\t\t\tdisabled: !causeOptionsLoaded,\n\t\t\t// onChange: () => console.log('here'),\n\t\t},\n\t\t[FormFieldNames.RESOURCE_TYPE]: {\n\t\t\tinputRef: useRef(),\n\t\t\ttype: FormInputType.SELECT,\n\t\t\tname: FormFieldNames.RESOURCE_TYPE,\n\t\t\tcontrolProps: commonControlProps,\n\t\t\tfullWidth: true,\n\t\t\tlabel: c.I18N.resourceTypeLabel,\n\t\t\trules: {\n\t\t\t\tvalidate: () => isValidEnum(ResourceType, getValues(FormFieldNames.RESOURCE_TYPE))\n\t\t\t\t\t? true\n\t\t\t\t\t: validationMessage('required', FormFieldNames.RESOURCE_TYPE)\n\t\t\t},\n\t\t\toptions: () => resourceTypeOptions(),\n\t\t\tdisabled: !causeOptionsLoaded || transactionType === c.VALUES.undefined,\n\t\t\t// visible: (control) => {\n\t\t\t// \treturn (control.getValues(FormFieldNames.TRANSACTION_TYPE) === TransactionType.TransferAsset);\n\t\t\t// }\n\t\t},\n\t\t[FormFieldNames.ASSET_ID]: {\n\t\t\t...commonFormFieldAssetId(useRef(), FormFieldNames.ASSET_ID, () => {\n\t\t\t\treturn (control.getValues(FormFieldNames.TRANSACTION_TYPE) === TransactionType.transferAsset)\n\t\t\t}),\n\t\t\tdisabled: !causeOptionsLoaded,\n\t\t},\n\t\t// [FormFieldNames.INPUT_TYPE]: {\n\t\t// \tinputRef: useRef(),\n\t\t// \ttype: FormInputType.SELECT,\n\t\t// \tname: FormFieldNames.INPUT_TYPE,\n\t\t// \tcontrolProps: commonControlProps,\n\t\t// \tfullWidth: true,\n\t\t// \tlabel: c.I18N.inputTypeLabel,\n\t\t// \t// selection don't use placeHolder\n\t\t// \t// placeholder: c.VALUES.PHYSICAL_ASSET,\n\t\t// \trules: {\n\t\t// \t\tvalidate: () => isValidEnum(EntityType, getValues(FormFieldNames.INPUT_TYPE))\n\t\t// \t\t\t? true\n\t\t// \t\t\t: validationMessage('required', FormFieldNames.INPUT_TYPE)\n\t\t// \t},\n\t\t// \toptions: () => c.PARTICIPANT_PERSON_ENTITY_TYPE_OPTIONS,\n\t\t// \tdisabled: !causeOptionsLoaded,\n\t\t// },\n\t\t[FormFieldNames.INPUT_TYPE]: {\n\t\t\t...commonFormFieldOutputTypeEntity(useRef(), FormFieldNames.INPUT_TYPE, () => isValidEnum(EntityType, getValues(FormFieldNames.INPUT_TYPE))),\n\t\t\t// override outputLabel\n\t\t\tlabel: c.I18N.inputTypeLabel,\n\t\t\tdisabled: !causeOptionsLoaded,\n\t\t},\n\t\t// [FormFieldNames.INPUT]: {\n\t\t// \tinputRef: useRef(),\n\t\t// \ttype: FormInputType.TEXT,\n\t\t// \tname: FormFieldNames.INPUT,\n\t\t// \tcontrolProps: commonControlProps,\n\t\t// \tfullWidth: true,\n\t\t// \tlabel: c.I18N.inputLabel,\n\t\t// \tplaceholder: c.I18N.inputPlaceholder,\n\t\t// \thelperText: c.I18N.inputHelperText,\n\t\t// \trules: {\n\t\t// \t\t// validate both regex uuid, fiscalNumber and mobilePhone\n\t\t// \t\tvalidate: () => validateRegExpArray(getValues(FormFieldNames.INPUT), [c.REGEXP.uuid, c.REGEXP.fiscalNumber, c.REGEXP.mobilePhone])\n\t\t// \t\t\t? true\n\t\t// \t\t\t: validationMessage('required', FormFieldNames.INPUT)\n\t\t// \t},\n\t\t// \tdisabled: !causeOptionsLoaded,\n\t\t// \t// AUTOCOMPLETE\n\t\t// \t// options: personOptions,\n\t\t// \t// disableCloseOnSelect: false,\n\t\t// },\n\t\t[FormFieldNames.INPUT]: {\n\t\t\t...commonFormFieldOutputEntity(useRef(), FormFieldNames.INPUT, inputType,\n\t\t\t\t() => causeOptions,\n\t\t\t\t// visible\n\t\t\t\t() => { return (inputType !== c.VALUES.undefined); },\n\t\t\t\t// validate\n\t\t\t\t() => { return validateRegExpArray(getValues(FormFieldNames.INPUT), [c.REGEXP.uuid, c.REGEXP.fiscalNumber, c.REGEXP.mobilePhone]) }\n\t\t\t),\n\t\t\tdisabled: !causeOptionsLoaded,\n\t\t\t// override outputLabel\n\t\t\tlabel: c.I18N.inputLabel,\n\t\t},\n\t\t// [FormFieldNames.OUTPUT_TYPE]: {\n\t\t// \tinputRef: useRef(),\n\t\t// \ttype: FormInputType.SELECT,\n\t\t// \tname: FormFieldNames.OUTPUT_TYPE,\n\t\t// \tcontrolProps: commonControlProps,\n\t\t// \tfullWidth: true,\n\t\t// \tlabel: c.I18N.outputTypeLabel,\n\t\t// \t// selection don't use placeHolder\n\t\t// \t// placeholder: c.VALUES.PHYSICAL_ASSET,\n\t\t// \trules: {\n\t\t// \t\tvalidate: () => isValidEnum(EntityType, getValues(FormFieldNames.OUTPUT_TYPE))\n\t\t// \t\t\t? true\n\t\t// \t\t\t: validationMessage('required', FormFieldNames.OUTPUT_TYPE)\n\t\t// \t},\n\t\t// \toptions: () => c.ENTITY_TYPE_OPTIONS,\n\t\t// \tdisabled: true,\n\t\t// },\n\t\t[FormFieldNames.OUTPUT_TYPE]: {\n\t\t\t...commonFormFieldOutputTypeEntity(useRef(), FormFieldNames.OUTPUT_TYPE, () => isValidEnum(EntityType, getValues(FormFieldNames.OUTPUT_TYPE))),\n\t\t},\n\t\t// [FormFieldNames.OUTPUT]: {\n\t\t// \tinputRef: useRef(),\n\t\t// \ttype: FormInputType.SELECT,\n\t\t// \tname: FormFieldNames.OUTPUT,\n\t\t// \tcontrolProps: commonControlProps,\n\t\t// \tfullWidth: true,\n\t\t// \tlabel: c.I18N.outputLabel,\n\t\t// \tplaceholder: c.I18N.outputPlaceholder,\n\t\t// \thelperText: c.I18N.outputHelperText,\n\t\t// \t// AUTOCOMPLETE\n\t\t// \t// rules: {\n\t\t// \t// \tvalidate: () => validateRegExpObjectProperty(getValues(FormFieldNames.OUTPUT), 'value', c.REGEXP.uuid)\n\t\t// \t// \t\t? true\n\t\t// \t// \t\t: validationMessage('required', FormFieldNames.OUTPUT)\n\t\t// \t// },\n\t\t// \trules: validationRuleRegExHelper(FormFieldNames.OUTPUT, c.REGEXP.uuid),\n\t\t// \toptions: () => causeOptions,\n\t\t// \tdisabled: !causeOptionsLoaded,\n\t\t// \t// disableCloseOnSelect: false,\n\t\t// },\n\t\t[FormFieldNames.OUTPUT]: {\n\t\t\t...commonFormFieldOutputEntity(useRef(), FormFieldNames.OUTPUT, outputType,\n\t\t\t\t() => causeOptions,\n\t\t\t\t// visible\n\t\t\t\t() => { return (outputType !== c.VALUES.undefined); },\n\t\t\t\t// validate\n\t\t\t\t() => { return validateRegExpArray(getValues(FormFieldNames.OUTPUT), [c.REGEXP.uuid, c.REGEXP.fiscalNumber, c.REGEXP.mobilePhone]) }\n\t\t\t),\n\t\t\tdisabled: !causeOptionsLoaded,\n\t\t},\n\t\t// [FormFieldNames.QUANTITY]: {\n\t\t// \tinputRef: useRef(),\n\t\t// \ttype: FormInputType.NUMBER,\n\t\t// \tname: FormFieldNames.QUANTITY,\n\t\t// \tcontrolProps: commonControlProps,\n\t\t// \tfullWidth: true,\n\t\t// \tlabel: c.I18N.quantityLabel,\n\t\t// \tplaceholder: c.I18N.quantityPlaceHolder,\n\t\t// \trules: validationRuleRegExHelper(FormFieldNames.QUANTITY, c.REGEXP.integerPositiveNonZero),\n\t\t// \tdisabled: !causeOptionsLoaded,\n\t\t// \tvisible: (control) => {\n\t\t// \t\treturn (control.getValues(FormFieldNames.TRANSACTION_TYPE) !== TransactionType.transferGoods && control.getValues(FormFieldNames.TRANSACTION_TYPE) !== c.VALUES.undefined);\n\t\t// \t},\n\t\t// },\n\t\t[FormFieldNames.QUANTITY]: {\n\t\t\t...commonFormFieldQuantity(useRef(), FormFieldNames.QUANTITY, () => {\n\t\t\t\treturn (control.getValues(FormFieldNames.TRANSACTION_TYPE) !== c.VALUES.undefined && transactionType !== TransactionType.transferGoods);\n\t\t\t}),\n\t\t\tdisabled: !causeOptionsLoaded,\n\t\t},\n\t\t// [FormFieldNames.CURRENCY]: {\n\t\t// \tinputRef: useRef(),\n\t\t// \ttype: FormInputType.SELECT,\n\t\t// \tname: FormFieldNames.CURRENCY,\n\t\t// \tcontrolProps: commonControlProps,\n\t\t// \tfullWidth: true,\n\t\t// \tlabel: c.I18N.currencyLabel,\n\t\t// \trules: {\n\t\t// \t\tvalidate: () => isValidEnum(CurrencyCode, getValues(FormFieldNames.CURRENCY))\n\t\t// \t\t\t? true\n\t\t// \t\t\t: validationMessage('required', FormFieldNames.CURRENCY)\n\t\t// \t},\n\t\t// \toptions: () => [\n\t\t// \t\t{ title: c.I18N.currencyCodeEur, value: CurrencyCode.eur },\n\t\t// \t\t{ title: c.I18N.currencyCodeUsd, value: CurrencyCode.usd },\n\t\t// \t],\n\t\t// \tdisabled: !causeOptionsLoaded,\n\t\t// \tvisible: (control) => {\n\t\t// \t\t// required to check if is undefined and assume true as a default\n\t\t// \t\treturn (!control.getValues(FormFieldNames.TRANSACTION_TYPE) || control.getValues(FormFieldNames.TRANSACTION_TYPE) === TransactionType.transferFunds);\n\t\t// \t}\n\t\t// },\n\t\t[FormFieldNames.CURRENCY]: {\n\t\t\t...commonFormFieldCurrency(useRef(), FormFieldNames.CURRENCY,\n\t\t\t\t() => isValidEnum(CurrencyCode, getValues(FormFieldNames.CURRENCY)),\n\t\t\t\t// required to check if is undefined and assume true as a default\n\t\t\t\t() => (transactionType && transactionType === TransactionType.transferFunds),\n\t\t\t),\n\t\t\tdisabled: !causeOptionsLoaded,\n\t\t},\n\t\t// [FormFieldNames.ASSET_ID]: {\n\t\t// \tinputRef: useRef(),\n\t\t// \ttype: FormInputType.TEXT,\n\t\t// \tname: FormFieldNames.ASSET_ID,\n\t\t// \tcontrolProps: commonControlProps,\n\t\t// \tfullWidth: true,\n\t\t// \tlabel: c.I18N.assetIdLabel,\n\t\t// \tplaceholder: c.I18N.assetIdPlaceholder,\n\t\t// \thelperText: c.I18N.assetIdHelperText,\n\t\t// \trules: validationRuleRegExHelper(FormFieldNames.ASSET_ID, c.REGEXP.uuid),\n\t\t// \tdisabled: !causeOptionsLoaded,\n\t\t// \tvisible: (control) => {\n\t\t// \t\treturn (control.getValues(FormFieldNames.TRANSACTION_TYPE) === TransactionType.transferAsset);\n\t\t// \t}\n\t\t// },\n\t\t[FormFieldNames.ASSET_ID]: {\n\t\t\t...commonFormFieldAssetId(useRef(), FormFieldNames.ASSET_ID, () => {\n\t\t\t\treturn (control.getValues(FormFieldNames.TRANSACTION_TYPE) === TransactionType.transferAsset)\n\t\t\t}),\n\t\t\tdisabled: !causeOptionsLoaded,\n\t\t},\n\t\t[FormFieldNames.GOODS_BAG]: {\n\t\t\t...commonFormFieldGoodsBagInput(useRef(), FormFieldNames.GOODS_BAG, customGoodsBag, () => {\n\t\t\t\treturn (control.getValues(FormFieldNames.TRANSACTION_TYPE) === TransactionType.transferGoods);\n\t\t\t}),\n\t\t\tdisabled: !causeOptionsLoaded,\n\t\t},\n\t\t[FormFieldNames.LOCATION]: {\n\t\t\t...commonFormFieldLocation(useRef(), FormFieldNames.LOCATION),\n\t\t\tdisabled: !causeOptionsLoaded,\n\t\t},\n\t\t[FormFieldNames.TAGS]: {\n\t\t\t...commonFormFieldTags(useRef(), FormFieldNames.TAGS, () => (getValues(FormFieldNames.TAGS) as string[]).length > 0),\n\t\t},\n\t\t[FormFieldNames.META_DATA]: {\n\t\t\t...commonFormFieldMetadata(useRef(), FormFieldNames.META_DATA, () => isValidJsonObject(getValues(FormFieldNames.META_DATA))),\n\t\t\tdisabled: !causeOptionsLoaded,\n\t\t\tvisible: false,\n\t\t},\n\t\t[FormFieldNames.META_DATA_INTERNAL]: {\n\t\t\t...commonFormFieldMetadataInternal(useRef(), FormFieldNames.META_DATA_INTERNAL, () => isValidJsonObject(getValues(FormFieldNames.META_DATA_INTERNAL))),\n\t\t\tdisabled: !causeOptionsLoaded,\n\t\t\tvisible: false,\n\t\t},\n\t};\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<PageTitle>{routes[RouteKey.TRANSACTION_UPSERT_FORM].title}</PageTitle>\n\t\t\t<Box component='span' m={1}>\n\t\t\t\t{/* 'handleSubmit' will validate your inputs before invoking 'onSubmit' */}\n\t\t\t\t<form\n\t\t\t\t\tclassName={classes.root} noValidate autoComplete='off'\n\t\t\t\t\tonSubmit={handleSubmit((data) => handleSubmitHandler(data))}\n\t\t\t\t>\n\t\t\t\t\t{generateFormDefinition(formDefinition, control, errors, loading)}\n\t\t\t\t\t{generateFormButtonsDiv(classes, loading || !causeOptionsLoaded, handleResetHandler)}\n\t\t\t\t</form>\n\t\t\t\t{apolloError && <AlertMessage severity={AlertSeverityType.ERROR} message={errorMessage} className={classes.spacer} />}\n\t\t\t\t{/* {apolloError && <pre>{JSON.stringify(apolloError.graphQLErrors[0].message, undefined, 2)}</pre>} */}\n\t\t\t\t{loading && <LinearIndeterminate />}\n\t\t\t\t<SnackbarMessage message={c.I18N.snackbarTransactionUpsertSuccess} severity={SnackbarSeverityType.SUCCESS} open={snackbarOpen} setOpen={setSnackbarOpen} />\n\t\t\t\t{/* <AlertMessage severity={AlertSeverityType.WARNING} message={c.I18N.transactionUpsertFormWip} /> */}\n\t\t\t</Box>\n\t\t</Fragment >\n\t);\n}\n","import { AccountTree as AccountTreeIcon, AddBox as AddBoxIcon, Apartment as ApartmentIcon, Assessment as AssessmentIcon, DynamicFeed as DynamicFeedIcon, Explore as ExploreIcon, Fingerprint as FingerprintIcon, Home as HomeIcon, LocalMall as LocalMallIcon, LocalPlay as LocalPlayIcon, Loyalty as LoyaltyIcon, People as PeopleIcon } from '@material-ui/icons';\nimport React from 'react';\nimport { AssetsQueryPage, AssetUpsertForm, CausesQueryPage, CauseUpsertForm, DashBoardPage, UseCasesPage, FeedPage, HomePage, ParticipantsQueryPage, ParticipantUpsertForm, PersonProfilePage, PersonQueryPage, PersonUpsertForm, ResultPage, SignInPage, SignUpPage, StatePage, TimelinePage, TransactionGoodsForm, TransactionsQueryPage, TransactionUpsertForm } from '../../pages';\nimport { CommunityPage } from '../../pages/section1/CommunityPage';\nimport { DrawerListItem, DrawerSections, RouteItem } from '../../types';\nimport { getEnumKeyFromEnumValue } from '../../utils';\n\nexport const defaultDrawerListItemIcon: JSX.Element = <AddBoxIcon />;\nexport const subStrCode = (code: string) => code.substr(0, 28);\n\nexport enum RouteKey {\n  HOME = 'HOME',\n  // section1\n  PROFILE = 'PROFILE',\n  SIGN_IN = 'SIGN_IN',\n  SIGN_UP = 'SIGN_UP',\n  RESULT_PAGE = 'RESULT_PAGE',\n  STATE = 'STATE',\n  DASHBOARD = 'DASHBOARD',\n  TIMELINE = 'TIMELINE',\n  USE_CASES = 'USE_CASES',\n  GRAPH = 'GRAPH',\n  COMMUNITY = 'COMMUNITY',\n  // section2\n  PARTICIPANTS = 'PARTICIPANTS',\n  PERSONS = 'PERSONS',\n  CAUSES = 'CAUSES',\n  ASSETS = 'ASSETS',\n  TRANSACTIONS = 'TRANSACTIONS',\n  // section3\n  ASSET_UPSERT_FORM = 'ASSET_UPSERT_FORM',\n  CAUSE_UPSERT_FORM = 'CAUSE_UPSERT_FORM',\n  PARTICIPANT_UPSERT_FORM = 'PARTICIPANT_UPSERT_FORM',\n  PERSON_UPSERT_FORM = 'PERSON_UPSERT_FORM',\n  TRANSACTION_UPSERT_FORM = 'TRANSACTION_UPSERT_FORM',\n  TRANSACTION_GOODS_FORM = 'TRANSACTION_GOODS_FORM',\n}\n\n// TODO: add title and label to i18n\n// route\nexport const routes: Record<RouteKey, RouteItem> = {\n  // SECTION0\n  [RouteKey.HOME]: {\n    title: 'Home',\n    label: 'Home',\n    path: '/',\n    component: HomePage,\n    section: DrawerSections.SECTION0,\n    drawerIcon: <HomeIcon />,\n    exact: true,\n  },\n  // SECTION1\n  [RouteKey.PROFILE]: {\n    title: 'Profile',\n    label: 'Profile',\n    path: '/profile',\n    component: PersonProfilePage,\n    section: DrawerSections.SECTION1,\n    drawerIcon: <FingerprintIcon />,\n    visible: true,\n  },\n  [RouteKey.USE_CASES]: {\n    title: 'UseCases',\n    label: 'UseCases',\n    path: '/use-cases',\n    component: UseCasesPage,\n    section: DrawerSections.SECTION1,\n    visible: false,\n  },\n  [RouteKey.GRAPH]: {\n    title: 'Graph Starter',\n    label: 'Graph',\n    path: '/graph',\n    component: FeedPage,\n    section: DrawerSections.SECTION1,\n    drawerIcon: <DynamicFeedIcon />,\n  },\n  [RouteKey.DASHBOARD]: {\n    title: 'DashBoard',\n    label: 'DashBoard',\n    path: '/dashBoard',\n    component: DashBoardPage,\n    section: DrawerSections.SECTION1,\n    visible: false,\n  },\n  [RouteKey.TIMELINE]: {\n    title: 'TimeLine',\n    label: 'TimeLine',\n    path: '/timeline',\n    component: TimelinePage,\n    section: DrawerSections.SECTION1,\n    visible: false,\n  },\n  [RouteKey.STATE]: {\n    title: 'State',\n    label: 'State',\n    path: '/state',\n    component: StatePage,\n    section: DrawerSections.SECTION1,\n    exact: true,\n    visible: false,\n  },\n  [RouteKey.RESULT_PAGE]: {\n    title: 'Result Page',\n    label: 'Result Page',\n    path: '/result-page',\n    component: ResultPage,\n    section: DrawerSections.SECTION1,\n    visible: false,\n  },\n  [RouteKey.COMMUNITY]: {\n    title: 'Community',\n    label: 'Community',\n    path: '/community',\n    component: CommunityPage,\n    section: DrawerSections.SECTION1,\n    drawerIcon: <LoyaltyIcon />,\n    visible: false,\n  },\n  [RouteKey.SIGN_IN]: {\n    title: 'SignIn',\n    label: 'SignIn',\n    path: '/signin',\n    component: SignInPage,\n    // section: NO SECTION,\n    visible: false,\n  },\n  [RouteKey.SIGN_UP]: {\n    title: 'SignUp',\n    label: 'SignUp',\n    path: '/signup',\n    component: SignUpPage,\n    section: DrawerSections.SECTION1,\n    // section: NO SECTION,\n    visible: false,\n  },\n  [RouteKey.PARTICIPANTS]: {\n    title: 'Organizations',\n    label: 'Organizations',\n    path: '/organizations',\n    component: ParticipantsQueryPage,\n    section: DrawerSections.SECTION2,\n  },\n  // SECTION2\n  [RouteKey.PERSONS]: {\n    title: 'Persons',\n    label: 'Persons',\n    path: '/persons',\n    component: PersonQueryPage,\n    section: DrawerSections.SECTION2,\n  },\n  [RouteKey.CAUSES]: {\n    title: 'Causes',\n    label: 'Causes',\n    path: '/causes',\n    component: CausesQueryPage,\n    section: DrawerSections.SECTION2,\n    drawerIcon: <ExploreIcon />,\n  },\n  [RouteKey.ASSETS]: {\n    title: 'Assets',\n    label: 'Assets',\n    path: '/assets',\n    component: AssetsQueryPage,\n    section: DrawerSections.SECTION2,\n  },\n  [RouteKey.TRANSACTIONS]: {\n    title: 'Transactions',\n    label: 'Transactions',\n    path: '/transactions',\n    // TransactionSubscriptionPage\n    component: TransactionsQueryPage,\n    section: DrawerSections.SECTION2,\n  },\n  // SECTION3\n  [RouteKey.PARTICIPANT_UPSERT_FORM]: {\n    title: 'New Organization',\n    label: 'New Organization',\n    path: '/new-organization',\n    component: ParticipantUpsertForm,\n    section: DrawerSections.SECTION3,\n    drawerIcon: <ApartmentIcon />,\n  },\n  [RouteKey.PERSON_UPSERT_FORM]: {\n    title: 'New Person',\n    label: 'New Person',\n    path: '/new-person',\n    component: PersonUpsertForm,\n    section: DrawerSections.SECTION3,\n    drawerIcon: <PeopleIcon />,\n  },\n  [RouteKey.CAUSE_UPSERT_FORM]: {\n    title: 'New Cause',\n    label: 'New Cause',\n    path: '/new-cause',\n    component: CauseUpsertForm,\n    section: DrawerSections.SECTION3,\n    drawerIcon: <AssessmentIcon />,\n  },\n  [RouteKey.ASSET_UPSERT_FORM]: {\n    title: 'New Asset',\n    label: 'New Asset',\n    path: '/new-asset',\n    component: AssetUpsertForm,\n    section: DrawerSections.SECTION3,\n    drawerIcon: <LocalPlayIcon />,\n  },\n  [RouteKey.TRANSACTION_UPSERT_FORM]: {\n    title: 'New Transaction',\n    label: 'New Transaction',\n    path: '/new-transaction',\n    component: TransactionUpsertForm,\n    section: DrawerSections.SECTION3,\n    drawerIcon: <AccountTreeIcon />,\n  },\n  [RouteKey.TRANSACTION_GOODS_FORM]: {\n    title: 'Reader (Hardware Required)',\n    label: 'Barcode Reader',\n    path: '/goods-transaction',\n    component: TransactionGoodsForm,\n    section: DrawerSections.SECTION3,\n    drawerIcon: <LocalMallIcon />,\n  },\n};\n\n// drawer appShell: convert record to DrawerListItem[]\nexport const drawerCategories: DrawerListItem[] = [];\nfor (const key in routes) {\n  if (routes.hasOwnProperty(key)) {\n    const keyEnum: RouteKey = getEnumKeyFromEnumValue(RouteKey, key);\n    drawerCategories.push({\n      label: routes[keyEnum].label,\n      path: routes[keyEnum].path,\n      section: routes[keyEnum].section,\n      icon: routes[keyEnum].drawerIcon,\n      visible: routes[keyEnum].visible\n    });\n  }\n}\n","import { Typography } from '@material-ui/core';\nimport Box from '@material-ui/core/Box';\nimport React, { Fragment } from 'react';\nimport { PageTitle } from '../../components/material-ui/typography';\nimport { RouteKey, routes } from '../../app/config';\n\ninterface Props { }\n\nexport const HomePage: React.FC<Props> = () => {\n  return (\n    <Fragment>\n      <PageTitle>{routes[RouteKey.HOME].title}</PageTitle>\n      <Box component='span' m={1}>\n        <Typography paragraph>\n          SolidaryChain is a network, a social movement based on an open governance concept and open-source technology, with focus on transparency, integrity, and equity.\n        </Typography>\n      </Box>\n    </Fragment>\n  );\n}","import Box from '@material-ui/core/Box';\nimport React, { Fragment } from 'react';\nimport { envVariables as e } from '../../app/config/env';\nimport { AlertMessage, AlertSeverityType } from '../../components/material-ui/alert-message';\nimport { LinearIndeterminate } from '../../components/material-ui/feedback';\nimport { usePersonProfileQuery } from '../../generated/graphql';\nimport { PageTitle } from '../../components/material-ui/typography';\nimport { routes, RouteKey } from '../../app/config';\n\ninterface Props { }\n\nexport const PersonProfilePage: React.FC<Props> = () => {\n  const { data, loading, error } = usePersonProfileQuery({\n    fetchPolicy: e.apolloFetchPolicy\n  });\n\n  if (error) {\n    return <AlertMessage severity={AlertSeverityType.ERROR} message={error.message} />;\n  }\n\nconst pageTitle = <PageTitle>{routes[RouteKey.PROFILE].title}</PageTitle>;\n  if (loading || !data) {\n    return (\n      <Fragment>\n        {pageTitle}\n        <LinearIndeterminate />\n      </Fragment>\n    );\n  }\n\n  const { personProfile } = data;\n  return (\n    <Fragment>\n      {pageTitle}\n      <Box component='span' m={1}>\n        <pre>{JSON.stringify(personProfile, undefined, 2)}</pre>\n      </Box>\n    </Fragment>\n  );\n}","import React, { Fragment } from 'react';\nimport { Typography, Box } from '@material-ui/core';\nimport { PageTitle } from '../../components/material-ui/typography';\nimport { RouteKey, routes } from '../../app/config';\n\ninterface Props { }\n\nexport const UseCasesPage: React.FC<Props> = () => {\n  return (\n    <Fragment>\n      <PageTitle>{routes[RouteKey.USE_CASES].title}</PageTitle>\n      <Box component='span' m={1}>\n        <Typography paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras interdum ante quis augue tristique feugiat. Nam enim odio, ultrices id volutpat dapibus, lobortis a erat. Suspendisse tincidunt tristique ante sed imperdiet. Praesent eget faucibus elit, in facilisis leo. Proin porttitor, erat ac ultrices elementum, mauris ex suscipit erat, id tincidunt justo augue ac justo. Mauris gravida libero vel lacus rutrum, in sagittis tellus egestas. Morbi vulputate arcu nec egestas maximus. Cras pretium neque ac odio condimentum, at viverra sem egestas. Morbi a odio et lectus posuere ornare.\n      </Typography>\n      </Box>\n    </Fragment>\n  );\n}","import React, { Fragment } from 'react';\nimport { RouteKey, routes } from '../../app/config';\nimport { DynamicGraph } from '../../components/force-graph';\nimport { PageTitle } from '../../components/material-ui/typography';\n\ninterface Props { }\n\n// let renderCount = 0;\n\nexport const FeedPage: React.FC<Props> = () => {\n  // renderCount++;\n  // context state hook\n  return (\n    <Fragment>\n      {/* <PageTitle>{`${routes[RouteKey.GRAPH].title} : ${renderCount}`}</PageTitle> */}\n      <PageTitle>{routes[RouteKey.GRAPH].title}</PageTitle>\n      {/* extra margin, with this progress bar will not be pixel perfect */}\n      {/* <Box component='span' m={1}> */}\n        <DynamicGraph/>\n      {/* </Box> */}\n    </Fragment>\n  );\n}","import React, { Fragment } from 'react';\nimport { Typography, Box } from '@material-ui/core';\nimport { PageTitle } from '../../components/material-ui/typography';\nimport { RouteKey, routes } from '../../app/config';\n\ninterface Props { }\n\nexport const DashBoardPage: React.FC<Props> = () => {\n  return (\n    <Fragment>\n      <PageTitle>{routes[RouteKey.DASHBOARD].title}</PageTitle>\n      <Box component='span' m={1}>\n        <Typography paragraph>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras interdum ante quis augue tristique feugiat. Nam enim odio, ultrices id volutpat dapibus, lobortis a erat. Suspendisse tincidunt tristique ante sed imperdiet. Praesent eget faucibus elit, in facilisis leo. Proin porttitor, erat ac ultrices elementum, mauris ex suscipit erat, id tincidunt justo augue ac justo. Mauris gravida libero vel lacus rutrum, in sagittis tellus egestas. Morbi vulputate arcu nec egestas maximus. Cras pretium neque ac odio condimentum, at viverra sem egestas. Morbi a odio et lectus posuere ornare.\n      </Typography>\n      </Box>\n    </Fragment>\n  );\n}","import React, { Fragment } from 'react';\nimport { Typography, Box } from '@material-ui/core';\nimport { PageTitle } from '../../components/material-ui/typography';\nimport { RouteKey, routes } from '../../app/config';\n\ninterface Props { }\n\nexport const TimelinePage: React.FC<Props> = () => {\n  return (\n    <Fragment>\n      <PageTitle>{routes[RouteKey.TIMELINE].title}</PageTitle>\n      <Box component='span' m={1}>\n        <Typography paragraph>\n        Donec viverra dolor aliquam sapien eleifend, faucibus vulputate massa luctus. Phasellus non pharetra neque. Vestibulum consectetur vehicula iaculis. Fusce imperdiet risus quis ipsum fermentum, a viverra tortor blandit. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. \n      </Typography>\n      </Box>\n    </Fragment>\n  );\n}","import { Box } from '@material-ui/core';\nimport React, { Fragment } from 'react';\nimport { RouteKey, routes } from '../../app/config';\nimport { useStateValue } from '../../app/state';\nimport { AlertMessage, AlertSeverityType } from '../../components/material-ui/alert-message';\nimport { PageTitle } from '../../components/material-ui/typography';\n\ninterface Props { }\n\nexport const ResultPage: React.FC<Props> = () => {\n  // get hook\n  const [state] = useStateValue();\n\n  return (\n    <Fragment>\n      <PageTitle>{routes[RouteKey.RESULT_PAGE].title}</PageTitle>\n      <Box component='span' m={1}>\n        <AlertMessage severity={AlertSeverityType.SUCCESS} message={state.resultMessage} />\n      </Box>\n    </Fragment>\n  );\n}","import React, { Fragment } from 'react';\nimport { Typography, Box } from '@material-ui/core';\nimport { PageTitle } from '../../components/material-ui/typography';\nimport { routes, RouteKey } from '../../app/config';\n\ninterface Props { }\n\nexport const CommunityPage: React.FC<Props> = () => {\n  return (\n    <Fragment>\n      <PageTitle>{routes[RouteKey.COMMUNITY].title}</PageTitle>\n      <Box component='span' m={1}>\n        <Typography paragraph>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut elementum convallis vulputate. Phasellus consectetur, lectus\n          non volutpat hendrerit, tortor elit tincidunt ligula, vitae scelerisque lorem tellus laoreet quam. Nullam ultricies orci lorem,\n          non pharetra leo placerat non. Aenean egestas, dolor non convallis dapibus, neque odio mollis risus, vitae iaculis nunc sem ac dui.\n          Pellentesque lectus lorem, eleifend ut quam quis, varius pellentesque urna. Cras vel velit non quam tempus imperdiet. Ut et ante\n          nec elit feugiat faucibus id sagittis leo. Sed vitae scelerisque ipsum. Fusce scelerisque facilisis rutrum.\n        </Typography>\n      </Box>\n    </Fragment>\n  );\n}","type FormCommonOptions = {\n  mode: 'all' | 'onBlur' | 'onChange' | 'onSubmit' | 'onTouched'\n}\n\nexport const formCommonOptions: FormCommonOptions = {\n  // mode: 'onBlur',\n  // Validation will trigger on the blur and change events.\n  // required to work properly with arrays\n  mode: 'all',\n}\n","import { Button, Grid, IconButton, InputAdornment } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport VisibilityIconOff from '@material-ui/icons/VisibilityOff';\nimport React, { Fragment, MutableRefObject } from 'react';\nimport { ArrayField, Control, DeepMap, FieldError } from 'react-hook-form';\nimport { appConstants as c } from '..';\nimport { AutocompleteAndSelectOptions, CurrencyCode, EntityType, FormInputType, FormPropFields, GoodsBagItem } from '../../types';\nimport { commonControlProps, generateTextField, validationBarCodeExHelper, validationMessage, validationRuleRegExHelper } from '../../utils';\n\n// common formDefinition, to be shared in project, where are used in more than one place\n\n// Person\n\nexport const commonFormFieldFirstName = (inputRef: MutableRefObject<any>, formFieldName: string): FormPropFields => {\n  return {\n    inputRef,\n    type: FormInputType.TEXT,\n    name: formFieldName,\n    label: c.I18N.firstNameLabel,\n    placeholder: c.I18N.firstNamePlaceHolder,\n    helperText: c.I18N.firstNameHelperText,\n    fullWidth: true,\n    rules: validationRuleRegExHelper(formFieldName, c.REGEXP.name),\n    controlProps: commonControlProps,\n  }\n}\nexport const commonFormFieldLastName = (inputRef: MutableRefObject<any>, formFieldName: string): FormPropFields => {\n  return {\n    inputRef,\n    type: FormInputType.TEXT,\n    name: formFieldName,\n    label: c.I18N.lastNameLabel,\n    placeholder: c.I18N.lastNamePlaceHolder,\n    helperText: c.I18N.lastNameHelperText,\n    fullWidth: true,\n    rules: validationRuleRegExHelper(formFieldName, c.REGEXP.name),\n    controlProps: commonControlProps,\n  }\n}\n\nexport const commonFormFieldUsername = (inputRef: MutableRefObject<any>, formFieldName: string): FormPropFields => {\n  return {\n    inputRef,\n    type: FormInputType.TEXT,\n    name: formFieldName,\n    label: c.I18N.userNameLabel,\n    placeholder: c.I18N.userNamePlaceholder,\n    helperText: c.I18N.userNameHelperText,\n    fullWidth: true,\n    rules: validationRuleRegExHelper(formFieldName, c.REGEXP.name),\n    controlProps: commonControlProps,\n  }\n}\n\nexport const commonFormFieldPassword = (inputRef: MutableRefObject<any>, formFieldName: string, showPassword: boolean, handlePasswordVisibility: () => void): FormPropFields => {\n  return {\n    inputRef,\n    type: (showPassword) ? FormInputType.TEXT : FormInputType.PASSWORD,\n    name: formFieldName,\n    label: c.I18N.passWordLabel,\n    placeholder: c.I18N.passWordPlaceholder,\n    helperText: c.I18N.passWordHelperText,\n    fullWidth: true,\n    rules: validationRuleRegExHelper(formFieldName, c.REGEXP.password),\n    controlProps: {\n      ...commonControlProps,\n      // must be capitalized\n      InputProps: {\n        endAdornment: (\n          <InputAdornment position='end'>\n            <IconButton\n              aria-label='toggle password visibility'\n              onClick={handlePasswordVisibility}\n            >\n              {showPassword ? <VisibilityIcon /> : <VisibilityIconOff />}\n            </IconButton>\n          </InputAdornment>\n        )\n      },\n    },\n  }\n}\n\nexport const commonFormFieldPasswordConfirmation = (inputRef: MutableRefObject<any>, formFieldName: string, showPassword: boolean, validate: () => boolean): FormPropFields => {\n  return {\n    inputRef,\n    type: (showPassword) ? FormInputType.TEXT : FormInputType.PASSWORD,\n    name: formFieldName,\n    label: c.I18N.passWordConfirmationLabel,\n    placeholder: c.I18N.passWordConfirmationPlaceholder,\n    helperText: c.I18N.passWordConfirmationHelperText,\n    fullWidth: true,\n    rules: {\n      ...validationRuleRegExHelper(formFieldName, c.REGEXP.password),\n      validate: () => validate()\n    },\n    controlProps: commonControlProps,\n  }\n}\n\nexport const commonFormFieldFiscalNumber = (inputRef: MutableRefObject<any>, formFieldName: string, validate: () => boolean): FormPropFields => {\n  return {\n    inputRef,\n    type: FormInputType.TEXT,\n    name: formFieldName,\n    label: c.I18N.fiscalNumberLabel,\n    placeholder: c.I18N.fiscalNumberPlaceHolder,\n    fullWidth: true,\n    // rules: validationRuleRegExHelper(formFieldName, c.REGEXP.fiscalNumber),\n    rules: {\n      validate: () => validate()\n        ? true\n        : validationMessage('required', formFieldName)\n    },    \n    controlProps: commonControlProps,\n  }\n}\n\nexport const commonFormFieldMobilePhone = (inputRef: MutableRefObject<any>, formFieldName: string): FormPropFields => {\n  return {\n    inputRef,\n    type: FormInputType.TEXT,\n    name: formFieldName,\n    label: c.I18N.mobilePhoneLabel,\n    placeholder: c.I18N.mobilePhonePlaceHolder,\n    fullWidth: true,\n    rules: validationRuleRegExHelper(formFieldName, c.REGEXP.mobilePhone),\n    controlProps: commonControlProps,\n  }\n}\n\nexport const commonFormFieldEmail = (inputRef: MutableRefObject<any>, formFieldName: string): FormPropFields => {\n  return {\n    inputRef,\n    type: FormInputType.EMAIL,\n    name: formFieldName,\n    label: c.I18N.emailLabel,\n    placeholder: c.I18N.emailPlaceHolder,\n    fullWidth: true,\n    rules: validationRuleRegExHelper(formFieldName, c.REGEXP.email),\n    controlProps: commonControlProps,\n  }\n}\n\n// asset\n\nexport const commonFormFieldAssetType = (inputRef: MutableRefObject<any>, formFieldName: string, validate: () => boolean): FormPropFields => {\n  return {\n    inputRef,\n    type: FormInputType.SELECT,\n    name: formFieldName,\n    label: c.I18N.assetTypeLabel,\n    controlProps: commonControlProps,\n    fullWidth: true,\n    rules: {\n      validate: () => validate()\n        ? true\n        : validationMessage('required', formFieldName)\n    },\n    options: () => c.ASSET_TYPE_OPTIONS,\n  }\n}\n\nexport const commonFormFieldAssetName = (inputRef: MutableRefObject<any>, formFieldName: string): FormPropFields => {\n  return {\n    inputRef,\n    type: FormInputType.TEXT,\n    name: formFieldName,\n    label: c.I18N.assetLabel,\n    controlProps: commonControlProps,\n    fullWidth: true,\n    placeholder: c.I18N.assetPlaceHolder,\n    rules: validationRuleRegExHelper(formFieldName, c.REGEXP.name),\n  }\n}\n\n// cause\n\nexport const commonFormFieldCauseName = (inputRef: MutableRefObject<any>, formFieldName: string): FormPropFields => {\n  return {\n    inputRef,\n    type: FormInputType.TEXT,\n    name: formFieldName,\n    label: c.I18N.causeLabel,\n    controlProps: commonControlProps,\n    fullWidth: true,\n    placeholder: c.I18N.causePlaceHolder,\n    rules: validationRuleRegExHelper(formFieldName, c.REGEXP.name),\n  }\n}\n\nexport const commonFormFieldAssetOwner = (inputRef: MutableRefObject<any>, formFieldName: string, validate: () => boolean): FormPropFields => {\n  return {\n    inputRef,\n    type: FormInputType.TEXT,\n    name: formFieldName,\n    label: c.I18N.ownerLabel,\n    controlProps: commonControlProps,\n    fullWidth: true,\n    placeholder: c.I18N.ownerPlaceholder,\n    helperText: c.I18N.ownerHelperText,\n    rules: {\n      // validate both regex uuid, fiscalNumber and mobilePhone\n      validate: () => validate()\n        ? true\n        : validationMessage('required', formFieldName)\n    },\n  }\n}\n\n// simplified version to work in cause\nexport const commonFormFieldPersonNdParticipantInputTypeEntity = (inputRef: MutableRefObject<any>, formFieldName: string, validate: () => boolean): FormPropFields => {\n  return {\n    inputRef,\n    type: FormInputType.SELECT,\n    name: formFieldName,\n    label: c.I18N.inputTypeLabel,\n    controlProps: commonControlProps,\n    fullWidth: true,\n    disabled: false,\n    options: () => c.PARTICIPANT_PERSON_ENTITY_TYPE_OPTIONS,\n    rules: {\n      validate: () => validate()\n        ? true\n        : validationMessage('required', formFieldName)\n    },\n  }\n}\n\n// simplified version to work in cause\nexport const commonFormFieldCauseInputEntity = (inputRef: MutableRefObject<any>, formFieldName: string, validate: () => boolean): FormPropFields => {\n  return {\n    inputRef,\n    type: FormInputType.TEXT,\n    name: formFieldName,\n    label: c.I18N.inputLabel,\n    controlProps: commonControlProps,\n    fullWidth: true,\n    placeholder: c.I18N.inputPlaceholder,\n    helperText: c.I18N.inputHelperText,\n    disabled: false,\n    rules: {\n      validate: () => validate()\n        ? true\n        : validationMessage('required', formFieldName)\n    },\n  }\n}\n\n\n// shared\n\nexport const commonFormFieldCode = (inputRef: MutableRefObject<any>, formFieldName: string): FormPropFields => {\n  return {\n    inputRef,\n    type: FormInputType.TEXT,\n    name: formFieldName,\n    label: c.I18N.codeLabel,\n    controlProps: commonControlProps,\n    fullWidth: true,\n    placeholder: c.I18N.codePlaceHolder,\n    rules: validationRuleRegExHelper(formFieldName, c.REGEXP.alphaNumeric),\n  }\n}\n\nexport const commonFormFieldLocation = (inputRef: MutableRefObject<any>, formFieldName: string): FormPropFields => {\n  return {\n    inputRef,\n    type: FormInputType.TEXT,\n    name: formFieldName,\n    label: c.I18N.locationLabel,\n    controlProps: commonControlProps,\n    fullWidth: true,\n    placeholder: c.I18N.locationPlaceHolder,\n    rules: validationRuleRegExHelper(formFieldName, c.REGEXP.location, false),\n  }\n}\n\nexport const commonFormFieldAmbassadors = (inputRef: MutableRefObject<any>, formFieldName: string, validate: () => boolean | string): FormPropFields => {\n  return {\n    inputRef,\n    type: FormInputType.TEXT,\n    name: formFieldName,\n    label: c.I18N.ambassadorsLabel,\n    controlProps: commonControlProps,\n    fullWidth: true,\n    placeholder: c.I18N.ambassadorsPlaceHolder,\n    helperText: c.I18N.ambassadorsHelperText,\n    rules: {\n      validate: () => validate()\n    },\n  }\n}\n\nexport const commonFormFieldMetadata = (inputRef: MutableRefObject<any>, formFieldName: string, validate: () => boolean): FormPropFields => {\n  return {\n    inputRef,\n    type: FormInputType.TEXT,\n    name: formFieldName,\n    label: c.I18N.metaDataLabel,\n    controlProps: commonControlProps,\n    fullWidth: true,\n    placeholder: c.I18N.metaDataPlaceHolder,\n    rules: {\n      validate: () => validate()\n        ? true\n        : validationMessage('invalid', formFieldName)\n    },\n  }\n}\n\nexport const commonFormFieldMetadataInternal = (inputRef: MutableRefObject<any>, formFieldName: string, validate: () => boolean): FormPropFields => {\n  return {\n    ...commonFormFieldMetadata(inputRef, formFieldName, validate),\n    inputRef,\n    name: formFieldName,\n    label: c.I18N.metaDataInternalLabel,\n    placeholder: c.I18N.metaDataPlaceHolder,\n  }\n}\n\nexport const commonFormFieldStartDate = (inputRef: MutableRefObject<any>, formFieldName: string): FormPropFields => {\n  return {\n    inputRef,\n    type: FormInputType.DATE,\n    name: formFieldName,\n    label: c.I18N.startDateLabel,\n    controlProps: commonControlProps,\n    fullWidth: true,\n    placeholder: c.I18N.datePlaceHolder,\n    rules: validationRuleRegExHelper(formFieldName, c.REGEXP.date),\n  }\n}\n\nexport const commonFormFieldEndDate = (inputRef: MutableRefObject<any>, formFieldName: string): FormPropFields => {\n  return {\n    ...commonFormFieldStartDate(inputRef, formFieldName),\n    inputRef,\n    name: formFieldName,\n    label: c.I18N.endDateLabel,\n    placeholder: c.I18N.endPlaceHolder,\n  }\n}\n\n// TODO deprecated now re-use output\n// export const commonFormFieldInputTypeEntity = (inputRef: MutableRefObject<any>, formFieldName: string, validate: () => boolean): FormPropFields => {\n//   return {\n//     inputRef,\n//     type: FormInputType.SELECT,\n//     name: formFieldName,\n//     label: c.I18N.inputTypeLabel,\n//     controlProps: commonControlProps,\n//     fullWidth: true,\n//     disabled: false,\n//     options: () => c.PARTICIPANT_PERSON_ENTITY_TYPE_OPTIONS,\n//     rules: {\n//       validate: () => validate()\n//         ? true\n//         : validationMessage('required', formFieldName)\n//     },\n//   }\n// }\n\n// export const commonFormFieldInputEntity = (inputRef: MutableRefObject<any>, formFieldName: string, validate: () => boolean): FormPropFields => {\n//   return {\n//     inputRef,\n//     type: FormInputType.TEXT,\n//     name: formFieldName,\n//     label: c.I18N.inputLabel,\n//     controlProps: commonControlProps,\n//     fullWidth: true,\n//     placeholder: c.I18N.inputPlaceholder,\n//     helperText: c.I18N.inputHelperText,\n//     disabled: false,\n//     rules: {\n//       validate: () => validate()\n//         ? true\n//         : validationMessage('required', formFieldName)\n//     },\n//   }\n// }\n\n// TODO refactor to commonInputOutput, remove label, required in arg\nexport const commonFormFieldOutputTypeEntity = (inputRef: MutableRefObject<any>, formFieldName: string, validate: () => boolean): FormPropFields => {\n  return {\n    inputRef,\n    type: FormInputType.SELECT,\n    name: formFieldName,\n    label: c.I18N.outputTypeLabel,\n    controlProps: commonControlProps,\n    fullWidth: true,\n    rules: {\n      validate: () => validate()\n        ? true\n        : validationMessage('required', formFieldName)\n    },\n    options: () => c.ENTITY_TYPE_OPTIONS,\n  }\n}\n\n// TODO refactor to commonInputOutput, remove label, required in arg\n// render a selection or input based on currentEntityType\n// validate is only used in text input, optional for selection\nexport const commonFormFieldOutputEntity = (inputRef: MutableRefObject<any>, formFieldName: string, currentEntityType: EntityType, options: () => AutocompleteAndSelectOptions[], visible: () => boolean, validate?: () => boolean): FormPropFields => {\n  return (currentEntityType === EntityType.cause)\n    ? {\n      inputRef,\n      type: FormInputType.SELECT,\n      name: formFieldName,\n      label: c.I18N.outputLabel,\n      controlProps: commonControlProps,\n      fullWidth: true,\n      rules: validationRuleRegExHelper(formFieldName, c.REGEXP.uuid),\n      // args\n      options,\n      visible,\n    }\n    : {\n      inputRef,\n      type: FormInputType.TEXT,\n      name: formFieldName,\n      label: c.I18N.outputLabel,\n      controlProps: commonControlProps,\n      fullWidth: true,\n      placeholder: c.I18N.outputPlaceholder,\n      helperText: c.I18N.outputHelperText,\n      rules: {\n        validate: () => validate()\n          ? true\n          : validationMessage('required', formFieldName)\n      },\n      visible,\n    }\n}\n\n// export const commonFormFieldInputTypeEntity = (inputRef: MutableRefObject<any>, formFieldName: string, validate: () => boolean): FormPropFields => {\n//   return {\n//     ...commonFormFieldOutputTypeEntity(inputRef, formFieldName, validate),\n//     label: c.I18N.inputTypeLabel,\n//   }\n// }\n\n// export const commonFormFieldInputEntity = (inputRef: MutableRefObject<any>, formFieldName: string, currentEntityType: EntityType, options: () => AutocompleteAndSelectOptions[], visible: () => boolean, validate?: () => boolean): FormPropFields => {\n//   return {\n//     ...commonFormFieldOutputEntity(inputRef, formFieldName, currentEntityType, disabled, options, visible),\n//     label: c.I18N.inputLabel,\n//   }\n// }\n\nexport const commonFormFieldTags = (inputRef: MutableRefObject<any>, formFieldName: string, validate: () => boolean): FormPropFields => {\n  return {\n    inputRef,\n    type: FormInputType.AUTOCOMPLETE,\n    name: formFieldName,\n    label: c.I18N.tagsLabel,\n    controlProps: commonControlProps,\n    fullWidth: true,\n    placeholder: c.I18N.tagsLabel,\n    helperText: c.I18N.tagsPlaceHolder,\n    rules: {\n      validate: () => validate()\n        ? true\n        : validationMessage('invalid', formFieldName)\n    },\n    options: () => c.TAGS_OPTIONS,\n    multipleOptions: true,\n    addToAutocomplete: true,\n  }\n}\n\n// transaction\n\nexport const commonFormFieldAssetId = (inputRef: MutableRefObject<any>, formFieldName: string, visible: () => boolean): FormPropFields => {\n  return {\n    inputRef,\n    type: FormInputType.TEXT,\n    name: formFieldName,\n    label: c.I18N.assetIdLabel,\n    controlProps: commonControlProps,\n    fullWidth: true,\n    placeholder: c.I18N.assetIdPlaceholder,\n    helperText: c.I18N.assetIdHelperText,\n    rules: validationRuleRegExHelper(formFieldName, c.REGEXP.uuid),\n    disabled: false,\n    // args\n    visible,\n  }\n}\n\nexport const commonFormFieldQuantity = (inputRef: MutableRefObject<any>, formFieldName: string, visible: () => boolean): FormPropFields => {\n  return {\n    inputRef,\n    type: FormInputType.NUMBER,\n    name: formFieldName,\n    label: c.I18N.quantityLabel,\n    controlProps: commonControlProps,\n    fullWidth: true,\n    placeholder: c.I18N.quantityPlaceHolder,\n    rules: validationRuleRegExHelper(formFieldName, c.REGEXP.floatPositive),\n    // args\n    visible,\n  }\n}\n\nexport const commonFormFieldCurrency = (inputRef: MutableRefObject<any>, formFieldName: string, validate: () => boolean, visible: () => boolean): FormPropFields => {\n  return {\n    inputRef,\n    type: FormInputType.SELECT,\n    name: formFieldName,\n    controlProps: commonControlProps,\n    fullWidth: true,\n    label: c.I18N.currencyLabel,\n    rules: {\n      validate: () => validate()\n        ? true\n        : validationMessage('required', formFieldName)\n    },\n    options: () => [\n      { title: c.I18N.currencyCodeEur, value: CurrencyCode.eur },\n      { title: c.I18N.currencyCodeUsd, value: CurrencyCode.usd },\n    ],\n    visible,\n  }\n}\n\nexport const commonFormFieldGoodsBagInput = (inputRef: MutableRefObject<any>, formFieldName: string, custom: JSX.Element, visible?: () => boolean): FormPropFields => {\n  return {\n    inputRef,\n    type: FormInputType.CUSTOM,\n    name: formFieldName,\n    label: 'Goods bag',\n    controlProps: commonControlProps,\n    fullWidth: true,\n    placeholder: 'Goods placeHolder',\n    // custom\n    custom,\n    // args\n    visible\n  }\n}\n\nexport const commonFormFieldGoodsBagEan = (disabled: boolean): FormPropFields => {\n  return {\n    // inputRef: refs // will be initialized in fieldsMap\n    type: FormInputType.TEXT,\n    name: null,\n    label: c.I18N.barCodeEan13Label,\n    controlProps: commonControlProps,\n    fullWidth: true,\n    placeholder: c.I18N.barCodeEan13PlaceHolder,\n    helperText: c.I18N.barCodeEan13HelperText,\n    // args\n    disabled,\n  }\n}\n\nexport const commonFormFieldGoodsBagQuantity = (disabled: boolean): FormPropFields => {\n  return {\n    // inputRef: refs // will be initialized in fieldsMap\n    name: null,\n    type: FormInputType.TEXT,\n    label: c.I18N.quantityLabel,\n    controlProps: commonControlProps,\n    fullWidth: true,\n    placeholder: c.I18N.quantityPlaceHolder,\n    // args\n    disabled,\n  }\n}\n\n/**\n * this will render jsx and not a common FormPropFields \n * @param disabled \n */\nexport const commonFormFieldGoodsBag = (\n  // FormFieldNames.GOODS_BAG was replaced with formFieldName\n  formFieldName: string,\n  // useStyles\n  classes: any,\n  // useForm,\n  control: Control<any>,\n  errors: DeepMap<any, FieldError>,\n  // useFieldArray\n  remove: (index?: number | number[]) => void,\n  append: (value: Partial<Record<string, any>> | Partial<Record<string, any>>[], shouldFocus?: boolean) => void,\n  handleIncreaseDecreaseGood: (goodsBagArg: Array<GoodsBagItem>, index: number, value: number) => void,\n  // other\n  loading: boolean,\n  fields: Partial<ArrayField<Record<string, any>>>,\n  goodsBag: any[],\n  goodsBagEan: FormPropFields,\n  goodsBagQuantity: FormPropFields,\n  goodsBagEanInputRef: any[],\n  goodsBagQuantityInputRef: any[],\n  causeOptionsLoaded: boolean,\n  maxGoodsItems: number,\n): JSX.Element => {\n  // required a key `key='goods'`, this belongs to the loop of form components, without it we have errors\n  return (<Fragment key='goods'>\n    {fields.map((item: any, index: number) => {\n      return (\n        <Grid key={item.id} container spacing={3}>\n          <Grid item xs>\n            {generateTextField({\n              ...goodsBagEan,\n              inputRef: goodsBagEanInputRef[index],\n              name: `goodsBag[${index}].barCode`,\n              defaultValue: item.barCode,\n              rules: validationBarCodeExHelper(`goodsBag[${index}].barCode`, goodsBag[index]),\n              helperTextFn: () => errors[formFieldName] && errors[formFieldName][index] && errors[formFieldName][index].barCode !== undefined\n                ? errors[formFieldName][index].barCode.message\n                : goodsBagEan.helperText,\n              errorFn: () => errors[formFieldName] && errors[formFieldName][index] && errors[formFieldName][index].barCode !== undefined,\n              onFocusFn: () => goodsBagEanInputRef[index].current.focus()\n            }, control, errors, loading)}\n          </Grid>\n          <Grid item xs={3}>\n            {generateTextField({\n              ...goodsBagQuantity,\n              inputRef: goodsBagQuantityInputRef[index],\n              name: `goodsBag[${index}].quantity`,\n              defaultValue: item.quantity,\n              rules: validationRuleRegExHelper(`goodsBag[${index}].quantity`, c.REGEXP.integerPositiveNonZero),\n              helperTextFn: () => errors[formFieldName] && errors[formFieldName][index] && errors[formFieldName][index].quantity !== undefined\n                ? errors[formFieldName][index].quantity.message\n                : '',\n              errorFn: () => errors[formFieldName] && errors[formFieldName][index] && errors[formFieldName][index].quantity !== undefined,\n              onFocusFn: () => goodsBagQuantityInputRef[index].current.focus(),\n            }, control, errors, loading)}\n          </Grid>\n          {/* the trick is using auto in buttons */}\n          <Grid item xs='auto'>\n            <IconButton\n              className={classes.buttonGoodsActions}\n              aria-label={c.I18N.decrease}\n              disabled={loading || (goodsBag[index] && goodsBag[index].quantity <= 1)}\n              onClick={() => handleIncreaseDecreaseGood(goodsBag, index, -1)}\n              size='small'\n            >\n              <RemoveIcon />\n            </IconButton>\n            <IconButton\n              className={classes.buttonGoodsActions}\n              aria-label={c.I18N.increase}\n              disabled={loading}\n              onClick={() => handleIncreaseDecreaseGood(goodsBag, index, 1)}\n              size='small'\n            >\n              <AddIcon />\n            </IconButton>\n            <IconButton\n              className={classes.buttonGoodsActions}\n              aria-label={c.I18N.delete}\n              disabled={loading || index === 0}\n              onClick={() => remove(index)}\n              size='small'\n            >\n              <DeleteIcon />\n            </IconButton>\n          </Grid>\n        </Grid>\n      );\n    })}\n    <Button\n      type='button'\n      variant='contained'\n      className={classes.buttonGoodsAdd}\n      disabled={loading || !causeOptionsLoaded || fields.length === maxGoodsItems}\n      onClick={() => append({ barCode: '', quantity: 1 })}\n    >\n      {c.I18N.add}\n    </Button>\n  </Fragment>)\n}\n","// { nodes: [{ id: 0, label: 'genesis', nodeVal: randomWidth(), group: 'GENESIS' }], links: [] }\n\n// TODO arrow with metadata\n// https://colorswall.com/palette/102/\n//    red #ff0000\trgb(255, 0, 0)\n// orange #ffa500\trgb(255, 165, 0)\n// yellow #ffff00\trgb(255, 255, 0)\n//  green #008000\trgb(0, 128, 0)\n//   blue #0000ff\trgb(0, 0, 255)\n// purple #4b0082\trgb(75, 0, 130)\n//   pink #ee82ee\trgb(238, 130, 238)\n\nimport { IState, NodeColor, NodeType, TransactionType } from \"../../components/force-graph\";\n\nconst genesisNodeValue = 1;\nconst participantsNodeValue = 5;\nconst personNodeValue = 10;\nconst causeNodeValue = 15;\nconst assetNodeValue = 20;\nconst transactionNodeValue = 25;\n\nexport const graphData: IState = {\n  nodes: [\n    { id: '0', group: NodeType.GENESIS, nodeVal: genesisNodeValue, color: NodeColor.WHITE, label: 'Genesis Node' },\n    // connected directly to genesis\n    { id: '1', group: NodeType.PARTICIPANT, nodeVal: participantsNodeValue, color: NodeColor.BLUE, label: 'World Food program' },\n    { id: '2', group: NodeType.PERSON, nodeVal: personNodeValue, color: NodeColor.PINK, label: 'John Doe' },\n    { id: '3', group: NodeType.PERSON, nodeVal: personNodeValue, color: NodeColor.PINK, label: 'jane Dow' },\n    // connected to entities person and participants\n    { id: '4', group: NodeType.CAUSE, nodeVal: causeNodeValue, label: 'World food program cause' },\n    { id: '5', group: NodeType.ASSET, nodeVal: assetNodeValue, label: 'Wheel chair' },\n    // transaction\n    { id: '6', group: NodeType.TRANSACTION, nodeVal: transactionNodeValue, label: 'Transaction' },\n    { id: '7', group: NodeType.TRANSACTION, nodeVal: transactionNodeValue, label: 'Transaction' },\n  ],\n  links: [\n    { source: '1', target: '0', label: 'HAS_BORN', group: TransactionType.FUNDS },\n    { source: '2', target: '0', label: 'HAS_BORN', group: TransactionType.FUNDS },\n    { source: '3', target: '0', label: 'HAS_BORN', group: TransactionType.FUNDS },\n    // cause\n    { source: '1', target: '4', label: 'CREATED_CAUSE' },\n    // input person transactions to\n    { source: '2', target: '6', label: 'TRANSACTION_TO', linkWidth: 1 },\n    { source: '3', target: '7', label: 'TRANSACTION_TO', linkWidth: 3 },\n    // output transactions to\n    { source: '6', target: '4', label: 'TRANSACTION_FROM', linkWidth: 1 },\n    { source: '7', target: '4', label: 'TRANSACTION_FROM', linkWidth: 3 },\n  ],\n};\n","import AppBar from '@material-ui/core/AppBar';\nimport Divider from '@material-ui/core/Divider';\nimport Drawer from '@material-ui/core/Drawer';\nimport Hidden from '@material-ui/core/Hidden';\nimport IconButton from '@material-ui/core/IconButton';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Menu from '@material-ui/core/Menu';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport { createStyles, makeStyles, Theme, useTheme } from '@material-ui/core/styles';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport AccountCircle from '@material-ui/icons/AccountCircle';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport MoreIcon from '@material-ui/icons/MoreVert';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Link, Route, Switch, useLocation } from 'react-router-dom';\nimport useDimensions from 'react-use-dimensions';\nimport { appConstants as c, setAccessToken } from '../../../app';\nimport { defaultDrawerListItemIcon, RouteKey, routes } from '../../../app/config';\nimport { ActionType, useStateValue } from '../../../app/state';\nimport { usePersonLogoutMutation } from '../../../generated/graphql';\nimport { DrawerListItem, DrawerSections, RouteItem } from '../../../types';\nimport { recordToArray } from '../../../utils';\n\ninterface ResponsiveDrawerProps {\n  title: string;\n  categories: DrawerListItem[];\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n    },\n    drawer: {\n      [theme.breakpoints.up('sm')]: {\n        width: c.DRAWER_WIDTH,\n        flexShrink: 0,\n      },\n    },\n    appBar: {\n      marginLeft: c.DRAWER_WIDTH,\n      [theme.breakpoints.up('sm')]: {\n        width: `calc(100% - ${c.DRAWER_WIDTH}px)`,\n      },\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n      [theme.breakpoints.up('sm')]: {\n        display: 'none',\n      },\n    },\n    toolbar: theme.mixins.toolbar,\n    drawerPaper: {\n      width: c.DRAWER_WIDTH,\n    },\n    content: {\n      flexGrow: 1,\n      padding: theme.spacing(3),\n    },\n    // drawer menus\n    grow: {\n      flexGrow: 1,\n    },\n    sectionDesktop: {\n      display: 'none',\n      [theme.breakpoints.up('md')]: {\n        display: 'flex',\n      },\n    },\n    sectionMobile: {\n      display: 'flex',\n      [theme.breakpoints.up('md')]: {\n        display: 'none',\n      },\n    },\n  }),\n);\n\nexport const ResponsiveDrawer = (props: ResponsiveDrawerProps) => {\n  // hooks: theme and style\n  const classes = useStyles();\n  const theme = useTheme();\n  // hooks apollo\n  // access apollo client to clear cache store on logout\n  const [logout, { client }] = usePersonLogoutMutation();\n  // hooks: drawer\n  const [mobileOpen, setMobileOpen] = useState(false);\n  // menu and mobileMenu\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [mobileMoreAnchorEl, setMobileMoreAnchorEl] = React.useState(null);\n  const isMenuOpen = Boolean(anchorEl);\n  const isMobileMenuOpen = Boolean(mobileMoreAnchorEl);\n  // hooks useDimension\n  const [appBarRef, { width }] = useDimensions();\n  const location = useLocation();\n  // context state hook\n  // eslint-disable-next-line\n  const [state, dispatch] = useStateValue();\n  const [logoutDisabled, setLogoutDisabled] = useState(false);\n  // useCallback for optimization, could be omitted if child components don’t rely on shallow comparing.\n  const setWidth = useCallback((width) => dispatch({ type: ActionType.SET_SHELL_WIDTH, payload: { width } }), [dispatch]);\n  const { title, categories } = props;\n  const drawerSections: DrawerListItem[][] = [];\n\n  useEffect(() => {\n    // TODO: put in constants in both places\n    const margin = 48;\n    if (!isNaN(width)) {\n      const shellWidth: number = Math.trunc(mobileOpen ? width - c.DRAWER_WIDTH - margin : width - margin);\n      setWidth(shellWidth);\n    }\n    // cleanup\n    return () => { };\n  }, [mobileOpen, width, setWidth])\n\n  // handlers\n  const handleDrawerToggle = () => {\n    setMobileOpen(!mobileOpen);\n  };\n  const handleClickListItem = () => {\n    // only false if open, never happens in non mobile\n    if (mobileOpen) {\n      setMobileOpen(false);\n    }\n  };\n\n  // menu and mobileMenu handlers\n  const handleProfileMenuOpen = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleMobileMenuClose = () => {\n    setMobileMoreAnchorEl(null);\n  };\n  const handleMenuClose = () => {\n    setAnchorEl(null);\n    handleMobileMenuClose();\n  };\n  const handleMobileMenuOpen = (event: React.MouseEvent<HTMLElement, MouseEvent>) => {\n    setMobileMoreAnchorEl(event.currentTarget);\n  };\n  const handleMenuSignOut = async () => {\n    // disable button\n    setLogoutDisabled(true);\n    // fire logoutMutation\n    await logout();\n    // clear/reset apollo cache store\n    // to prevent problems resetStore, like in the past don't use asyn/await, and use .then\n    // with setAccessToken and dispatch inisde\n    client.resetStore()\n      .then((value) => {\n        // clean inMemory accessToken\n        setAccessToken('');\n        // dispatch logout\n        dispatch({ type: ActionType.SIGNED_OUT_USER });\n      })\n      .catch(error => {\n        console.error(error);\n      })\n      .finally(() => {\n        // dispatch logout\n        dispatch({ type: ActionType.SIGNED_OUT_USER });\n      });\n  };\n\n  // menu definition\n  const menuId = 'primary-search-account-menu';\n  const renderMenu = (\n    <Menu\n      anchorEl={anchorEl}\n      anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n      id={menuId}\n      keepMounted\n      transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n      open={isMenuOpen}\n      onClose={handleMenuClose}\n    >\n      {/* <MenuItem onClick={handleMenuClose}>Profile</MenuItem> */}\n      <MenuItem component={Link} to={routes[RouteKey.PROFILE].path}>Profile</MenuItem>\n      {state.user.logged && (<MenuItem onClick={handleMenuSignOut} disabled={logoutDisabled}>Sign out</MenuItem>)}\n      {/* show loading when we logout */}\n      {/* TODO {logoutDisabled && <Loading />} */}\n    </Menu>\n  );\n\n  // mobileMenu definition\n  const mobileMenuId = 'primary-search-account-menu-mobile';\n  const renderMobileMenu = (\n    <Menu\n      anchorEl={mobileMoreAnchorEl}\n      anchorOrigin={{ vertical: 'top', horizontal: 'right' }}\n      id={mobileMenuId}\n      keepMounted\n      transformOrigin={{ vertical: 'top', horizontal: 'right' }}\n      open={isMobileMenuOpen}\n      onClose={handleMobileMenuClose}\n    >\n      {/* <MenuItem>\n        <IconButton aria-label=\"show 4 new mails\" color=\"inherit\">\n          <Badge badgeContent={4} color=\"secondary\">\n            <MailIcon />\n          </Badge>\n        </IconButton>\n        <p>Messages</p>\n      </MenuItem>\n      <MenuItem>\n        <IconButton aria-label=\"show 11 new notifications\" color=\"inherit\">\n          <Badge badgeContent={11} color=\"secondary\">\n            <NotificationsIcon />\n          </Badge>\n        </IconButton>\n        <p>Notifications</p>\n      </MenuItem> */}\n      <MenuItem onClick={handleProfileMenuOpen}>\n        <IconButton\n          aria-label=\"account of current user\"\n          aria-controls=\"primary-search-account-menu\"\n          aria-haspopup=\"true\"\n          color=\"inherit\"\n        >\n          <AccountCircle />\n        </IconButton>\n        <p>Session</p>\n      </MenuItem>\n    </Menu>\n  );\n\n  // loop DrawerSections enum, and extract sections from categories\n  Object.values(DrawerSections).forEach(e => {\n    const cats: DrawerListItem[] = categories.filter(c => c.section && c.section === e);\n    drawerSections.push(cats);\n  });\n  // special array to add React.Components, and populate listItems splitted with section dividers\n  const listItems: JSX.Element[] = Array<JSX.Element>();\n  // start with divider\n  listItems.push(<Divider key={DrawerSections.SECTION0} />);\n  // get current section from first section item\n  let currentSection: DrawerSections | undefined = drawerSections[0][0].section;\n  drawerSections.forEach((section, sectionIndex) => {\n    // check if currentSection changed: IF CRASH here is because we loop a section without items, check if all sections has one item minimum\n    if (currentSection !== section[0].section) {\n      currentSection = section[0].section;\n      listItems.push(<Divider key={sectionIndex} />);\n    }\n    // loop section categories\n    section.forEach(category => {\n      const icon: JSX.Element = (category.icon) ? category.icon : defaultDrawerListItemIcon;\n      if (category.visible !== false) {\n        listItems.push(\n          <ListItem button key={category.path} component={Link} to={category.path} selected={location.pathname === category.path} onClick={handleClickListItem}>\n            <ListItemIcon>{icon}</ListItemIcon>\n            <ListItemText primary={category.label} />\n          </ListItem>\n        );\n      }\n    });\n  });\n  // compose final drawer\n  const drawer = (\n    <div>\n      <div className={classes.toolbar} />\n      {listItems}\n    </div>\n  );\n\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"fixed\" className={classes.appBar} ref={appBarRef}>\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            edge=\"start\"\n            onClick={handleDrawerToggle}\n            className={classes.menuButton}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" noWrap>\n            {title}\n          </Typography>\n          <div className={classes.grow} />\n          <div className={classes.sectionDesktop}>\n            {/* <IconButton aria-label=\"show 4 new mails\" color=\"inherit\">\n              <Badge badgeContent={4} color=\"secondary\">\n                <MailIcon />\n              </Badge>\n            </IconButton>\n            <IconButton aria-label=\"show 17 new notifications\" color=\"inherit\">\n              <Badge badgeContent={17} color=\"secondary\">\n                <NotificationsIcon />\n              </Badge>\n            </IconButton> */}\n            <IconButton\n              edge=\"end\"\n              aria-label=\"account of current user\"\n              aria-controls={menuId}\n              aria-haspopup=\"true\"\n              onClick={handleProfileMenuOpen}\n              color=\"inherit\"\n            >\n              <AccountCircle />\n            </IconButton>\n          </div>\n          <div className={classes.sectionMobile}>\n            <IconButton\n              aria-label=\"show more\"\n              aria-controls={mobileMenuId}\n              aria-haspopup=\"true\"\n              onClick={handleMobileMenuOpen}\n              color=\"inherit\"\n            >\n              <MoreIcon />\n            </IconButton>\n          </div>\n        </Toolbar>\n      </AppBar>\n      {renderMobileMenu}\n      {renderMenu}\n      <nav className={classes.drawer} aria-label=\"mailbox folders\">\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\n        <Hidden smUp implementation=\"css\">\n          <Drawer\n            container={null}\n            variant=\"temporary\"\n            anchor={theme.direction === 'rtl' ? 'right' : 'left'}\n            open={mobileOpen}\n            onClose={handleDrawerToggle}\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            ModalProps={{\n              // Better open performance on mobile.\n              keepMounted: true,\n            }}\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n        <Hidden xsDown implementation=\"css\">\n          <Drawer\n            classes={{\n              paper: classes.drawerPaper,\n            }}\n            variant=\"permanent\"\n            open\n          >\n            {drawer}\n          </Drawer>\n        </Hidden>\n      </nav>\n      <main className={classes.content}>\n        <div className={classes.toolbar} />\n        <Switch>\n          {/* convert record to array, and create routes */}\n          {recordToArray<RouteItem>(routes).map((route, i) => (\n            <Route key={route.path} exact={route.exact} path={route.path} component={route.component} />\n          ))}\n        </Switch>\n      </main>\n    </div>\n  );\n}\n","import { MuiThemeProvider } from '@material-ui/core/styles';\nimport React, { Fragment } from 'react';\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom';\nimport { drawerCategories, envVariables as e, RouteKey, routes } from './app/config';\nimport { theme } from './app';\nimport { ResponsiveDrawer } from './components/material-ui/navigation';\n\ninterface Props {\n  logged?: boolean;\n}\n// combine props with RouteComponentProps\n// type CombinedProps = Props & RouteComponentProps;\n\nexport const Routes: React.FC<Props> = ({ logged }: Props) => {\n  let routerChild;\n  // drawerApp\n  if (logged) {\n    routerChild = <ResponsiveDrawer title={e.appTitle} categories={drawerCategories} />;\n  }\n  // signIn and signUp routes\n  else {\n    // TODO\n    // const redirectTo = (routes[RouteKey.HOME].path)\n    routerChild = (\n      <Fragment>\n        <Switch>\n          <Route exact path={routes[RouteKey.HOME].path} component={routes[RouteKey.SIGN_IN].component} />\n          <Route exact path={routes[RouteKey.SIGN_UP].path} component={routes[RouteKey.SIGN_UP].component} />\n          <Redirect to={routes[RouteKey.HOME].path} />\n        </Switch>\n      </Fragment>\n    );\n  }\n\n  return (\n    <Router>\n      <MuiThemeProvider theme={theme}>\n        {routerChild}\n      </MuiThemeProvider>\n    </Router>\n  );\n}\n","import * as React from 'react';\nimport { useState } from 'react';\nimport { setAccessToken } from './app';\nimport './App.css';\nimport { envVariables as e } from './app/config/env';\nimport { ActionType, useStateValue } from './app/state';\nimport { LinearIndeterminate } from './components/material-ui/feedback';\nimport { usePersonProfileLazyQuery } from './generated/graphql';\nimport { Routes } from './Routes';\n\ninterface Props { }\n\nexport const App: React.FC<Props> = () => {\n  // context state hook\n  const [state, dispatch] = useStateValue();\n  // state hook\n  const [loading, setLoading] = useState(true)\n  // person hook: try get profile in main useEffect and dispatch SIGNED_IN_USER with profile and logged=true, this will autoLogin\n  const [profileQuery, { called: profileCalled, data: profileData, loading: profileLoading }] = usePersonProfileLazyQuery();\n  const [profileLoaded, setProfileLoaded] = useState(false);\n\n  // on app mounts, request a new accessToken with cookie jid refreshToken, and set it in inMemory accessToken\n  React.useEffect(() => {\n    // require credentials to send jid cookie from browser\n    fetch(`${e.restServerHttpUri}/refresh-token`, {\n      method: 'POST',\n      credentials: 'include',\n    })\n      // hooks don't support async/await, to bypass we can use .then\n      .then(async res => {\n        // but here we can use it to await for json() Promise\n        const data = await res.json();\n        // disable loading, and let it pass to render Routes\n        setLoading(false);\n        // set inMemory AccessToken\n        setAccessToken(data.accessToken);\n        // fire profile hook if received a valid accessToken, else ignore\n        if (data.valid && !profileCalled) profileQuery();\n      })\n      .catch((error) => {\n        // omit error from console\n        // POST https://api.solidarychain.com/refresh-token 401 (Unauthorized)\n        console.error(error.message);\n      })\n    return () => {\n      // cleanup stuff\n    };\n  }, [state.user.logged, profileCalled, profileQuery]);\n\n  // used to update state with profile data, different of profile page that fires mutations to bring all data\n  // require own useEffect to prevent error `Warning: Cannot update a component (`StateProvider`) while rendering a different component (`App`). To locate the bad setState() call inside `App``\n  React.useEffect(() => {\n    if (!profileLoaded && profileData) {\n      // dispatch state\n      const payload = {\n        profile: {\n          id: profileData.personProfile.id,\n          firstName: profileData.personProfile.firstName,\n          lastName: profileData.personProfile.lastName,\n          username: profileData.personProfile.username,\n          email: profileData.personProfile.email,\n          fiscalNumber: profileData.personProfile.fiscalNumber,\n          mobilePhone: profileData.personProfile.mobilePhone,\n          roles: profileData.personProfile.roles\n        }\n      };\n      // send dispatch to autoLogin user\n      dispatch({ type: ActionType.SIGNED_IN_USER, payload });\n      // set state to profile loaded to prevent loops\n      setProfileLoaded(true);\n    }\n  }, [profileLoaded, profileData, dispatch]);\n\n  // require to use both loading states\n  if (loading && profileLoading) {\n    return <LinearIndeterminate />\n  }\n\n  return (<Routes logged={state.user.logged} />);\n}\n","import { ApolloProvider } from '@apollo/client';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport client from './app/config/apollo.client';\nimport reducer, { initialState } from './app/state/reducerStateValue';\nimport { StateProvider } from './app/state/useStateValue';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport 'reflect-metadata';\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    {/* wrap with state provider */}\n    <StateProvider initialState={initialState} reducer={reducer}>\n      <CssBaseline />\n      <div className=\"App\">\n        <App />\n      </div>\n    </StateProvider>\n  </ApolloProvider>\n  , document.getElementById('root')\n);\n","export * from './drawer-list-item';\nexport * from './drawer-sections';\nexport * from './event';\nexport * from './form';\nexport * from './route-item';\nexport * from './enums';\nexport * from './interfaces';\n"],"sourceRoot":""}